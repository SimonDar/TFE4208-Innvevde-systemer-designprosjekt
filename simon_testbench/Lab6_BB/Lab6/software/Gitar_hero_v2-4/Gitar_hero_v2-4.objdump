
Gitar_hero_v2-4.elf:     file format elf32-littlenios2
Gitar_hero_v2-4.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040238

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00005670 memsz 0x00005670 flags r-x
    LOAD off    0x00006690 vaddr 0x00045690 paddr 0x000470fc align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00000b68 vaddr 0x00048b68 paddr 0x00048b68 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005414  00040238  00040238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  0004564c  0004564c  0000664c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00045690  000470fc  00006690  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  00048b68  00048b68  00008b68  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00048cc0  00048cc0  000080fc  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a10  00000000  00000000  00008130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000177d8  00000000  00000000  00008b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006eba  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00005f73  00000000  00000000  000271d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00001518  00000000  00000000  0002d148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001a87  00000000  00000000  0002e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000030  00000000  00000000  000300e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00030118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 000014ac  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 00003fd8  00000000  00000000  00031634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000005ae  00000000  00000000  0003560c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  000380ba  2**0
                  CONTENTS, READONLY
 20 .cpu          00000008  00000000  00000000  000380bd  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000380c5  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000380c6  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000380c7  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000380d0  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000380d9  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000c  00000000  00000000  000380e2  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000059  00000000  00000000  000380ee  2**0
                  CONTENTS, READONLY
 28 .jdi          00008f98  00000000  00000000  00038147  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00032481  00000000  00000000  000410df  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040238 l    d  .text	00000000 .text
0004564c l    d  .rodata	00000000 .rodata
00045690 l    d  .rwdata	00000000 .rwdata
00048b68 l    d  .bss	00000000 .bss
00048cc0 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
00040280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Main.cpp
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00040458 l     F .text	00000008 __fp_lock
0004046c l     F .text	00000008 __fp_unlock
00040474 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00045690 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00043070 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004317c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000431a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00043294 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043374 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043460 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043634 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000470ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004387c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000439b0 l     F .text	00000034 alt_dev_reg
00046064 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00043c8c l     F .text	0000020c altera_avalon_jtag_uart_irq
00043e98 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00044688 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00044b00 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00044c2c l     F .text	0000003c alt_get_errno
00044c68 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00048b94 g     O .bss	00000004 alt_instruction_exception_handler
00042e64 g     F .text	00000058 _isatty_r
00043570 g     F .text	0000007c alt_main
000402e4 g     F .text	000000cc _puts_r
00048bc0 g     O .bss	00000100 alt_irq
00042afc g     F .text	00000064 _lseek_r
000470fc g       *ABS*	00000000 __flash_rwdata_start
00048cc0 g       *ABS*	00000000 __alt_heap_start
0004204c g     F .text	0000005c __sseek
00040794 g     F .text	00000010 __sinit
000405dc g     F .text	00000068 __sfmoreglue
00043610 g     F .text	00000024 __malloc_unlock
00041788 g     F .text	0000012c memmove
00040780 g     F .text	00000014 _cleanup
00045044 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042e04 g     F .text	00000060 _fstat_r
00048b74 g     O .bss	00000004 errno
00041fc4 g     F .text	00000008 __seofread
00048b7c g     O .bss	00000004 alt_argv
0004f0c4 g       *ABS*	00000000 _gp
00045ee4 g     O .rwdata	00000180 alt_fd_list
00045068 g     F .text	00000090 alt_find_dev
00041688 g     F .text	00000100 memcpy
00040460 g     F .text	0000000c _cleanup_r
00044bb0 g     F .text	0000007c alt_io_redirect
0004564c g       *ABS*	00000000 __DTOR_END__
000403b0 g     F .text	00000010 puts
00045330 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00044094 g     F .text	00000220 altera_avalon_jtag_uart_read
00042fb0 g     F .text	00000064 .hidden __udivsi3
000432d0 g     F .text	000000a4 isatty
000452a0 g     F .text	00000090 alt_icache_flush
00048b70 g     O .bss	00000004 __malloc_top_pad
000407dc g     F .text	000004bc __sfvwrite_r
00041f18 g     F .text	00000058 _sbrk_r
00042da0 g     F .text	00000064 _read_r
000470e4 g     O .rwdata	00000004 alt_max_fd
000422d0 g     F .text	000000f8 _fclose_r
00042660 g     F .text	00000084 fflush
00048b6c g     O .bss	00000004 __malloc_max_sbrked_mem
0004349c g     F .text	000000d4 lseek
000470c4 g     O .rwdata	00000004 _global_impure_ptr
000419a8 g     F .text	00000570 _realloc_r
00048cc0 g       *ABS*	00000000 __bss_end
00044a18 g     F .text	000000e8 alt_iic_isr_register
00044f18 g     F .text	0000012c alt_tick
000407b4 g     F .text	00000014 __fp_lock_all
000449cc g     F .text	0000004c alt_ic_irq_enabled
00044e74 g     F .text	000000a4 alt_alarm_stop
00048b84 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000c8 alt_irq_handler
00045ebc g     O .rwdata	00000028 alt_dev_null
0004463c g     F .text	0000004c alt_dcache_flush_all
000470fc g       *ABS*	00000000 __ram_rwdata_end
000470dc g     O .rwdata	00000008 alt_dev_list
000438b8 g     F .text	000000f8 write
00045690 g       *ABS*	00000000 __ram_rodata_end
000431e4 g     F .text	000000b0 fstat
00043014 g     F .text	0000005c .hidden __umodsi3
00048cc0 g       *ABS*	00000000 end
00043bcc g     F .text	000000c0 altera_avalon_jtag_uart_init
000401c4 g     F .exceptions	00000074 alt_instruction_exception_entry
0004564c g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
000442b4 g     F .text	00000228 altera_avalon_jtag_uart_write
000407a4 g     F .text	00000004 __sfp_lock_acquire
000415bc g     F .text	000000cc memchr
00042800 g     F .text	000002fc _free_r
000454f4 g     F .text	00000120 __call_exitprocs
000470cc g     O .rwdata	00000004 __malloc_sbrk_base
00040238 g     F .text	0000004c _start
00048b88 g     O .bss	00000004 _alt_tick_rate
00048b8c g     O .bss	00000008 _alt_nticks
00043670 g     F .text	000000fc read
00043a20 g     F .text	00000048 alt_sys_init
00045464 g     F .text	00000090 __register_exitproc
00043f38 g     F .text	00000068 altera_avalon_jtag_uart_close
00045690 g       *ABS*	00000000 __ram_rwdata_start
0004564c g       *ABS*	00000000 __ram_rodata_start
00048b98 g     O .bss	00000028 __malloc_current_mallinfo
00043a68 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00045200 g     F .text	000000a0 alt_get_fd
00042278 g     F .text	00000058 _close_r
000453ec g     F .text	00000078 memcmp
00043b28 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00048cc0 g       *ABS*	00000000 __alt_stack_base
00043b78 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00042114 g     F .text	00000164 __swsetup_r
00040644 g     F .text	0000013c __sfp
00045ab4 g     O .rwdata	00000408 __malloc_av_
000407b0 g     F .text	00000004 __sinit_lock_release
00041f70 g     F .text	00000054 __sread
000450f8 g     F .text	00000108 alt_find_file
000446c4 g     F .text	000000a8 alt_dev_llist_insert
000435ec g     F .text	00000024 __malloc_lock
000437c4 g     F .text	000000b8 sbrk
00042600 g     F .text	00000060 _fflush_r
00048b68 g       *ABS*	00000000 __bss_start
000418b4 g     F .text	000000f4 memset
00040284 g     F .text	00000060 main
00048b80 g     O .bss	00000004 alt_envp
00048b68 g     O .bss	00000004 __malloc_max_total_mem
00043ac8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000420a8 g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
000423c8 g     F .text	00000010 fclose
00040dd8 g     F .text	000007e4 _malloc_r
000470e8 g     O .rwdata	00000004 alt_errno
00040c98 g     F .text	00000098 _fwalk
00042ebc g     F .text	00000080 .hidden __divsi3
000426e4 g     F .text	0000011c _malloc_trim_r
0004564c g       *ABS*	00000000 __CTOR_END__
0004564c g       *ABS*	00000000 __flash_rodata_start
0004564c g       *ABS*	00000000 __DTOR_LIST__
000439e4 g     F .text	0000003c alt_irq_init
0004376c g     F .text	00000058 alt_release_fd
000453a4 g     F .text	00000014 atexit
000420b0 g     F .text	00000064 _write_r
000470c8 g     O .rwdata	00000004 _impure_ptr
00048b78 g     O .bss	00000004 alt_argc
000423d8 g     F .text	00000228 __sflush_r
000447d0 g     F .text	00000064 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
000407c8 g     F .text	00000014 __fp_unlock_all
000470d4 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00042d10 g     F .text	00000090 __swhatbuf_r
00044868 g     F .text	00000050 alt_ic_isr_register
000470fc g       *ABS*	00000000 _edata
00048cc0 g       *ABS*	00000000 _end
00040238 g       *ABS*	00000000 __ram_exceptions_end
00043fa0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00044940 g     F .text	0000008c alt_ic_irq_disable
00041fcc g     F .text	00000080 __swrite
000470d0 g     O .rwdata	00000004 __malloc_trim_threshold
000453b8 g     F .text	00000034 exit
00040d30 g     F .text	000000a8 _fwalk_reent
00042f3c g     F .text	00000074 .hidden __modsi3
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000407a8 g     F .text	00000004 __sfp_lock_release
00045614 g     F .text	00000038 _exit
000444dc g     F .text	00000160 alt_alarm_start
00042b60 g     F .text	000001b0 __smakebuf_r
000403c0 g     F .text	00000098 strlen
00044d20 g     F .text	00000154 open
00044834 g     F .text	00000034 alt_icache_flush_all
000470f0 g     O .rwdata	00000004 alt_priority_mask
000448b8 g     F .text	00000088 alt_ic_irq_enable
000470f4 g     O .rwdata	00000008 alt_alarm_list
0004476c g     F .text	00000064 _do_ctors
000430ac g     F .text	000000d0 close
000433dc g     F .text	00000084 alt_load
000407ac g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08408e14 	ori	at,at,568
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
   40094:	e93fff04 	addi	r4,ea,-4
   40098:	00401c40 	call	401c4 <alt_instruction_exception_entry>
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>
   400a0:	ebffff04 	addi	r15,ea,-4
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0ffff17 	ldw	r3,-4(fp)
   40130:	e0bffe17 	ldw	r2,-8(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001126 	beq	r2,zero,40180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	e0bffd17 	ldw	r2,-12(fp)
   40140:	100690fa 	slli	r3,r2,3
   40144:	00800174 	movhi	r2,5
   40148:	1885883a 	add	r2,r3,r2
   4014c:	10e2f017 	ldw	r3,-29760(r2)
   40150:	e0bffd17 	ldw	r2,-12(fp)
   40154:	100890fa 	slli	r4,r2,3
   40158:	00800174 	movhi	r2,5
   4015c:	2085883a 	add	r2,r4,r2
   40160:	10a2f117 	ldw	r2,-29756(r2)
   40164:	1009883a 	mov	r4,r2
   40168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   4016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   40170:	0005313a 	rdctl	r2,ipending
   40174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   40178:	e0bffb17 	ldw	r2,-20(fp)
   4017c:	00000706 	br	4019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   40180:	e0bffe17 	ldw	r2,-8(fp)
   40184:	1085883a 	add	r2,r2,r2
   40188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   4018c:	e0bffd17 	ldw	r2,-12(fp)
   40190:	10800044 	addi	r2,r2,1
   40194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   40198:	003fe406 	br	4012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   4019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   401a0:	e0bfff17 	ldw	r2,-4(fp)
   401a4:	103fde1e 	bne	r2,zero,40120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401a8:	0001883a 	nop
}
   401ac:	0001883a 	nop
   401b0:	e037883a 	mov	sp,fp
   401b4:	dfc00117 	ldw	ra,4(sp)
   401b8:	df000017 	ldw	fp,0(sp)
   401bc:	dec00204 	addi	sp,sp,8
   401c0:	f800283a 	ret

000401c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401c4:	defffb04 	addi	sp,sp,-20
   401c8:	dfc00415 	stw	ra,16(sp)
   401cc:	df000315 	stw	fp,12(sp)
   401d0:	df000304 	addi	fp,sp,12
   401d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401d8:	000531fa 	rdctl	r2,exception
   401dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401e0:	e0bfff17 	ldw	r2,-4(fp)
   401e4:	1004d0ba 	srli	r2,r2,2
   401e8:	108007cc 	andi	r2,r2,31
   401ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401f0:	0005333a 	rdctl	r2,badaddr
   401f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f8:	d0a6b417 	ldw	r2,-25904(gp)
   401fc:	10000726 	beq	r2,zero,4021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   40200:	d0a6b417 	ldw	r2,-25904(gp)
   40204:	e0ffff17 	ldw	r3,-4(fp)
   40208:	e1bffe17 	ldw	r6,-8(fp)
   4020c:	e17ffd17 	ldw	r5,-12(fp)
   40210:	1809883a 	mov	r4,r3
   40214:	103ee83a 	callr	r2
   40218:	00000206 	br	40224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   4021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40220:	0005883a 	mov	r2,zero
}
   40224:	e037883a 	mov	sp,fp
   40228:	dfc00117 	ldw	ra,4(sp)
   4022c:	df000017 	ldw	fp,0(sp)
   40230:	dec00204 	addi	sp,sp,8
   40234:	f800283a 	ret

Disassembly of section .text:

00040238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   4023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   40240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40244:	00bffd16 	blt	zero,r2,4023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40248:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   4024c:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   40250:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40254:	d6bc3114 	ori	gp,gp,61636
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40258:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   4025c:	10a2da14 	ori	r2,r2,35688

    movhi r3, %hi(__bss_end)
   40260:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40264:	18e33014 	ori	r3,r3,36032

    beq r2, r3, 1f
   40268:	10c00326 	beq	r2,r3,40278 <_start+0x40>

0:
    stw zero, (r2)
   4026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40274:	10fffd36 	bltu	r2,r3,4026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40278:	00433dc0 	call	433dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   4027c:	00435700 	call	43570 <alt_main>

00040280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40280:	003fff06 	br	40280 <alt_after_alt_main>

00040284 <main>:
#include <stdio.h>

#include "system.h"
#include "altera_avalon_pio_regs.h"
int main()
{
   40284:	defffc04 	addi	sp,sp,-16
   40288:	dfc00315 	stw	ra,12(sp)
   4028c:	df000215 	stw	fp,8(sp)
   40290:	df000204 	addi	fp,sp,8
printf("Hello from Nios II!\n");
   40294:	01000134 	movhi	r4,4
   40298:	21159304 	addi	r4,r4,22092
   4029c:	00403b00 	call	403b0 <puts>
int count = 0;
   402a0:	e03fff15 	stw	zero,-4(fp)
int delay;
while(1)
{
IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, count);
   402a4:	e0ffff17 	ldw	r3,-4(fp)
   402a8:	00800234 	movhi	r2,8
   402ac:	10c40035 	stwio	r3,4096(r2)
delay = 0;
   402b0:	e03ffe15 	stw	zero,-8(fp)
while(delay < 200000)
   402b4:	00000306 	br	402c4 <main+0x40>
{
delay++;
   402b8:	e0bffe17 	ldw	r2,-8(fp)
   402bc:	10800044 	addi	r2,r2,1
   402c0:	e0bffe15 	stw	r2,-8(fp)
while(delay < 200000)
   402c4:	e0fffe17 	ldw	r3,-8(fp)
   402c8:	008000f4 	movhi	r2,3
   402cc:	10834fc4 	addi	r2,r2,3391
   402d0:	10fff90e 	bge	r2,r3,402b8 <main+0x34>
}
count++;
   402d4:	e0bfff17 	ldw	r2,-4(fp)
   402d8:	10800044 	addi	r2,r2,1
   402dc:	e0bfff15 	stw	r2,-4(fp)
IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, count);
   402e0:	003ff006 	br	402a4 <main+0x20>

000402e4 <_puts_r>:
   402e4:	defff504 	addi	sp,sp,-44
   402e8:	dc000815 	stw	r16,32(sp)
   402ec:	2021883a 	mov	r16,r4
   402f0:	2809883a 	mov	r4,r5
   402f4:	dc400915 	stw	r17,36(sp)
   402f8:	dfc00a15 	stw	ra,40(sp)
   402fc:	2823883a 	mov	r17,r5
   40300:	00403c00 	call	403c0 <strlen>
   40304:	11000044 	addi	r4,r2,1
   40308:	d8800515 	stw	r2,20(sp)
   4030c:	00800044 	movi	r2,1
   40310:	00c00134 	movhi	r3,4
   40314:	d8800715 	stw	r2,28(sp)
   40318:	d8800404 	addi	r2,sp,16
   4031c:	18d59804 	addi	r3,r3,22112
   40320:	d8800115 	stw	r2,4(sp)
   40324:	00800084 	movi	r2,2
   40328:	dc400415 	stw	r17,16(sp)
   4032c:	d8c00615 	stw	r3,24(sp)
   40330:	d9000315 	stw	r4,12(sp)
   40334:	d8800215 	stw	r2,8(sp)
   40338:	81400217 	ldw	r5,8(r16)
   4033c:	80000226 	beq	r16,zero,40348 <_puts_r+0x64>
   40340:	80800e17 	ldw	r2,56(r16)
   40344:	10001326 	beq	r2,zero,40394 <_puts_r+0xb0>
   40348:	2880030b 	ldhu	r2,12(r5)
   4034c:	10c8000c 	andi	r3,r2,8192
   40350:	1800061e 	bne	r3,zero,4036c <_puts_r+0x88>
   40354:	28c01917 	ldw	r3,100(r5)
   40358:	0137ffc4 	movi	r4,-8193
   4035c:	10880014 	ori	r2,r2,8192
   40360:	1906703a 	and	r3,r3,r4
   40364:	2880030d 	sth	r2,12(r5)
   40368:	28c01915 	stw	r3,100(r5)
   4036c:	d9800104 	addi	r6,sp,4
   40370:	8009883a 	mov	r4,r16
   40374:	00407dc0 	call	407dc <__sfvwrite_r>
   40378:	10000b1e 	bne	r2,zero,403a8 <_puts_r+0xc4>
   4037c:	00800284 	movi	r2,10
   40380:	dfc00a17 	ldw	ra,40(sp)
   40384:	dc400917 	ldw	r17,36(sp)
   40388:	dc000817 	ldw	r16,32(sp)
   4038c:	dec00b04 	addi	sp,sp,44
   40390:	f800283a 	ret
   40394:	8009883a 	mov	r4,r16
   40398:	d9400015 	stw	r5,0(sp)
   4039c:	00407940 	call	40794 <__sinit>
   403a0:	d9400017 	ldw	r5,0(sp)
   403a4:	003fe806 	br	40348 <_puts_r+0x64>
   403a8:	00bfffc4 	movi	r2,-1
   403ac:	003ff406 	br	40380 <_puts_r+0x9c>

000403b0 <puts>:
   403b0:	00800134 	movhi	r2,4
   403b4:	200b883a 	mov	r5,r4
   403b8:	111c3217 	ldw	r4,28872(r2)
   403bc:	00402e41 	jmpi	402e4 <_puts_r>

000403c0 <strlen>:
   403c0:	208000cc 	andi	r2,r4,3
   403c4:	10000926 	beq	r2,zero,403ec <strlen+0x2c>
   403c8:	2005883a 	mov	r2,r4
   403cc:	00000306 	br	403dc <strlen+0x1c>
   403d0:	10800044 	addi	r2,r2,1
   403d4:	10c000cc 	andi	r3,r2,3
   403d8:	18000526 	beq	r3,zero,403f0 <strlen+0x30>
   403dc:	10c00007 	ldb	r3,0(r2)
   403e0:	183ffb1e 	bne	r3,zero,403d0 <strlen+0x10>
   403e4:	1105c83a 	sub	r2,r2,r4
   403e8:	f800283a 	ret
   403ec:	2005883a 	mov	r2,r4
   403f0:	11400017 	ldw	r5,0(r2)
   403f4:	01ffbff4 	movhi	r7,65279
   403f8:	39ffbfc4 	addi	r7,r7,-257
   403fc:	29c7883a 	add	r3,r5,r7
   40400:	01a02074 	movhi	r6,32897
   40404:	014a303a 	nor	r5,zero,r5
   40408:	1946703a 	and	r3,r3,r5
   4040c:	31a02004 	addi	r6,r6,-32640
   40410:	1986703a 	and	r3,r3,r6
   40414:	1800071e 	bne	r3,zero,40434 <strlen+0x74>
   40418:	11400117 	ldw	r5,4(r2)
   4041c:	10800104 	addi	r2,r2,4
   40420:	29c7883a 	add	r3,r5,r7
   40424:	014a303a 	nor	r5,zero,r5
   40428:	1946703a 	and	r3,r3,r5
   4042c:	1986703a 	and	r3,r3,r6
   40430:	183ff926 	beq	r3,zero,40418 <strlen+0x58>
   40434:	10c00007 	ldb	r3,0(r2)
   40438:	183fea26 	beq	r3,zero,403e4 <strlen+0x24>
   4043c:	10c00047 	ldb	r3,1(r2)
   40440:	10800044 	addi	r2,r2,1
   40444:	183fe726 	beq	r3,zero,403e4 <strlen+0x24>
   40448:	10c00047 	ldb	r3,1(r2)
   4044c:	10800044 	addi	r2,r2,1
   40450:	183ffa1e 	bne	r3,zero,4043c <strlen+0x7c>
   40454:	003fe306 	br	403e4 <strlen+0x24>

00040458 <__fp_lock>:
   40458:	0005883a 	mov	r2,zero
   4045c:	f800283a 	ret

00040460 <_cleanup_r>:
   40460:	01400134 	movhi	r5,4
   40464:	2948b404 	addi	r5,r5,8912
   40468:	0040d301 	jmpi	40d30 <_fwalk_reent>

0004046c <__fp_unlock>:
   4046c:	0005883a 	mov	r2,zero
   40470:	f800283a 	ret

00040474 <__sinit.part.0>:
   40474:	00c00134 	movhi	r3,4
   40478:	20800117 	ldw	r2,4(r4)
   4047c:	18c11804 	addi	r3,r3,1120
   40480:	20c00f15 	stw	r3,60(r4)
   40484:	2140bb04 	addi	r5,r4,748
   40488:	00c000c4 	movi	r3,3
   4048c:	20c0b915 	stw	r3,740(r4)
   40490:	2140ba15 	stw	r5,744(r4)
   40494:	2000b815 	stw	zero,736(r4)
   40498:	10001705 	stb	zero,92(r2)
   4049c:	10001745 	stb	zero,93(r2)
   404a0:	10001785 	stb	zero,94(r2)
   404a4:	100017c5 	stb	zero,95(r2)
   404a8:	10001805 	stb	zero,96(r2)
   404ac:	10001845 	stb	zero,97(r2)
   404b0:	10001885 	stb	zero,98(r2)
   404b4:	100018c5 	stb	zero,99(r2)
   404b8:	00c00104 	movi	r3,4
   404bc:	10c00315 	stw	r3,12(r2)
   404c0:	02000134 	movhi	r8,4
   404c4:	20c00217 	ldw	r3,8(r4)
   404c8:	01c00134 	movhi	r7,4
   404cc:	01800134 	movhi	r6,4
   404d0:	01400134 	movhi	r5,4
   404d4:	4207dc04 	addi	r8,r8,8048
   404d8:	39c7f304 	addi	r7,r7,8140
   404dc:	31881304 	addi	r6,r6,8268
   404e0:	29482a04 	addi	r5,r5,8360
   404e4:	02400074 	movhi	r9,1
   404e8:	10001915 	stw	zero,100(r2)
   404ec:	10000015 	stw	zero,0(r2)
   404f0:	10000115 	stw	zero,4(r2)
   404f4:	10000215 	stw	zero,8(r2)
   404f8:	10000415 	stw	zero,16(r2)
   404fc:	10000515 	stw	zero,20(r2)
   40500:	10000615 	stw	zero,24(r2)
   40504:	10800715 	stw	r2,28(r2)
   40508:	12000815 	stw	r8,32(r2)
   4050c:	11c00915 	stw	r7,36(r2)
   40510:	11800a15 	stw	r6,40(r2)
   40514:	11400b15 	stw	r5,44(r2)
   40518:	4a400284 	addi	r9,r9,10
   4051c:	1a400315 	stw	r9,12(r3)
   40520:	18001915 	stw	zero,100(r3)
   40524:	18000015 	stw	zero,0(r3)
   40528:	18000115 	stw	zero,4(r3)
   4052c:	18000215 	stw	zero,8(r3)
   40530:	18000415 	stw	zero,16(r3)
   40534:	18001705 	stb	zero,92(r3)
   40538:	18001745 	stb	zero,93(r3)
   4053c:	18001785 	stb	zero,94(r3)
   40540:	180017c5 	stb	zero,95(r3)
   40544:	18001805 	stb	zero,96(r3)
   40548:	18001845 	stb	zero,97(r3)
   4054c:	18001885 	stb	zero,98(r3)
   40550:	180018c5 	stb	zero,99(r3)
   40554:	20800317 	ldw	r2,12(r4)
   40558:	024000b4 	movhi	r9,2
   4055c:	18000515 	stw	zero,20(r3)
   40560:	18000615 	stw	zero,24(r3)
   40564:	18c00715 	stw	r3,28(r3)
   40568:	1a000815 	stw	r8,32(r3)
   4056c:	19c00915 	stw	r7,36(r3)
   40570:	19800a15 	stw	r6,40(r3)
   40574:	19400b15 	stw	r5,44(r3)
   40578:	4a400484 	addi	r9,r9,18
   4057c:	10001915 	stw	zero,100(r2)
   40580:	10000015 	stw	zero,0(r2)
   40584:	10000115 	stw	zero,4(r2)
   40588:	10000215 	stw	zero,8(r2)
   4058c:	12400315 	stw	r9,12(r2)
   40590:	10000415 	stw	zero,16(r2)
   40594:	10000515 	stw	zero,20(r2)
   40598:	10000615 	stw	zero,24(r2)
   4059c:	10001705 	stb	zero,92(r2)
   405a0:	10001745 	stb	zero,93(r2)
   405a4:	10001785 	stb	zero,94(r2)
   405a8:	100017c5 	stb	zero,95(r2)
   405ac:	10001805 	stb	zero,96(r2)
   405b0:	10001845 	stb	zero,97(r2)
   405b4:	10001885 	stb	zero,98(r2)
   405b8:	100018c5 	stb	zero,99(r2)
   405bc:	10800715 	stw	r2,28(r2)
   405c0:	12000815 	stw	r8,32(r2)
   405c4:	11c00915 	stw	r7,36(r2)
   405c8:	11800a15 	stw	r6,40(r2)
   405cc:	11400b15 	stw	r5,44(r2)
   405d0:	00800044 	movi	r2,1
   405d4:	20800e15 	stw	r2,56(r4)
   405d8:	f800283a 	ret

000405dc <__sfmoreglue>:
   405dc:	defffc04 	addi	sp,sp,-16
   405e0:	dc400115 	stw	r17,4(sp)
   405e4:	2c7fffc4 	addi	r17,r5,-1
   405e8:	8c401a24 	muli	r17,r17,104
   405ec:	dc800215 	stw	r18,8(sp)
   405f0:	2825883a 	mov	r18,r5
   405f4:	89401d04 	addi	r5,r17,116
   405f8:	dc000015 	stw	r16,0(sp)
   405fc:	dfc00315 	stw	ra,12(sp)
   40600:	0040dd80 	call	40dd8 <_malloc_r>
   40604:	1021883a 	mov	r16,r2
   40608:	10000726 	beq	r2,zero,40628 <__sfmoreglue+0x4c>
   4060c:	11000304 	addi	r4,r2,12
   40610:	10000015 	stw	zero,0(r2)
   40614:	14800115 	stw	r18,4(r2)
   40618:	11000215 	stw	r4,8(r2)
   4061c:	89801a04 	addi	r6,r17,104
   40620:	000b883a 	mov	r5,zero
   40624:	00418b40 	call	418b4 <memset>
   40628:	8005883a 	mov	r2,r16
   4062c:	dfc00317 	ldw	ra,12(sp)
   40630:	dc800217 	ldw	r18,8(sp)
   40634:	dc400117 	ldw	r17,4(sp)
   40638:	dc000017 	ldw	r16,0(sp)
   4063c:	dec00404 	addi	sp,sp,16
   40640:	f800283a 	ret

00040644 <__sfp>:
   40644:	defffb04 	addi	sp,sp,-20
   40648:	00800134 	movhi	r2,4
   4064c:	dc400115 	stw	r17,4(sp)
   40650:	145c3117 	ldw	r17,28868(r2)
   40654:	dc800215 	stw	r18,8(sp)
   40658:	dfc00415 	stw	ra,16(sp)
   4065c:	88800e17 	ldw	r2,56(r17)
   40660:	dcc00315 	stw	r19,12(sp)
   40664:	dc000015 	stw	r16,0(sp)
   40668:	2025883a 	mov	r18,r4
   4066c:	10002f26 	beq	r2,zero,4072c <__sfp+0xe8>
   40670:	8c40b804 	addi	r17,r17,736
   40674:	04c00104 	movi	r19,4
   40678:	88800117 	ldw	r2,4(r17)
   4067c:	8c000217 	ldw	r16,8(r17)
   40680:	10bfffc4 	addi	r2,r2,-1
   40684:	1000030e 	bge	r2,zero,40694 <__sfp+0x50>
   40688:	00002406 	br	4071c <__sfp+0xd8>
   4068c:	84001a04 	addi	r16,r16,104
   40690:	28002226 	beq	r5,zero,4071c <__sfp+0xd8>
   40694:	80c0030f 	ldh	r3,12(r16)
   40698:	10bfffc4 	addi	r2,r2,-1
   4069c:	117fffd8 	cmpnei	r5,r2,-1
   406a0:	183ffa1e 	bne	r3,zero,4068c <__sfp+0x48>
   406a4:	00bffff4 	movhi	r2,65535
   406a8:	10800044 	addi	r2,r2,1
   406ac:	80001915 	stw	zero,100(r16)
   406b0:	80000015 	stw	zero,0(r16)
   406b4:	80000115 	stw	zero,4(r16)
   406b8:	80000215 	stw	zero,8(r16)
   406bc:	80800315 	stw	r2,12(r16)
   406c0:	80000415 	stw	zero,16(r16)
   406c4:	80000515 	stw	zero,20(r16)
   406c8:	80000615 	stw	zero,24(r16)
   406cc:	80001705 	stb	zero,92(r16)
   406d0:	80001745 	stb	zero,93(r16)
   406d4:	80001785 	stb	zero,94(r16)
   406d8:	800017c5 	stb	zero,95(r16)
   406dc:	80001805 	stb	zero,96(r16)
   406e0:	80001845 	stb	zero,97(r16)
   406e4:	80001885 	stb	zero,98(r16)
   406e8:	800018c5 	stb	zero,99(r16)
   406ec:	80000c15 	stw	zero,48(r16)
   406f0:	80000d15 	stw	zero,52(r16)
   406f4:	80001115 	stw	zero,68(r16)
   406f8:	80001215 	stw	zero,72(r16)
   406fc:	8005883a 	mov	r2,r16
   40700:	dfc00417 	ldw	ra,16(sp)
   40704:	dcc00317 	ldw	r19,12(sp)
   40708:	dc800217 	ldw	r18,8(sp)
   4070c:	dc400117 	ldw	r17,4(sp)
   40710:	dc000017 	ldw	r16,0(sp)
   40714:	dec00504 	addi	sp,sp,20
   40718:	f800283a 	ret
   4071c:	8c000017 	ldw	r16,0(r17)
   40720:	80000526 	beq	r16,zero,40738 <__sfp+0xf4>
   40724:	8023883a 	mov	r17,r16
   40728:	003fd306 	br	40678 <__sfp+0x34>
   4072c:	8809883a 	mov	r4,r17
   40730:	00404740 	call	40474 <__sinit.part.0>
   40734:	003fce06 	br	40670 <__sfp+0x2c>
   40738:	01406b04 	movi	r5,428
   4073c:	9009883a 	mov	r4,r18
   40740:	0040dd80 	call	40dd8 <_malloc_r>
   40744:	1021883a 	mov	r16,r2
   40748:	10000926 	beq	r2,zero,40770 <__sfp+0x12c>
   4074c:	11000304 	addi	r4,r2,12
   40750:	10000015 	stw	zero,0(r2)
   40754:	14c00115 	stw	r19,4(r2)
   40758:	11000215 	stw	r4,8(r2)
   4075c:	01806804 	movi	r6,416
   40760:	000b883a 	mov	r5,zero
   40764:	00418b40 	call	418b4 <memset>
   40768:	8c000015 	stw	r16,0(r17)
   4076c:	003fed06 	br	40724 <__sfp+0xe0>
   40770:	88000015 	stw	zero,0(r17)
   40774:	00800304 	movi	r2,12
   40778:	90800015 	stw	r2,0(r18)
   4077c:	003fdf06 	br	406fc <__sfp+0xb8>

00040780 <_cleanup>:
   40780:	00800134 	movhi	r2,4
   40784:	111c3117 	ldw	r4,28868(r2)
   40788:	01400134 	movhi	r5,4
   4078c:	2948b404 	addi	r5,r5,8912
   40790:	0040d301 	jmpi	40d30 <_fwalk_reent>

00040794 <__sinit>:
   40794:	20800e17 	ldw	r2,56(r4)
   40798:	10000126 	beq	r2,zero,407a0 <__sinit+0xc>
   4079c:	f800283a 	ret
   407a0:	00404741 	jmpi	40474 <__sinit.part.0>

000407a4 <__sfp_lock_acquire>:
   407a4:	f800283a 	ret

000407a8 <__sfp_lock_release>:
   407a8:	f800283a 	ret

000407ac <__sinit_lock_acquire>:
   407ac:	f800283a 	ret

000407b0 <__sinit_lock_release>:
   407b0:	f800283a 	ret

000407b4 <__fp_lock_all>:
   407b4:	00800134 	movhi	r2,4
   407b8:	111c3217 	ldw	r4,28872(r2)
   407bc:	01400134 	movhi	r5,4
   407c0:	29411604 	addi	r5,r5,1112
   407c4:	0040c981 	jmpi	40c98 <_fwalk>

000407c8 <__fp_unlock_all>:
   407c8:	00800134 	movhi	r2,4
   407cc:	111c3217 	ldw	r4,28872(r2)
   407d0:	01400134 	movhi	r5,4
   407d4:	29411b04 	addi	r5,r5,1132
   407d8:	0040c981 	jmpi	40c98 <_fwalk>

000407dc <__sfvwrite_r>:
   407dc:	30800217 	ldw	r2,8(r6)
   407e0:	1000c626 	beq	r2,zero,40afc <__sfvwrite_r+0x320>
   407e4:	2a80030b 	ldhu	r10,12(r5)
   407e8:	defff404 	addi	sp,sp,-48
   407ec:	df000a15 	stw	fp,40(sp)
   407f0:	dc800415 	stw	r18,16(sp)
   407f4:	dc000215 	stw	r16,8(sp)
   407f8:	dfc00b15 	stw	ra,44(sp)
   407fc:	ddc00915 	stw	r23,36(sp)
   40800:	dd800815 	stw	r22,32(sp)
   40804:	dd400715 	stw	r21,28(sp)
   40808:	dd000615 	stw	r20,24(sp)
   4080c:	dcc00515 	stw	r19,20(sp)
   40810:	dc400315 	stw	r17,12(sp)
   40814:	5080020c 	andi	r2,r10,8
   40818:	3039883a 	mov	fp,r6
   4081c:	2025883a 	mov	r18,r4
   40820:	2821883a 	mov	r16,r5
   40824:	10002226 	beq	r2,zero,408b0 <__sfvwrite_r+0xd4>
   40828:	28800417 	ldw	r2,16(r5)
   4082c:	10002026 	beq	r2,zero,408b0 <__sfvwrite_r+0xd4>
   40830:	5080008c 	andi	r2,r10,2
   40834:	e4400017 	ldw	r17,0(fp)
   40838:	10002526 	beq	r2,zero,408d0 <__sfvwrite_r+0xf4>
   4083c:	80800917 	ldw	r2,36(r16)
   40840:	81400717 	ldw	r5,28(r16)
   40844:	05600034 	movhi	r21,32768
   40848:	0029883a 	mov	r20,zero
   4084c:	0027883a 	mov	r19,zero
   40850:	ad7f0004 	addi	r21,r21,-1024
   40854:	a00d883a 	mov	r6,r20
   40858:	9009883a 	mov	r4,r18
   4085c:	98001026 	beq	r19,zero,408a0 <__sfvwrite_r+0xc4>
   40860:	980f883a 	mov	r7,r19
   40864:	acc0012e 	bgeu	r21,r19,4086c <__sfvwrite_r+0x90>
   40868:	a80f883a 	mov	r7,r21
   4086c:	103ee83a 	callr	r2
   40870:	00809d0e 	bge	zero,r2,40ae8 <__sfvwrite_r+0x30c>
   40874:	e0c00217 	ldw	r3,8(fp)
   40878:	a0a9883a 	add	r20,r20,r2
   4087c:	98a7c83a 	sub	r19,r19,r2
   40880:	1885c83a 	sub	r2,r3,r2
   40884:	e0800215 	stw	r2,8(fp)
   40888:	10008626 	beq	r2,zero,40aa4 <__sfvwrite_r+0x2c8>
   4088c:	80800917 	ldw	r2,36(r16)
   40890:	81400717 	ldw	r5,28(r16)
   40894:	a00d883a 	mov	r6,r20
   40898:	9009883a 	mov	r4,r18
   4089c:	983ff01e 	bne	r19,zero,40860 <__sfvwrite_r+0x84>
   408a0:	8d000017 	ldw	r20,0(r17)
   408a4:	8cc00117 	ldw	r19,4(r17)
   408a8:	8c400204 	addi	r17,r17,8
   408ac:	003fe906 	br	40854 <__sfvwrite_r+0x78>
   408b0:	800b883a 	mov	r5,r16
   408b4:	9009883a 	mov	r4,r18
   408b8:	00421140 	call	42114 <__swsetup_r>
   408bc:	1000f41e 	bne	r2,zero,40c90 <__sfvwrite_r+0x4b4>
   408c0:	8280030b 	ldhu	r10,12(r16)
   408c4:	e4400017 	ldw	r17,0(fp)
   408c8:	5080008c 	andi	r2,r10,2
   408cc:	103fdb1e 	bne	r2,zero,4083c <__sfvwrite_r+0x60>
   408d0:	5080004c 	andi	r2,r10,1
   408d4:	1000511e 	bne	r2,zero,40a1c <__sfvwrite_r+0x240>
   408d8:	00a00034 	movhi	r2,32768
   408dc:	10bfff84 	addi	r2,r2,-2
   408e0:	01200034 	movhi	r4,32768
   408e4:	82000017 	ldw	r8,0(r16)
   408e8:	80c00217 	ldw	r3,8(r16)
   408ec:	d8800015 	stw	r2,0(sp)
   408f0:	20bfffc4 	addi	r2,r4,-1
   408f4:	002b883a 	mov	r21,zero
   408f8:	002d883a 	mov	r22,zero
   408fc:	d8800115 	stw	r2,4(sp)
   40900:	4009883a 	mov	r4,r8
   40904:	1827883a 	mov	r19,r3
   40908:	b0004026 	beq	r22,zero,40a0c <__sfvwrite_r+0x230>
   4090c:	5080800c 	andi	r2,r10,512
   40910:	10009426 	beq	r2,zero,40b64 <__sfvwrite_r+0x388>
   40914:	1829883a 	mov	r20,r3
   40918:	b0c0b836 	bltu	r22,r3,40bfc <__sfvwrite_r+0x420>
   4091c:	5081200c 	andi	r2,r10,1152
   40920:	10002426 	beq	r2,zero,409b4 <__sfvwrite_r+0x1d8>
   40924:	80800517 	ldw	r2,20(r16)
   40928:	81000417 	ldw	r4,16(r16)
   4092c:	108000e4 	muli	r2,r2,3
   40930:	412fc83a 	sub	r23,r8,r4
   40934:	b8c00044 	addi	r3,r23,1
   40938:	100ed7fa 	srli	r7,r2,31
   4093c:	1d87883a 	add	r3,r3,r22
   40940:	388f883a 	add	r7,r7,r2
   40944:	3827d07a 	srai	r19,r7,1
   40948:	980b883a 	mov	r5,r19
   4094c:	98c0022e 	bgeu	r19,r3,40958 <__sfvwrite_r+0x17c>
   40950:	1827883a 	mov	r19,r3
   40954:	180b883a 	mov	r5,r3
   40958:	5281000c 	andi	r10,r10,1024
   4095c:	5000ba26 	beq	r10,zero,40c48 <__sfvwrite_r+0x46c>
   40960:	9009883a 	mov	r4,r18
   40964:	0040dd80 	call	40dd8 <_malloc_r>
   40968:	1000c526 	beq	r2,zero,40c80 <__sfvwrite_r+0x4a4>
   4096c:	81400417 	ldw	r5,16(r16)
   40970:	1009883a 	mov	r4,r2
   40974:	b80d883a 	mov	r6,r23
   40978:	00416880 	call	41688 <memcpy>
   4097c:	1007883a 	mov	r3,r2
   40980:	8080030b 	ldhu	r2,12(r16)
   40984:	013edfc4 	movi	r4,-1153
   40988:	1104703a 	and	r2,r2,r4
   4098c:	10802014 	ori	r2,r2,128
   40990:	8080030d 	sth	r2,12(r16)
   40994:	9dd1c83a 	sub	r8,r19,r23
   40998:	1dc9883a 	add	r4,r3,r23
   4099c:	84c00515 	stw	r19,20(r16)
   409a0:	80c00415 	stw	r3,16(r16)
   409a4:	81000015 	stw	r4,0(r16)
   409a8:	b027883a 	mov	r19,r22
   409ac:	82000215 	stw	r8,8(r16)
   409b0:	b029883a 	mov	r20,r22
   409b4:	a00d883a 	mov	r6,r20
   409b8:	a80b883a 	mov	r5,r21
   409bc:	00417880 	call	41788 <memmove>
   409c0:	80c00217 	ldw	r3,8(r16)
   409c4:	82000017 	ldw	r8,0(r16)
   409c8:	b02f883a 	mov	r23,r22
   409cc:	1cc7c83a 	sub	r3,r3,r19
   409d0:	450d883a 	add	r6,r8,r20
   409d4:	80c00215 	stw	r3,8(r16)
   409d8:	81800015 	stw	r6,0(r16)
   409dc:	002d883a 	mov	r22,zero
   409e0:	e0800217 	ldw	r2,8(fp)
   409e4:	adeb883a 	add	r21,r21,r23
   409e8:	15c5c83a 	sub	r2,r2,r23
   409ec:	e0800215 	stw	r2,8(fp)
   409f0:	10002c26 	beq	r2,zero,40aa4 <__sfvwrite_r+0x2c8>
   409f4:	82000017 	ldw	r8,0(r16)
   409f8:	80c00217 	ldw	r3,8(r16)
   409fc:	8280030b 	ldhu	r10,12(r16)
   40a00:	4009883a 	mov	r4,r8
   40a04:	1827883a 	mov	r19,r3
   40a08:	b03fc01e 	bne	r22,zero,4090c <__sfvwrite_r+0x130>
   40a0c:	8d400017 	ldw	r21,0(r17)
   40a10:	8d800117 	ldw	r22,4(r17)
   40a14:	8c400204 	addi	r17,r17,8
   40a18:	003fb906 	br	40900 <__sfvwrite_r+0x124>
   40a1c:	002f883a 	mov	r23,zero
   40a20:	0005883a 	mov	r2,zero
   40a24:	002d883a 	mov	r22,zero
   40a28:	0029883a 	mov	r20,zero
   40a2c:	a0003526 	beq	r20,zero,40b04 <__sfvwrite_r+0x328>
   40a30:	10003926 	beq	r2,zero,40b18 <__sfvwrite_r+0x33c>
   40a34:	b805883a 	mov	r2,r23
   40a38:	a02b883a 	mov	r21,r20
   40a3c:	1500012e 	bgeu	r2,r20,40a44 <__sfvwrite_r+0x268>
   40a40:	102b883a 	mov	r21,r2
   40a44:	81000017 	ldw	r4,0(r16)
   40a48:	80800417 	ldw	r2,16(r16)
   40a4c:	84c00217 	ldw	r19,8(r16)
   40a50:	81c00517 	ldw	r7,20(r16)
   40a54:	1100022e 	bgeu	r2,r4,40a60 <__sfvwrite_r+0x284>
   40a58:	99e7883a 	add	r19,r19,r7
   40a5c:	9d403616 	blt	r19,r21,40b38 <__sfvwrite_r+0x35c>
   40a60:	a9c06916 	blt	r21,r7,40c08 <__sfvwrite_r+0x42c>
   40a64:	80800917 	ldw	r2,36(r16)
   40a68:	81400717 	ldw	r5,28(r16)
   40a6c:	b00d883a 	mov	r6,r22
   40a70:	9009883a 	mov	r4,r18
   40a74:	103ee83a 	callr	r2
   40a78:	1027883a 	mov	r19,r2
   40a7c:	00801a0e 	bge	zero,r2,40ae8 <__sfvwrite_r+0x30c>
   40a80:	bcefc83a 	sub	r23,r23,r19
   40a84:	b8001426 	beq	r23,zero,40ad8 <__sfvwrite_r+0x2fc>
   40a88:	00800044 	movi	r2,1
   40a8c:	e0c00217 	ldw	r3,8(fp)
   40a90:	b4ed883a 	add	r22,r22,r19
   40a94:	a4e9c83a 	sub	r20,r20,r19
   40a98:	1cc7c83a 	sub	r3,r3,r19
   40a9c:	e0c00215 	stw	r3,8(fp)
   40aa0:	183fe21e 	bne	r3,zero,40a2c <__sfvwrite_r+0x250>
   40aa4:	0005883a 	mov	r2,zero
   40aa8:	dfc00b17 	ldw	ra,44(sp)
   40aac:	df000a17 	ldw	fp,40(sp)
   40ab0:	ddc00917 	ldw	r23,36(sp)
   40ab4:	dd800817 	ldw	r22,32(sp)
   40ab8:	dd400717 	ldw	r21,28(sp)
   40abc:	dd000617 	ldw	r20,24(sp)
   40ac0:	dcc00517 	ldw	r19,20(sp)
   40ac4:	dc800417 	ldw	r18,16(sp)
   40ac8:	dc400317 	ldw	r17,12(sp)
   40acc:	dc000217 	ldw	r16,8(sp)
   40ad0:	dec00c04 	addi	sp,sp,48
   40ad4:	f800283a 	ret
   40ad8:	800b883a 	mov	r5,r16
   40adc:	9009883a 	mov	r4,r18
   40ae0:	00426000 	call	42600 <_fflush_r>
   40ae4:	103fe926 	beq	r2,zero,40a8c <__sfvwrite_r+0x2b0>
   40ae8:	8080030b 	ldhu	r2,12(r16)
   40aec:	10801014 	ori	r2,r2,64
   40af0:	8080030d 	sth	r2,12(r16)
   40af4:	00bfffc4 	movi	r2,-1
   40af8:	003feb06 	br	40aa8 <__sfvwrite_r+0x2cc>
   40afc:	0005883a 	mov	r2,zero
   40b00:	f800283a 	ret
   40b04:	8d000117 	ldw	r20,4(r17)
   40b08:	8805883a 	mov	r2,r17
   40b0c:	8c400204 	addi	r17,r17,8
   40b10:	a03ffc26 	beq	r20,zero,40b04 <__sfvwrite_r+0x328>
   40b14:	15800017 	ldw	r22,0(r2)
   40b18:	a00d883a 	mov	r6,r20
   40b1c:	01400284 	movi	r5,10
   40b20:	b009883a 	mov	r4,r22
   40b24:	00415bc0 	call	415bc <memchr>
   40b28:	10004426 	beq	r2,zero,40c3c <__sfvwrite_r+0x460>
   40b2c:	10800044 	addi	r2,r2,1
   40b30:	15afc83a 	sub	r23,r2,r22
   40b34:	003fbf06 	br	40a34 <__sfvwrite_r+0x258>
   40b38:	b00b883a 	mov	r5,r22
   40b3c:	980d883a 	mov	r6,r19
   40b40:	00417880 	call	41788 <memmove>
   40b44:	80800017 	ldw	r2,0(r16)
   40b48:	800b883a 	mov	r5,r16
   40b4c:	9009883a 	mov	r4,r18
   40b50:	14c5883a 	add	r2,r2,r19
   40b54:	80800015 	stw	r2,0(r16)
   40b58:	00426000 	call	42600 <_fflush_r>
   40b5c:	103fc826 	beq	r2,zero,40a80 <__sfvwrite_r+0x2a4>
   40b60:	003fe106 	br	40ae8 <__sfvwrite_r+0x30c>
   40b64:	80800417 	ldw	r2,16(r16)
   40b68:	12001136 	bltu	r2,r8,40bb0 <__sfvwrite_r+0x3d4>
   40b6c:	85c00517 	ldw	r23,20(r16)
   40b70:	b5c00f36 	bltu	r22,r23,40bb0 <__sfvwrite_r+0x3d4>
   40b74:	d8800017 	ldw	r2,0(sp)
   40b78:	15802e2e 	bgeu	r2,r22,40c34 <__sfvwrite_r+0x458>
   40b7c:	d9000117 	ldw	r4,4(sp)
   40b80:	b80b883a 	mov	r5,r23
   40b84:	0042ebc0 	call	42ebc <__divsi3>
   40b88:	15cf383a 	mul	r7,r2,r23
   40b8c:	80c00917 	ldw	r3,36(r16)
   40b90:	81400717 	ldw	r5,28(r16)
   40b94:	a80d883a 	mov	r6,r21
   40b98:	9009883a 	mov	r4,r18
   40b9c:	183ee83a 	callr	r3
   40ba0:	102f883a 	mov	r23,r2
   40ba4:	00bfd00e 	bge	zero,r2,40ae8 <__sfvwrite_r+0x30c>
   40ba8:	b5edc83a 	sub	r22,r22,r23
   40bac:	003f8c06 	br	409e0 <__sfvwrite_r+0x204>
   40bb0:	182f883a 	mov	r23,r3
   40bb4:	b0c0012e 	bgeu	r22,r3,40bbc <__sfvwrite_r+0x3e0>
   40bb8:	b02f883a 	mov	r23,r22
   40bbc:	4009883a 	mov	r4,r8
   40bc0:	b80d883a 	mov	r6,r23
   40bc4:	a80b883a 	mov	r5,r21
   40bc8:	00417880 	call	41788 <memmove>
   40bcc:	80c00217 	ldw	r3,8(r16)
   40bd0:	82000017 	ldw	r8,0(r16)
   40bd4:	1dc7c83a 	sub	r3,r3,r23
   40bd8:	45d1883a 	add	r8,r8,r23
   40bdc:	80c00215 	stw	r3,8(r16)
   40be0:	82000015 	stw	r8,0(r16)
   40be4:	183ff01e 	bne	r3,zero,40ba8 <__sfvwrite_r+0x3cc>
   40be8:	800b883a 	mov	r5,r16
   40bec:	9009883a 	mov	r4,r18
   40bf0:	00426000 	call	42600 <_fflush_r>
   40bf4:	103fec26 	beq	r2,zero,40ba8 <__sfvwrite_r+0x3cc>
   40bf8:	003fbb06 	br	40ae8 <__sfvwrite_r+0x30c>
   40bfc:	b027883a 	mov	r19,r22
   40c00:	b029883a 	mov	r20,r22
   40c04:	003f6b06 	br	409b4 <__sfvwrite_r+0x1d8>
   40c08:	a80d883a 	mov	r6,r21
   40c0c:	b00b883a 	mov	r5,r22
   40c10:	00417880 	call	41788 <memmove>
   40c14:	80c00217 	ldw	r3,8(r16)
   40c18:	80800017 	ldw	r2,0(r16)
   40c1c:	a827883a 	mov	r19,r21
   40c20:	1d47c83a 	sub	r3,r3,r21
   40c24:	1545883a 	add	r2,r2,r21
   40c28:	80c00215 	stw	r3,8(r16)
   40c2c:	80800015 	stw	r2,0(r16)
   40c30:	003f9306 	br	40a80 <__sfvwrite_r+0x2a4>
   40c34:	b009883a 	mov	r4,r22
   40c38:	003fd106 	br	40b80 <__sfvwrite_r+0x3a4>
   40c3c:	a0800044 	addi	r2,r20,1
   40c40:	102f883a 	mov	r23,r2
   40c44:	003f7c06 	br	40a38 <__sfvwrite_r+0x25c>
   40c48:	280d883a 	mov	r6,r5
   40c4c:	200b883a 	mov	r5,r4
   40c50:	9009883a 	mov	r4,r18
   40c54:	00419a80 	call	419a8 <_realloc_r>
   40c58:	1007883a 	mov	r3,r2
   40c5c:	103f4d1e 	bne	r2,zero,40994 <__sfvwrite_r+0x1b8>
   40c60:	81400417 	ldw	r5,16(r16)
   40c64:	9009883a 	mov	r4,r18
   40c68:	00428000 	call	42800 <_free_r>
   40c6c:	8080030b 	ldhu	r2,12(r16)
   40c70:	00c00304 	movi	r3,12
   40c74:	90c00015 	stw	r3,0(r18)
   40c78:	10bfdfcc 	andi	r2,r2,65407
   40c7c:	003f9b06 	br	40aec <__sfvwrite_r+0x310>
   40c80:	00c00304 	movi	r3,12
   40c84:	8080030b 	ldhu	r2,12(r16)
   40c88:	90c00015 	stw	r3,0(r18)
   40c8c:	003f9706 	br	40aec <__sfvwrite_r+0x310>
   40c90:	00bfffc4 	movi	r2,-1
   40c94:	003f8406 	br	40aa8 <__sfvwrite_r+0x2cc>

00040c98 <_fwalk>:
   40c98:	defffa04 	addi	sp,sp,-24
   40c9c:	dd000415 	stw	r20,16(sp)
   40ca0:	dcc00315 	stw	r19,12(sp)
   40ca4:	dc800215 	stw	r18,8(sp)
   40ca8:	dfc00515 	stw	ra,20(sp)
   40cac:	dc400115 	stw	r17,4(sp)
   40cb0:	dc000015 	stw	r16,0(sp)
   40cb4:	2827883a 	mov	r19,r5
   40cb8:	2480b804 	addi	r18,r4,736
   40cbc:	0029883a 	mov	r20,zero
   40cc0:	94400117 	ldw	r17,4(r18)
   40cc4:	94000217 	ldw	r16,8(r18)
   40cc8:	8c7fffc4 	addi	r17,r17,-1
   40ccc:	88000d16 	blt	r17,zero,40d04 <_fwalk+0x6c>
   40cd0:	8080030b 	ldhu	r2,12(r16)
   40cd4:	8c7fffc4 	addi	r17,r17,-1
   40cd8:	108000b0 	cmpltui	r2,r2,2
   40cdc:	1000061e 	bne	r2,zero,40cf8 <_fwalk+0x60>
   40ce0:	8080038f 	ldh	r2,14(r16)
   40ce4:	8009883a 	mov	r4,r16
   40ce8:	10bfffe0 	cmpeqi	r2,r2,-1
   40cec:	1000021e 	bne	r2,zero,40cf8 <_fwalk+0x60>
   40cf0:	983ee83a 	callr	r19
   40cf4:	a0a8b03a 	or	r20,r20,r2
   40cf8:	88bfffd8 	cmpnei	r2,r17,-1
   40cfc:	84001a04 	addi	r16,r16,104
   40d00:	103ff31e 	bne	r2,zero,40cd0 <_fwalk+0x38>
   40d04:	94800017 	ldw	r18,0(r18)
   40d08:	903fed1e 	bne	r18,zero,40cc0 <_fwalk+0x28>
   40d0c:	a005883a 	mov	r2,r20
   40d10:	dfc00517 	ldw	ra,20(sp)
   40d14:	dd000417 	ldw	r20,16(sp)
   40d18:	dcc00317 	ldw	r19,12(sp)
   40d1c:	dc800217 	ldw	r18,8(sp)
   40d20:	dc400117 	ldw	r17,4(sp)
   40d24:	dc000017 	ldw	r16,0(sp)
   40d28:	dec00604 	addi	sp,sp,24
   40d2c:	f800283a 	ret

00040d30 <_fwalk_reent>:
   40d30:	defff904 	addi	sp,sp,-28
   40d34:	dd400515 	stw	r21,20(sp)
   40d38:	dd000415 	stw	r20,16(sp)
   40d3c:	dcc00315 	stw	r19,12(sp)
   40d40:	dc800215 	stw	r18,8(sp)
   40d44:	dfc00615 	stw	ra,24(sp)
   40d48:	dc400115 	stw	r17,4(sp)
   40d4c:	dc000015 	stw	r16,0(sp)
   40d50:	202b883a 	mov	r21,r4
   40d54:	2827883a 	mov	r19,r5
   40d58:	2480b804 	addi	r18,r4,736
   40d5c:	0029883a 	mov	r20,zero
   40d60:	94400117 	ldw	r17,4(r18)
   40d64:	94000217 	ldw	r16,8(r18)
   40d68:	8c7fffc4 	addi	r17,r17,-1
   40d6c:	88000e16 	blt	r17,zero,40da8 <_fwalk_reent+0x78>
   40d70:	8080030b 	ldhu	r2,12(r16)
   40d74:	8c7fffc4 	addi	r17,r17,-1
   40d78:	108000b0 	cmpltui	r2,r2,2
   40d7c:	1000071e 	bne	r2,zero,40d9c <_fwalk_reent+0x6c>
   40d80:	8080038f 	ldh	r2,14(r16)
   40d84:	800b883a 	mov	r5,r16
   40d88:	a809883a 	mov	r4,r21
   40d8c:	10bfffe0 	cmpeqi	r2,r2,-1
   40d90:	1000021e 	bne	r2,zero,40d9c <_fwalk_reent+0x6c>
   40d94:	983ee83a 	callr	r19
   40d98:	a0a8b03a 	or	r20,r20,r2
   40d9c:	88bfffd8 	cmpnei	r2,r17,-1
   40da0:	84001a04 	addi	r16,r16,104
   40da4:	103ff21e 	bne	r2,zero,40d70 <_fwalk_reent+0x40>
   40da8:	94800017 	ldw	r18,0(r18)
   40dac:	903fec1e 	bne	r18,zero,40d60 <_fwalk_reent+0x30>
   40db0:	a005883a 	mov	r2,r20
   40db4:	dfc00617 	ldw	ra,24(sp)
   40db8:	dd400517 	ldw	r21,20(sp)
   40dbc:	dd000417 	ldw	r20,16(sp)
   40dc0:	dcc00317 	ldw	r19,12(sp)
   40dc4:	dc800217 	ldw	r18,8(sp)
   40dc8:	dc400117 	ldw	r17,4(sp)
   40dcc:	dc000017 	ldw	r16,0(sp)
   40dd0:	dec00704 	addi	sp,sp,28
   40dd4:	f800283a 	ret

00040dd8 <_malloc_r>:
   40dd8:	defff604 	addi	sp,sp,-40
   40ddc:	dc400115 	stw	r17,4(sp)
   40de0:	2c4002c4 	addi	r17,r5,11
   40de4:	dc800215 	stw	r18,8(sp)
   40de8:	dfc00915 	stw	ra,36(sp)
   40dec:	df000815 	stw	fp,32(sp)
   40df0:	ddc00715 	stw	r23,28(sp)
   40df4:	dd800615 	stw	r22,24(sp)
   40df8:	dd400515 	stw	r21,20(sp)
   40dfc:	dd000415 	stw	r20,16(sp)
   40e00:	dcc00315 	stw	r19,12(sp)
   40e04:	dc000015 	stw	r16,0(sp)
   40e08:	888005e8 	cmpgeui	r2,r17,23
   40e0c:	2025883a 	mov	r18,r4
   40e10:	10001b1e 	bne	r2,zero,40e80 <_malloc_r+0xa8>
   40e14:	29400468 	cmpgeui	r5,r5,17
   40e18:	2800821e 	bne	r5,zero,41024 <_malloc_r+0x24c>
   40e1c:	00435ec0 	call	435ec <__malloc_lock>
   40e20:	04400404 	movi	r17,16
   40e24:	00800604 	movi	r2,24
   40e28:	01c00084 	movi	r7,2
   40e2c:	04c00134 	movhi	r19,4
   40e30:	9cd6ad04 	addi	r19,r19,23220
   40e34:	9885883a 	add	r2,r19,r2
   40e38:	14000117 	ldw	r16,4(r2)
   40e3c:	10fffe04 	addi	r3,r2,-8
   40e40:	80c08b26 	beq	r16,r3,41070 <_malloc_r+0x298>
   40e44:	80800117 	ldw	r2,4(r16)
   40e48:	81000317 	ldw	r4,12(r16)
   40e4c:	00ffff04 	movi	r3,-4
   40e50:	10c4703a 	and	r2,r2,r3
   40e54:	81400217 	ldw	r5,8(r16)
   40e58:	8085883a 	add	r2,r16,r2
   40e5c:	10c00117 	ldw	r3,4(r2)
   40e60:	29000315 	stw	r4,12(r5)
   40e64:	21400215 	stw	r5,8(r4)
   40e68:	18c00054 	ori	r3,r3,1
   40e6c:	10c00115 	stw	r3,4(r2)
   40e70:	9009883a 	mov	r4,r18
   40e74:	00436100 	call	43610 <__malloc_unlock>
   40e78:	80800204 	addi	r2,r16,8
   40e7c:	00006c06 	br	41030 <_malloc_r+0x258>
   40e80:	00bffe04 	movi	r2,-8
   40e84:	88a2703a 	and	r17,r17,r2
   40e88:	88006616 	blt	r17,zero,41024 <_malloc_r+0x24c>
   40e8c:	89406536 	bltu	r17,r5,41024 <_malloc_r+0x24c>
   40e90:	00435ec0 	call	435ec <__malloc_lock>
   40e94:	88807e28 	cmpgeui	r2,r17,504
   40e98:	10012326 	beq	r2,zero,41328 <_malloc_r+0x550>
   40e9c:	8804d27a 	srli	r2,r17,9
   40ea0:	10006f26 	beq	r2,zero,41060 <_malloc_r+0x288>
   40ea4:	10c00168 	cmpgeui	r3,r2,5
   40ea8:	1800ff1e 	bne	r3,zero,412a8 <_malloc_r+0x4d0>
   40eac:	8804d1ba 	srli	r2,r17,6
   40eb0:	11c00e44 	addi	r7,r2,57
   40eb4:	380890fa 	slli	r4,r7,3
   40eb8:	12000e04 	addi	r8,r2,56
   40ebc:	04c00134 	movhi	r19,4
   40ec0:	9cd6ad04 	addi	r19,r19,23220
   40ec4:	9909883a 	add	r4,r19,r4
   40ec8:	24000117 	ldw	r16,4(r4)
   40ecc:	213ffe04 	addi	r4,r4,-8
   40ed0:	24000b26 	beq	r4,r16,40f00 <_malloc_r+0x128>
   40ed4:	01bfff04 	movi	r6,-4
   40ed8:	00000306 	br	40ee8 <_malloc_r+0x110>
   40edc:	1800d70e 	bge	r3,zero,4123c <_malloc_r+0x464>
   40ee0:	84000317 	ldw	r16,12(r16)
   40ee4:	24000626 	beq	r4,r16,40f00 <_malloc_r+0x128>
   40ee8:	80800117 	ldw	r2,4(r16)
   40eec:	1184703a 	and	r2,r2,r6
   40ef0:	1447c83a 	sub	r3,r2,r17
   40ef4:	19400408 	cmpgei	r5,r3,16
   40ef8:	283ff826 	beq	r5,zero,40edc <_malloc_r+0x104>
   40efc:	400f883a 	mov	r7,r8
   40f00:	9c000417 	ldw	r16,16(r19)
   40f04:	02400134 	movhi	r9,4
   40f08:	4a56af04 	addi	r9,r9,23228
   40f0c:	82405f26 	beq	r16,r9,4108c <_malloc_r+0x2b4>
   40f10:	80800117 	ldw	r2,4(r16)
   40f14:	00ffff04 	movi	r3,-4
   40f18:	10c4703a 	and	r2,r2,r3
   40f1c:	1447c83a 	sub	r3,r2,r17
   40f20:	19000410 	cmplti	r4,r3,16
   40f24:	20010b26 	beq	r4,zero,41354 <_malloc_r+0x57c>
   40f28:	9a400515 	stw	r9,20(r19)
   40f2c:	9a400415 	stw	r9,16(r19)
   40f30:	1801000e 	bge	r3,zero,41334 <_malloc_r+0x55c>
   40f34:	10c08028 	cmpgeui	r3,r2,512
   40f38:	1800c21e 	bne	r3,zero,41244 <_malloc_r+0x46c>
   40f3c:	1006d0fa 	srli	r3,r2,3
   40f40:	1008d17a 	srli	r4,r2,5
   40f44:	00800044 	movi	r2,1
   40f48:	18c00044 	addi	r3,r3,1
   40f4c:	180690fa 	slli	r3,r3,3
   40f50:	99400117 	ldw	r5,4(r19)
   40f54:	1104983a 	sll	r2,r2,r4
   40f58:	98c7883a 	add	r3,r19,r3
   40f5c:	19000017 	ldw	r4,0(r3)
   40f60:	1144b03a 	or	r2,r2,r5
   40f64:	197ffe04 	addi	r5,r3,-8
   40f68:	81400315 	stw	r5,12(r16)
   40f6c:	81000215 	stw	r4,8(r16)
   40f70:	98800115 	stw	r2,4(r19)
   40f74:	1c000015 	stw	r16,0(r3)
   40f78:	24000315 	stw	r16,12(r4)
   40f7c:	3807d0ba 	srai	r3,r7,2
   40f80:	01000044 	movi	r4,1
   40f84:	20c8983a 	sll	r4,r4,r3
   40f88:	11004536 	bltu	r2,r4,410a0 <_malloc_r+0x2c8>
   40f8c:	2086703a 	and	r3,r4,r2
   40f90:	18000a1e 	bne	r3,zero,40fbc <_malloc_r+0x1e4>
   40f94:	2109883a 	add	r4,r4,r4
   40f98:	00ffff04 	movi	r3,-4
   40f9c:	38c6703a 	and	r3,r7,r3
   40fa0:	208a703a 	and	r5,r4,r2
   40fa4:	19c00104 	addi	r7,r3,4
   40fa8:	2800041e 	bne	r5,zero,40fbc <_malloc_r+0x1e4>
   40fac:	2109883a 	add	r4,r4,r4
   40fb0:	2086703a 	and	r3,r4,r2
   40fb4:	39c00104 	addi	r7,r7,4
   40fb8:	183ffc26 	beq	r3,zero,40fac <_malloc_r+0x1d4>
   40fbc:	02bfff04 	movi	r10,-4
   40fc0:	381690fa 	slli	r11,r7,3
   40fc4:	3819883a 	mov	r12,r7
   40fc8:	9ad7883a 	add	r11,r19,r11
   40fcc:	5811883a 	mov	r8,r11
   40fd0:	40800317 	ldw	r2,12(r8)
   40fd4:	4080bd26 	beq	r8,r2,412cc <_malloc_r+0x4f4>
   40fd8:	10c00117 	ldw	r3,4(r2)
   40fdc:	1021883a 	mov	r16,r2
   40fe0:	10800317 	ldw	r2,12(r2)
   40fe4:	1a86703a 	and	r3,r3,r10
   40fe8:	1c4bc83a 	sub	r5,r3,r17
   40fec:	29800410 	cmplti	r6,r5,16
   40ff0:	3000bb26 	beq	r6,zero,412e0 <_malloc_r+0x508>
   40ff4:	283ff716 	blt	r5,zero,40fd4 <_malloc_r+0x1fc>
   40ff8:	80c7883a 	add	r3,r16,r3
   40ffc:	19400117 	ldw	r5,4(r3)
   41000:	81800217 	ldw	r6,8(r16)
   41004:	9009883a 	mov	r4,r18
   41008:	29400054 	ori	r5,r5,1
   4100c:	19400115 	stw	r5,4(r3)
   41010:	30800315 	stw	r2,12(r6)
   41014:	11800215 	stw	r6,8(r2)
   41018:	00436100 	call	43610 <__malloc_unlock>
   4101c:	80800204 	addi	r2,r16,8
   41020:	00000306 	br	41030 <_malloc_r+0x258>
   41024:	00800304 	movi	r2,12
   41028:	90800015 	stw	r2,0(r18)
   4102c:	0005883a 	mov	r2,zero
   41030:	dfc00917 	ldw	ra,36(sp)
   41034:	df000817 	ldw	fp,32(sp)
   41038:	ddc00717 	ldw	r23,28(sp)
   4103c:	dd800617 	ldw	r22,24(sp)
   41040:	dd400517 	ldw	r21,20(sp)
   41044:	dd000417 	ldw	r20,16(sp)
   41048:	dcc00317 	ldw	r19,12(sp)
   4104c:	dc800217 	ldw	r18,8(sp)
   41050:	dc400117 	ldw	r17,4(sp)
   41054:	dc000017 	ldw	r16,0(sp)
   41058:	dec00a04 	addi	sp,sp,40
   4105c:	f800283a 	ret
   41060:	01008004 	movi	r4,512
   41064:	01c01004 	movi	r7,64
   41068:	02000fc4 	movi	r8,63
   4106c:	003f9306 	br	40ebc <_malloc_r+0xe4>
   41070:	14000317 	ldw	r16,12(r2)
   41074:	39c00084 	addi	r7,r7,2
   41078:	143f721e 	bne	r2,r16,40e44 <_malloc_r+0x6c>
   4107c:	9c000417 	ldw	r16,16(r19)
   41080:	02400134 	movhi	r9,4
   41084:	4a56af04 	addi	r9,r9,23228
   41088:	827fa11e 	bne	r16,r9,40f10 <_malloc_r+0x138>
   4108c:	3807d0ba 	srai	r3,r7,2
   41090:	01000044 	movi	r4,1
   41094:	98800117 	ldw	r2,4(r19)
   41098:	20c8983a 	sll	r4,r4,r3
   4109c:	113fbb2e 	bgeu	r2,r4,40f8c <_malloc_r+0x1b4>
   410a0:	9c000217 	ldw	r16,8(r19)
   410a4:	00bfff04 	movi	r2,-4
   410a8:	85800117 	ldw	r22,4(r16)
   410ac:	b0ac703a 	and	r22,r22,r2
   410b0:	b4400336 	bltu	r22,r17,410c0 <_malloc_r+0x2e8>
   410b4:	b445c83a 	sub	r2,r22,r17
   410b8:	10c00408 	cmpgei	r3,r2,16
   410bc:	1800551e 	bne	r3,zero,41214 <_malloc_r+0x43c>
   410c0:	00800134 	movhi	r2,4
   410c4:	109c3317 	ldw	r2,28876(r2)
   410c8:	00c00174 	movhi	r3,5
   410cc:	1d62dc17 	ldw	r21,-29840(r3)
   410d0:	10bfffd8 	cmpnei	r2,r2,-1
   410d4:	85b9883a 	add	fp,r16,r22
   410d8:	8d6b883a 	add	r21,r17,r21
   410dc:	1000d726 	beq	r2,zero,4143c <_malloc_r+0x664>
   410e0:	ad4403c4 	addi	r21,r21,4111
   410e4:	00bc0004 	movi	r2,-4096
   410e8:	a8aa703a 	and	r21,r21,r2
   410ec:	a80b883a 	mov	r5,r21
   410f0:	9009883a 	mov	r4,r18
   410f4:	0041f180 	call	41f18 <_sbrk_r>
   410f8:	102f883a 	mov	r23,r2
   410fc:	10bfffd8 	cmpnei	r2,r2,-1
   41100:	1000a926 	beq	r2,zero,413a8 <_malloc_r+0x5d0>
   41104:	bf00a736 	bltu	r23,fp,413a4 <_malloc_r+0x5cc>
   41108:	00800174 	movhi	r2,5
   4110c:	1522e617 	ldw	r20,-29800(r2)
   41110:	ad29883a 	add	r20,r21,r20
   41114:	1522e615 	stw	r20,-29800(r2)
   41118:	a007883a 	mov	r3,r20
   4111c:	e5c0ed26 	beq	fp,r23,414d4 <_malloc_r+0x6fc>
   41120:	00800134 	movhi	r2,4
   41124:	109c3317 	ldw	r2,28876(r2)
   41128:	10bfffd8 	cmpnei	r2,r2,-1
   4112c:	1000f026 	beq	r2,zero,414f0 <_malloc_r+0x718>
   41130:	bf05c83a 	sub	r2,r23,fp
   41134:	10c5883a 	add	r2,r2,r3
   41138:	00c00174 	movhi	r3,5
   4113c:	18a2e615 	stw	r2,-29800(r3)
   41140:	bf0001cc 	andi	fp,r23,7
   41144:	e000c626 	beq	fp,zero,41460 <_malloc_r+0x688>
   41148:	bf2fc83a 	sub	r23,r23,fp
   4114c:	bdc00204 	addi	r23,r23,8
   41150:	05040204 	movi	r20,4104
   41154:	a729c83a 	sub	r20,r20,fp
   41158:	bd6b883a 	add	r21,r23,r21
   4115c:	a569c83a 	sub	r20,r20,r21
   41160:	a503ffcc 	andi	r20,r20,4095
   41164:	a00b883a 	mov	r5,r20
   41168:	9009883a 	mov	r4,r18
   4116c:	0041f180 	call	41f18 <_sbrk_r>
   41170:	10ffffe0 	cmpeqi	r3,r2,-1
   41174:	1800f41e 	bne	r3,zero,41548 <_malloc_r+0x770>
   41178:	15c5c83a 	sub	r2,r2,r23
   4117c:	152b883a 	add	r21,r2,r20
   41180:	00800174 	movhi	r2,5
   41184:	10a2e617 	ldw	r2,-29800(r2)
   41188:	9dc00215 	stw	r23,8(r19)
   4118c:	ad400054 	ori	r21,r21,1
   41190:	a0a9883a 	add	r20,r20,r2
   41194:	00800174 	movhi	r2,5
   41198:	1522e615 	stw	r20,-29800(r2)
   4119c:	bd400115 	stw	r21,4(r23)
   411a0:	84c0d626 	beq	r16,r19,414fc <_malloc_r+0x724>
   411a4:	b0800428 	cmpgeui	r2,r22,16
   411a8:	1000d626 	beq	r2,zero,41504 <_malloc_r+0x72c>
   411ac:	80c00117 	ldw	r3,4(r16)
   411b0:	013ffe04 	movi	r4,-8
   411b4:	b0bffd04 	addi	r2,r22,-12
   411b8:	1104703a 	and	r2,r2,r4
   411bc:	18c0004c 	andi	r3,r3,1
   411c0:	1886b03a 	or	r3,r3,r2
   411c4:	80c00115 	stw	r3,4(r16)
   411c8:	01000144 	movi	r4,5
   411cc:	8087883a 	add	r3,r16,r2
   411d0:	19000115 	stw	r4,4(r3)
   411d4:	19000215 	stw	r4,8(r3)
   411d8:	10800428 	cmpgeui	r2,r2,16
   411dc:	1000df1e 	bne	r2,zero,4155c <_malloc_r+0x784>
   411e0:	bd400117 	ldw	r21,4(r23)
   411e4:	b821883a 	mov	r16,r23
   411e8:	00800174 	movhi	r2,5
   411ec:	10a2db17 	ldw	r2,-29844(r2)
   411f0:	1500022e 	bgeu	r2,r20,411fc <_malloc_r+0x424>
   411f4:	00800174 	movhi	r2,5
   411f8:	1522db15 	stw	r20,-29844(r2)
   411fc:	00800174 	movhi	r2,5
   41200:	10a2da17 	ldw	r2,-29848(r2)
   41204:	15006a2e 	bgeu	r2,r20,413b0 <_malloc_r+0x5d8>
   41208:	00800174 	movhi	r2,5
   4120c:	1522da15 	stw	r20,-29848(r2)
   41210:	00006706 	br	413b0 <_malloc_r+0x5d8>
   41214:	88c00054 	ori	r3,r17,1
   41218:	80c00115 	stw	r3,4(r16)
   4121c:	8463883a 	add	r17,r16,r17
   41220:	10800054 	ori	r2,r2,1
   41224:	9c400215 	stw	r17,8(r19)
   41228:	88800115 	stw	r2,4(r17)
   4122c:	9009883a 	mov	r4,r18
   41230:	00436100 	call	43610 <__malloc_unlock>
   41234:	80800204 	addi	r2,r16,8
   41238:	003f7d06 	br	41030 <_malloc_r+0x258>
   4123c:	81000317 	ldw	r4,12(r16)
   41240:	003f0406 	br	40e54 <_malloc_r+0x7c>
   41244:	1006d27a 	srli	r3,r2,9
   41248:	19000168 	cmpgeui	r4,r3,5
   4124c:	20005026 	beq	r4,zero,41390 <_malloc_r+0x5b8>
   41250:	19000568 	cmpgeui	r4,r3,21
   41254:	20008c1e 	bne	r4,zero,41488 <_malloc_r+0x6b0>
   41258:	19401704 	addi	r5,r3,92
   4125c:	280a90fa 	slli	r5,r5,3
   41260:	190016c4 	addi	r4,r3,91
   41264:	994b883a 	add	r5,r19,r5
   41268:	28c00017 	ldw	r3,0(r5)
   4126c:	297ffe04 	addi	r5,r5,-8
   41270:	28c07426 	beq	r5,r3,41444 <_malloc_r+0x66c>
   41274:	01bfff04 	movi	r6,-4
   41278:	19000117 	ldw	r4,4(r3)
   4127c:	2188703a 	and	r4,r4,r6
   41280:	1100022e 	bgeu	r2,r4,4128c <_malloc_r+0x4b4>
   41284:	18c00217 	ldw	r3,8(r3)
   41288:	28fffb1e 	bne	r5,r3,41278 <_malloc_r+0x4a0>
   4128c:	19400317 	ldw	r5,12(r3)
   41290:	98800117 	ldw	r2,4(r19)
   41294:	81400315 	stw	r5,12(r16)
   41298:	80c00215 	stw	r3,8(r16)
   4129c:	2c000215 	stw	r16,8(r5)
   412a0:	1c000315 	stw	r16,12(r3)
   412a4:	003f3506 	br	40f7c <_malloc_r+0x1a4>
   412a8:	10c00568 	cmpgeui	r3,r2,21
   412ac:	18004a26 	beq	r3,zero,413d8 <_malloc_r+0x600>
   412b0:	10c01568 	cmpgeui	r3,r2,85
   412b4:	18007b1e 	bne	r3,zero,414a4 <_malloc_r+0x6cc>
   412b8:	8804d33a 	srli	r2,r17,12
   412bc:	11c01bc4 	addi	r7,r2,111
   412c0:	380890fa 	slli	r4,r7,3
   412c4:	12001b84 	addi	r8,r2,110
   412c8:	003efc06 	br	40ebc <_malloc_r+0xe4>
   412cc:	63000044 	addi	r12,r12,1
   412d0:	608000cc 	andi	r2,r12,3
   412d4:	42000204 	addi	r8,r8,8
   412d8:	103f3d1e 	bne	r2,zero,40fd0 <_malloc_r+0x1f8>
   412dc:	00004506 	br	413f4 <_malloc_r+0x61c>
   412e0:	81000217 	ldw	r4,8(r16)
   412e4:	89800054 	ori	r6,r17,1
   412e8:	81800115 	stw	r6,4(r16)
   412ec:	20800315 	stw	r2,12(r4)
   412f0:	11000215 	stw	r4,8(r2)
   412f4:	8463883a 	add	r17,r16,r17
   412f8:	9c400515 	stw	r17,20(r19)
   412fc:	9c400415 	stw	r17,16(r19)
   41300:	28800054 	ori	r2,r5,1
   41304:	88800115 	stw	r2,4(r17)
   41308:	8a400315 	stw	r9,12(r17)
   4130c:	8a400215 	stw	r9,8(r17)
   41310:	80c7883a 	add	r3,r16,r3
   41314:	19400015 	stw	r5,0(r3)
   41318:	9009883a 	mov	r4,r18
   4131c:	00436100 	call	43610 <__malloc_unlock>
   41320:	80800204 	addi	r2,r16,8
   41324:	003f4206 	br	41030 <_malloc_r+0x258>
   41328:	880ed0fa 	srli	r7,r17,3
   4132c:	88800204 	addi	r2,r17,8
   41330:	003ebe06 	br	40e2c <_malloc_r+0x54>
   41334:	8085883a 	add	r2,r16,r2
   41338:	10c00117 	ldw	r3,4(r2)
   4133c:	9009883a 	mov	r4,r18
   41340:	18c00054 	ori	r3,r3,1
   41344:	10c00115 	stw	r3,4(r2)
   41348:	00436100 	call	43610 <__malloc_unlock>
   4134c:	80800204 	addi	r2,r16,8
   41350:	003f3706 	br	41030 <_malloc_r+0x258>
   41354:	89000054 	ori	r4,r17,1
   41358:	81000115 	stw	r4,4(r16)
   4135c:	8463883a 	add	r17,r16,r17
   41360:	9c400515 	stw	r17,20(r19)
   41364:	9c400415 	stw	r17,16(r19)
   41368:	19000054 	ori	r4,r3,1
   4136c:	89000115 	stw	r4,4(r17)
   41370:	8085883a 	add	r2,r16,r2
   41374:	8a400315 	stw	r9,12(r17)
   41378:	8a400215 	stw	r9,8(r17)
   4137c:	10c00015 	stw	r3,0(r2)
   41380:	9009883a 	mov	r4,r18
   41384:	00436100 	call	43610 <__malloc_unlock>
   41388:	80800204 	addi	r2,r16,8
   4138c:	003f2806 	br	41030 <_malloc_r+0x258>
   41390:	1006d1ba 	srli	r3,r2,6
   41394:	19400e44 	addi	r5,r3,57
   41398:	280a90fa 	slli	r5,r5,3
   4139c:	19000e04 	addi	r4,r3,56
   413a0:	003fb006 	br	41264 <_malloc_r+0x48c>
   413a4:	84c04626 	beq	r16,r19,414c0 <_malloc_r+0x6e8>
   413a8:	9c000217 	ldw	r16,8(r19)
   413ac:	85400117 	ldw	r21,4(r16)
   413b0:	00bfff04 	movi	r2,-4
   413b4:	a8aa703a 	and	r21,r21,r2
   413b8:	ac45c83a 	sub	r2,r21,r17
   413bc:	ac400236 	bltu	r21,r17,413c8 <_malloc_r+0x5f0>
   413c0:	10c00408 	cmpgei	r3,r2,16
   413c4:	183f931e 	bne	r3,zero,41214 <_malloc_r+0x43c>
   413c8:	9009883a 	mov	r4,r18
   413cc:	00436100 	call	43610 <__malloc_unlock>
   413d0:	0005883a 	mov	r2,zero
   413d4:	003f1606 	br	41030 <_malloc_r+0x258>
   413d8:	11c01704 	addi	r7,r2,92
   413dc:	380890fa 	slli	r4,r7,3
   413e0:	120016c4 	addi	r8,r2,91
   413e4:	003eb506 	br	40ebc <_malloc_r+0xe4>
   413e8:	58800217 	ldw	r2,8(r11)
   413ec:	39ffffc4 	addi	r7,r7,-1
   413f0:	12c0701e 	bne	r2,r11,415b4 <_malloc_r+0x7dc>
   413f4:	388000cc 	andi	r2,r7,3
   413f8:	5afffe04 	addi	r11,r11,-8
   413fc:	103ffa1e 	bne	r2,zero,413e8 <_malloc_r+0x610>
   41400:	98c00117 	ldw	r3,4(r19)
   41404:	0104303a 	nor	r2,zero,r4
   41408:	10c4703a 	and	r2,r2,r3
   4140c:	98800115 	stw	r2,4(r19)
   41410:	2109883a 	add	r4,r4,r4
   41414:	113f2236 	bltu	r2,r4,410a0 <_malloc_r+0x2c8>
   41418:	203f2126 	beq	r4,zero,410a0 <_malloc_r+0x2c8>
   4141c:	2086703a 	and	r3,r4,r2
   41420:	1800041e 	bne	r3,zero,41434 <_malloc_r+0x65c>
   41424:	2109883a 	add	r4,r4,r4
   41428:	2086703a 	and	r3,r4,r2
   4142c:	63000104 	addi	r12,r12,4
   41430:	183ffc26 	beq	r3,zero,41424 <_malloc_r+0x64c>
   41434:	600f883a 	mov	r7,r12
   41438:	003ee106 	br	40fc0 <_malloc_r+0x1e8>
   4143c:	ad400404 	addi	r21,r21,16
   41440:	003f2a06 	br	410ec <_malloc_r+0x314>
   41444:	2009d0ba 	srai	r4,r4,2
   41448:	00800044 	movi	r2,1
   4144c:	99800117 	ldw	r6,4(r19)
   41450:	1104983a 	sll	r2,r2,r4
   41454:	1184b03a 	or	r2,r2,r6
   41458:	98800115 	stw	r2,4(r19)
   4145c:	003f8d06 	br	41294 <_malloc_r+0x4bc>
   41460:	bd69883a 	add	r20,r23,r21
   41464:	0529c83a 	sub	r20,zero,r20
   41468:	a503ffcc 	andi	r20,r20,4095
   4146c:	a00b883a 	mov	r5,r20
   41470:	9009883a 	mov	r4,r18
   41474:	0041f180 	call	41f18 <_sbrk_r>
   41478:	10ffffe0 	cmpeqi	r3,r2,-1
   4147c:	183f3e26 	beq	r3,zero,41178 <_malloc_r+0x3a0>
   41480:	0029883a 	mov	r20,zero
   41484:	003f3e06 	br	41180 <_malloc_r+0x3a8>
   41488:	19001568 	cmpgeui	r4,r3,85
   4148c:	2000201e 	bne	r4,zero,41510 <_malloc_r+0x738>
   41490:	1006d33a 	srli	r3,r2,12
   41494:	19401bc4 	addi	r5,r3,111
   41498:	280a90fa 	slli	r5,r5,3
   4149c:	19001b84 	addi	r4,r3,110
   414a0:	003f7006 	br	41264 <_malloc_r+0x48c>
   414a4:	10c05568 	cmpgeui	r3,r2,341
   414a8:	1800201e 	bne	r3,zero,4152c <_malloc_r+0x754>
   414ac:	8804d3fa 	srli	r2,r17,15
   414b0:	11c01e04 	addi	r7,r2,120
   414b4:	380890fa 	slli	r4,r7,3
   414b8:	12001dc4 	addi	r8,r2,119
   414bc:	003e7f06 	br	40ebc <_malloc_r+0xe4>
   414c0:	00800174 	movhi	r2,5
   414c4:	10e2e617 	ldw	r3,-29800(r2)
   414c8:	a8c7883a 	add	r3,r21,r3
   414cc:	10e2e615 	stw	r3,-29800(r2)
   414d0:	003f1306 	br	41120 <_malloc_r+0x348>
   414d4:	e083ffcc 	andi	r2,fp,4095
   414d8:	103f111e 	bne	r2,zero,41120 <_malloc_r+0x348>
   414dc:	9c000217 	ldw	r16,8(r19)
   414e0:	b56b883a 	add	r21,r22,r21
   414e4:	ad400054 	ori	r21,r21,1
   414e8:	85400115 	stw	r21,4(r16)
   414ec:	003f3e06 	br	411e8 <_malloc_r+0x410>
   414f0:	00800134 	movhi	r2,4
   414f4:	15dc3315 	stw	r23,28876(r2)
   414f8:	003f1106 	br	41140 <_malloc_r+0x368>
   414fc:	b821883a 	mov	r16,r23
   41500:	003f3906 	br	411e8 <_malloc_r+0x410>
   41504:	00800044 	movi	r2,1
   41508:	b8800115 	stw	r2,4(r23)
   4150c:	003fae06 	br	413c8 <_malloc_r+0x5f0>
   41510:	19005568 	cmpgeui	r4,r3,341
   41514:	2000191e 	bne	r4,zero,4157c <_malloc_r+0x7a4>
   41518:	1006d3fa 	srli	r3,r2,15
   4151c:	19401e04 	addi	r5,r3,120
   41520:	280a90fa 	slli	r5,r5,3
   41524:	19001dc4 	addi	r4,r3,119
   41528:	003f4e06 	br	41264 <_malloc_r+0x48c>
   4152c:	10815568 	cmpgeui	r2,r2,1365
   41530:	1000191e 	bne	r2,zero,41598 <_malloc_r+0x7c0>
   41534:	8804d4ba 	srli	r2,r17,18
   41538:	11c01f44 	addi	r7,r2,125
   4153c:	380890fa 	slli	r4,r7,3
   41540:	12001f04 	addi	r8,r2,124
   41544:	003e5d06 	br	40ebc <_malloc_r+0xe4>
   41548:	e73ffe04 	addi	fp,fp,-8
   4154c:	af2b883a 	add	r21,r21,fp
   41550:	adebc83a 	sub	r21,r21,r23
   41554:	0029883a 	mov	r20,zero
   41558:	003f0906 	br	41180 <_malloc_r+0x3a8>
   4155c:	81400204 	addi	r5,r16,8
   41560:	9009883a 	mov	r4,r18
   41564:	00428000 	call	42800 <_free_r>
   41568:	9c000217 	ldw	r16,8(r19)
   4156c:	00800174 	movhi	r2,5
   41570:	1522e617 	ldw	r20,-29800(r2)
   41574:	85400117 	ldw	r21,4(r16)
   41578:	003f1b06 	br	411e8 <_malloc_r+0x410>
   4157c:	18c15568 	cmpgeui	r3,r3,1365
   41580:	1800091e 	bne	r3,zero,415a8 <_malloc_r+0x7d0>
   41584:	1006d4ba 	srli	r3,r2,18
   41588:	19401f44 	addi	r5,r3,125
   4158c:	280a90fa 	slli	r5,r5,3
   41590:	19001f04 	addi	r4,r3,124
   41594:	003f3306 	br	41264 <_malloc_r+0x48c>
   41598:	0100fe04 	movi	r4,1016
   4159c:	01c01fc4 	movi	r7,127
   415a0:	02001f84 	movi	r8,126
   415a4:	003e4506 	br	40ebc <_malloc_r+0xe4>
   415a8:	0140fe04 	movi	r5,1016
   415ac:	01001f84 	movi	r4,126
   415b0:	003f2c06 	br	41264 <_malloc_r+0x48c>
   415b4:	98800117 	ldw	r2,4(r19)
   415b8:	003f9506 	br	41410 <_malloc_r+0x638>

000415bc <memchr>:
   415bc:	208000cc 	andi	r2,r4,3
   415c0:	280f883a 	mov	r7,r5
   415c4:	10000e26 	beq	r2,zero,41600 <memchr+0x44>
   415c8:	30bfffc4 	addi	r2,r6,-1
   415cc:	30001726 	beq	r6,zero,4162c <memchr+0x70>
   415d0:	29803fcc 	andi	r6,r5,255
   415d4:	00000606 	br	415f0 <memchr+0x34>
   415d8:	21000044 	addi	r4,r4,1
   415dc:	20c000cc 	andi	r3,r4,3
   415e0:	18000826 	beq	r3,zero,41604 <memchr+0x48>
   415e4:	10bfffc4 	addi	r2,r2,-1
   415e8:	10ffffe0 	cmpeqi	r3,r2,-1
   415ec:	18000f1e 	bne	r3,zero,4162c <memchr+0x70>
   415f0:	20c00003 	ldbu	r3,0(r4)
   415f4:	19bff81e 	bne	r3,r6,415d8 <memchr+0x1c>
   415f8:	2005883a 	mov	r2,r4
   415fc:	f800283a 	ret
   41600:	3005883a 	mov	r2,r6
   41604:	10c00130 	cmpltui	r3,r2,4
   41608:	18000a26 	beq	r3,zero,41634 <memchr+0x78>
   4160c:	10000726 	beq	r2,zero,4162c <memchr+0x70>
   41610:	2087883a 	add	r3,r4,r2
   41614:	39803fcc 	andi	r6,r7,255
   41618:	2005883a 	mov	r2,r4
   4161c:	11000003 	ldbu	r4,0(r2)
   41620:	21800326 	beq	r4,r6,41630 <memchr+0x74>
   41624:	10800044 	addi	r2,r2,1
   41628:	18bffc1e 	bne	r3,r2,4161c <memchr+0x60>
   4162c:	0005883a 	mov	r2,zero
   41630:	f800283a 	ret
   41634:	29403fcc 	andi	r5,r5,255
   41638:	2806923a 	slli	r3,r5,8
   4163c:	027fbff4 	movhi	r9,65279
   41640:	02202074 	movhi	r8,32897
   41644:	1946b03a 	or	r3,r3,r5
   41648:	180c943a 	slli	r6,r3,16
   4164c:	4a7fbfc4 	addi	r9,r9,-257
   41650:	42202004 	addi	r8,r8,-32640
   41654:	30ccb03a 	or	r6,r6,r3
   41658:	20c00017 	ldw	r3,0(r4)
   4165c:	30c6f03a 	xor	r3,r6,r3
   41660:	1a4b883a 	add	r5,r3,r9
   41664:	00c6303a 	nor	r3,zero,r3
   41668:	28c6703a 	and	r3,r5,r3
   4166c:	1a06703a 	and	r3,r3,r8
   41670:	183fe71e 	bne	r3,zero,41610 <memchr+0x54>
   41674:	10bfff04 	addi	r2,r2,-4
   41678:	10c00128 	cmpgeui	r3,r2,4
   4167c:	21000104 	addi	r4,r4,4
   41680:	183ff51e 	bne	r3,zero,41658 <memchr+0x9c>
   41684:	003fe106 	br	4160c <memchr+0x50>

00041688 <memcpy>:
   41688:	30c00430 	cmpltui	r3,r6,16
   4168c:	2005883a 	mov	r2,r4
   41690:	18002d1e 	bne	r3,zero,41748 <memcpy+0xc0>
   41694:	2146b03a 	or	r3,r4,r5
   41698:	18c000cc 	andi	r3,r3,3
   4169c:	1800351e 	bne	r3,zero,41774 <memcpy+0xec>
   416a0:	32fffc04 	addi	r11,r6,-16
   416a4:	5816d13a 	srli	r11,r11,4
   416a8:	280f883a 	mov	r7,r5
   416ac:	2007883a 	mov	r3,r4
   416b0:	5ac00044 	addi	r11,r11,1
   416b4:	5816913a 	slli	r11,r11,4
   416b8:	22d5883a 	add	r10,r4,r11
   416bc:	39000117 	ldw	r4,4(r7)
   416c0:	3a400017 	ldw	r9,0(r7)
   416c4:	3a000217 	ldw	r8,8(r7)
   416c8:	19000115 	stw	r4,4(r3)
   416cc:	39000317 	ldw	r4,12(r7)
   416d0:	1a400015 	stw	r9,0(r3)
   416d4:	1a000215 	stw	r8,8(r3)
   416d8:	19000315 	stw	r4,12(r3)
   416dc:	18c00404 	addi	r3,r3,16
   416e0:	39c00404 	addi	r7,r7,16
   416e4:	50fff51e 	bne	r10,r3,416bc <memcpy+0x34>
   416e8:	3100030c 	andi	r4,r6,12
   416ec:	2acb883a 	add	r5,r5,r11
   416f0:	320003cc 	andi	r8,r6,15
   416f4:	20002226 	beq	r4,zero,41780 <memcpy+0xf8>
   416f8:	280f883a 	mov	r7,r5
   416fc:	1813883a 	mov	r9,r3
   41700:	39c00104 	addi	r7,r7,4
   41704:	3abfff17 	ldw	r10,-4(r7)
   41708:	41c9c83a 	sub	r4,r8,r7
   4170c:	2909883a 	add	r4,r5,r4
   41710:	4a800015 	stw	r10,0(r9)
   41714:	21000128 	cmpgeui	r4,r4,4
   41718:	4a400104 	addi	r9,r9,4
   4171c:	203ff81e 	bne	r4,zero,41700 <memcpy+0x78>
   41720:	413fff04 	addi	r4,r8,-4
   41724:	2008d0ba 	srli	r4,r4,2
   41728:	318000cc 	andi	r6,r6,3
   4172c:	31ffffc4 	addi	r7,r6,-1
   41730:	21000044 	addi	r4,r4,1
   41734:	200890ba 	slli	r4,r4,2
   41738:	1907883a 	add	r3,r3,r4
   4173c:	290b883a 	add	r5,r5,r4
   41740:	3000041e 	bne	r6,zero,41754 <memcpy+0xcc>
   41744:	f800283a 	ret
   41748:	2007883a 	mov	r3,r4
   4174c:	31ffffc4 	addi	r7,r6,-1
   41750:	303ffc26 	beq	r6,zero,41744 <memcpy+0xbc>
   41754:	39c00044 	addi	r7,r7,1
   41758:	19cf883a 	add	r7,r3,r7
   4175c:	29800003 	ldbu	r6,0(r5)
   41760:	18c00044 	addi	r3,r3,1
   41764:	29400044 	addi	r5,r5,1
   41768:	19bfffc5 	stb	r6,-1(r3)
   4176c:	38fffb1e 	bne	r7,r3,4175c <memcpy+0xd4>
   41770:	f800283a 	ret
   41774:	31ffffc4 	addi	r7,r6,-1
   41778:	2007883a 	mov	r3,r4
   4177c:	003ff506 	br	41754 <memcpy+0xcc>
   41780:	400d883a 	mov	r6,r8
   41784:	003ff106 	br	4174c <memcpy+0xc4>

00041788 <memmove>:
   41788:	2005883a 	mov	r2,r4
   4178c:	29000a2e 	bgeu	r5,r4,417b8 <memmove+0x30>
   41790:	2989883a 	add	r4,r5,r6
   41794:	1100082e 	bgeu	r2,r4,417b8 <memmove+0x30>
   41798:	1187883a 	add	r3,r2,r6
   4179c:	30003e26 	beq	r6,zero,41898 <memmove+0x110>
   417a0:	217fffc3 	ldbu	r5,-1(r4)
   417a4:	18ffffc4 	addi	r3,r3,-1
   417a8:	213fffc4 	addi	r4,r4,-1
   417ac:	19400005 	stb	r5,0(r3)
   417b0:	10fffb1e 	bne	r2,r3,417a0 <memmove+0x18>
   417b4:	f800283a 	ret
   417b8:	30c00430 	cmpltui	r3,r6,16
   417bc:	18000b26 	beq	r3,zero,417ec <memmove+0x64>
   417c0:	1007883a 	mov	r3,r2
   417c4:	31ffffc4 	addi	r7,r6,-1
   417c8:	30003726 	beq	r6,zero,418a8 <memmove+0x120>
   417cc:	39c00044 	addi	r7,r7,1
   417d0:	29cf883a 	add	r7,r5,r7
   417d4:	29800003 	ldbu	r6,0(r5)
   417d8:	29400044 	addi	r5,r5,1
   417dc:	18c00044 	addi	r3,r3,1
   417e0:	19bfffc5 	stb	r6,-1(r3)
   417e4:	29fffb1e 	bne	r5,r7,417d4 <memmove+0x4c>
   417e8:	f800283a 	ret
   417ec:	1146b03a 	or	r3,r2,r5
   417f0:	18c000cc 	andi	r3,r3,3
   417f4:	1800291e 	bne	r3,zero,4189c <memmove+0x114>
   417f8:	327ffc04 	addi	r9,r6,-16
   417fc:	4812d13a 	srli	r9,r9,4
   41800:	280f883a 	mov	r7,r5
   41804:	1007883a 	mov	r3,r2
   41808:	4a400044 	addi	r9,r9,1
   4180c:	4812913a 	slli	r9,r9,4
   41810:	1251883a 	add	r8,r2,r9
   41814:	39000017 	ldw	r4,0(r7)
   41818:	39c00404 	addi	r7,r7,16
   4181c:	18c00404 	addi	r3,r3,16
   41820:	193ffc15 	stw	r4,-16(r3)
   41824:	393ffd17 	ldw	r4,-12(r7)
   41828:	193ffd15 	stw	r4,-12(r3)
   4182c:	393ffe17 	ldw	r4,-8(r7)
   41830:	193ffe15 	stw	r4,-8(r3)
   41834:	393fff17 	ldw	r4,-4(r7)
   41838:	193fff15 	stw	r4,-4(r3)
   4183c:	40fff51e 	bne	r8,r3,41814 <memmove+0x8c>
   41840:	3100030c 	andi	r4,r6,12
   41844:	2a4b883a 	add	r5,r5,r9
   41848:	320003cc 	andi	r8,r6,15
   4184c:	20001726 	beq	r4,zero,418ac <memmove+0x124>
   41850:	2813883a 	mov	r9,r5
   41854:	180f883a 	mov	r7,r3
   41858:	4a800017 	ldw	r10,0(r9)
   4185c:	39c00104 	addi	r7,r7,4
   41860:	41c9c83a 	sub	r4,r8,r7
   41864:	1909883a 	add	r4,r3,r4
   41868:	21000128 	cmpgeui	r4,r4,4
   4186c:	3abfff15 	stw	r10,-4(r7)
   41870:	4a400104 	addi	r9,r9,4
   41874:	203ff81e 	bne	r4,zero,41858 <memmove+0xd0>
   41878:	413fff04 	addi	r4,r8,-4
   4187c:	2008d0ba 	srli	r4,r4,2
   41880:	318000cc 	andi	r6,r6,3
   41884:	21000044 	addi	r4,r4,1
   41888:	200890ba 	slli	r4,r4,2
   4188c:	1907883a 	add	r3,r3,r4
   41890:	290b883a 	add	r5,r5,r4
   41894:	003fcb06 	br	417c4 <memmove+0x3c>
   41898:	f800283a 	ret
   4189c:	31ffffc4 	addi	r7,r6,-1
   418a0:	1007883a 	mov	r3,r2
   418a4:	003fc906 	br	417cc <memmove+0x44>
   418a8:	f800283a 	ret
   418ac:	400d883a 	mov	r6,r8
   418b0:	003fc406 	br	417c4 <memmove+0x3c>

000418b4 <memset>:
   418b4:	20c000cc 	andi	r3,r4,3
   418b8:	2005883a 	mov	r2,r4
   418bc:	18003726 	beq	r3,zero,4199c <memset+0xe8>
   418c0:	31ffffc4 	addi	r7,r6,-1
   418c4:	30003326 	beq	r6,zero,41994 <memset+0xe0>
   418c8:	2811883a 	mov	r8,r5
   418cc:	2007883a 	mov	r3,r4
   418d0:	00000306 	br	418e0 <memset+0x2c>
   418d4:	39ffffc4 	addi	r7,r7,-1
   418d8:	39bfffe0 	cmpeqi	r6,r7,-1
   418dc:	30002d1e 	bne	r6,zero,41994 <memset+0xe0>
   418e0:	18c00044 	addi	r3,r3,1
   418e4:	198000cc 	andi	r6,r3,3
   418e8:	1a3fffc5 	stb	r8,-1(r3)
   418ec:	303ff91e 	bne	r6,zero,418d4 <memset+0x20>
   418f0:	39000128 	cmpgeui	r4,r7,4
   418f4:	20002226 	beq	r4,zero,41980 <memset+0xcc>
   418f8:	29803fcc 	andi	r6,r5,255
   418fc:	3008923a 	slli	r4,r6,8
   41900:	3a000430 	cmpltui	r8,r7,16
   41904:	2188b03a 	or	r4,r4,r6
   41908:	200c943a 	slli	r6,r4,16
   4190c:	310cb03a 	or	r6,r6,r4
   41910:	40000e1e 	bne	r8,zero,4194c <memset+0x98>
   41914:	393ffc04 	addi	r4,r7,-16
   41918:	2008d13a 	srli	r4,r4,4
   4191c:	21000044 	addi	r4,r4,1
   41920:	2008913a 	slli	r4,r4,4
   41924:	1909883a 	add	r4,r3,r4
   41928:	19800015 	stw	r6,0(r3)
   4192c:	19800115 	stw	r6,4(r3)
   41930:	19800215 	stw	r6,8(r3)
   41934:	19800315 	stw	r6,12(r3)
   41938:	18c00404 	addi	r3,r3,16
   4193c:	20fffa1e 	bne	r4,r3,41928 <memset+0x74>
   41940:	3900030c 	andi	r4,r7,12
   41944:	39c003cc 	andi	r7,r7,15
   41948:	20000d26 	beq	r4,zero,41980 <memset+0xcc>
   4194c:	1811883a 	mov	r8,r3
   41950:	42000104 	addi	r8,r8,4
   41954:	3a09c83a 	sub	r4,r7,r8
   41958:	1909883a 	add	r4,r3,r4
   4195c:	21000128 	cmpgeui	r4,r4,4
   41960:	41bfff15 	stw	r6,-4(r8)
   41964:	203ffa1e 	bne	r4,zero,41950 <memset+0x9c>
   41968:	393fff04 	addi	r4,r7,-4
   4196c:	2008d0ba 	srli	r4,r4,2
   41970:	39c000cc 	andi	r7,r7,3
   41974:	21000044 	addi	r4,r4,1
   41978:	200890ba 	slli	r4,r4,2
   4197c:	1907883a 	add	r3,r3,r4
   41980:	38000526 	beq	r7,zero,41998 <memset+0xe4>
   41984:	19cf883a 	add	r7,r3,r7
   41988:	18c00044 	addi	r3,r3,1
   4198c:	197fffc5 	stb	r5,-1(r3)
   41990:	38fffd1e 	bne	r7,r3,41988 <memset+0xd4>
   41994:	f800283a 	ret
   41998:	f800283a 	ret
   4199c:	2007883a 	mov	r3,r4
   419a0:	300f883a 	mov	r7,r6
   419a4:	003fd206 	br	418f0 <memset+0x3c>

000419a8 <_realloc_r>:
   419a8:	defff504 	addi	sp,sp,-44
   419ac:	dcc00415 	stw	r19,16(sp)
   419b0:	dfc00a15 	stw	ra,40(sp)
   419b4:	df000915 	stw	fp,36(sp)
   419b8:	ddc00815 	stw	r23,32(sp)
   419bc:	dd800715 	stw	r22,28(sp)
   419c0:	dd400615 	stw	r21,24(sp)
   419c4:	dd000515 	stw	r20,20(sp)
   419c8:	dc800315 	stw	r18,12(sp)
   419cc:	dc400215 	stw	r17,8(sp)
   419d0:	dc000115 	stw	r16,4(sp)
   419d4:	3027883a 	mov	r19,r6
   419d8:	28008b26 	beq	r5,zero,41c08 <_realloc_r+0x260>
   419dc:	2821883a 	mov	r16,r5
   419e0:	202b883a 	mov	r21,r4
   419e4:	9c4002c4 	addi	r17,r19,11
   419e8:	00435ec0 	call	435ec <__malloc_lock>
   419ec:	888005f0 	cmpltui	r2,r17,23
   419f0:	84bfff17 	ldw	r18,-4(r16)
   419f4:	1000511e 	bne	r2,zero,41b3c <_realloc_r+0x194>
   419f8:	00bffe04 	movi	r2,-8
   419fc:	88a2703a 	and	r17,r17,r2
   41a00:	880b883a 	mov	r5,r17
   41a04:	88005016 	blt	r17,zero,41b48 <_realloc_r+0x1a0>
   41a08:	8cc04f36 	bltu	r17,r19,41b48 <_realloc_r+0x1a0>
   41a0c:	00ffff04 	movi	r3,-4
   41a10:	90e8703a 	and	r20,r18,r3
   41a14:	85bffe04 	addi	r22,r16,-8
   41a18:	a1403a0e 	bge	r20,r5,41b04 <_realloc_r+0x15c>
   41a1c:	07000134 	movhi	fp,4
   41a20:	e716ad04 	addi	fp,fp,23220
   41a24:	e2000217 	ldw	r8,8(fp)
   41a28:	b50d883a 	add	r6,r22,r20
   41a2c:	30800117 	ldw	r2,4(r6)
   41a30:	41808e26 	beq	r8,r6,41c6c <_realloc_r+0x2c4>
   41a34:	013fff84 	movi	r4,-2
   41a38:	1108703a 	and	r4,r2,r4
   41a3c:	3109883a 	add	r4,r6,r4
   41a40:	21000117 	ldw	r4,4(r4)
   41a44:	2100004c 	andi	r4,r4,1
   41a48:	20004f1e 	bne	r4,zero,41b88 <_realloc_r+0x1e0>
   41a4c:	10c4703a 	and	r2,r2,r3
   41a50:	a087883a 	add	r3,r20,r2
   41a54:	1940bd0e 	bge	r3,r5,41d4c <_realloc_r+0x3a4>
   41a58:	9480004c 	andi	r18,r18,1
   41a5c:	90004c1e 	bne	r18,zero,41b90 <_realloc_r+0x1e8>
   41a60:	81fffe17 	ldw	r7,-8(r16)
   41a64:	00ffff04 	movi	r3,-4
   41a68:	b1cfc83a 	sub	r7,r22,r7
   41a6c:	3c800117 	ldw	r18,4(r7)
   41a70:	90c6703a 	and	r3,r18,r3
   41a74:	30000426 	beq	r6,zero,41a88 <_realloc_r+0xe0>
   41a78:	a0c9883a 	add	r4,r20,r3
   41a7c:	20af883a 	add	r23,r4,r2
   41a80:	4180bc26 	beq	r8,r6,41d74 <_realloc_r+0x3cc>
   41a84:	b940930e 	bge	r23,r5,41cd4 <_realloc_r+0x32c>
   41a88:	38004126 	beq	r7,zero,41b90 <_realloc_r+0x1e8>
   41a8c:	a0ef883a 	add	r23,r20,r3
   41a90:	b9403f16 	blt	r23,r5,41b90 <_realloc_r+0x1e8>
   41a94:	38800317 	ldw	r2,12(r7)
   41a98:	38c00217 	ldw	r3,8(r7)
   41a9c:	a1bfff04 	addi	r6,r20,-4
   41aa0:	31400968 	cmpgeui	r5,r6,37
   41aa4:	18800315 	stw	r2,12(r3)
   41aa8:	10c00215 	stw	r3,8(r2)
   41aac:	39000204 	addi	r4,r7,8
   41ab0:	2800e11e 	bne	r5,zero,41e38 <_realloc_r+0x490>
   41ab4:	30800530 	cmpltui	r2,r6,20
   41ab8:	1000dd1e 	bne	r2,zero,41e30 <_realloc_r+0x488>
   41abc:	80c00017 	ldw	r3,0(r16)
   41ac0:	30800728 	cmpgeui	r2,r6,28
   41ac4:	38c00215 	stw	r3,8(r7)
   41ac8:	80c00117 	ldw	r3,4(r16)
   41acc:	38c00315 	stw	r3,12(r7)
   41ad0:	1000e21e 	bne	r2,zero,41e5c <_realloc_r+0x4b4>
   41ad4:	84000204 	addi	r16,r16,8
   41ad8:	38800404 	addi	r2,r7,16
   41adc:	80c00017 	ldw	r3,0(r16)
   41ae0:	b829883a 	mov	r20,r23
   41ae4:	382d883a 	mov	r22,r7
   41ae8:	10c00015 	stw	r3,0(r2)
   41aec:	80c00117 	ldw	r3,4(r16)
   41af0:	10c00115 	stw	r3,4(r2)
   41af4:	80c00217 	ldw	r3,8(r16)
   41af8:	2021883a 	mov	r16,r4
   41afc:	10c00215 	stw	r3,8(r2)
   41b00:	3c800117 	ldw	r18,4(r7)
   41b04:	a447c83a 	sub	r3,r20,r17
   41b08:	19000430 	cmpltui	r4,r3,16
   41b0c:	9480004c 	andi	r18,r18,1
   41b10:	b505883a 	add	r2,r22,r20
   41b14:	20004926 	beq	r4,zero,41c3c <_realloc_r+0x294>
   41b18:	a4a4b03a 	or	r18,r20,r18
   41b1c:	b4800115 	stw	r18,4(r22)
   41b20:	10c00117 	ldw	r3,4(r2)
   41b24:	18c00054 	ori	r3,r3,1
   41b28:	10c00115 	stw	r3,4(r2)
   41b2c:	a809883a 	mov	r4,r21
   41b30:	00436100 	call	43610 <__malloc_unlock>
   41b34:	8027883a 	mov	r19,r16
   41b38:	00000606 	br	41b54 <_realloc_r+0x1ac>
   41b3c:	04400404 	movi	r17,16
   41b40:	01400404 	movi	r5,16
   41b44:	8cffb12e 	bgeu	r17,r19,41a0c <_realloc_r+0x64>
   41b48:	00800304 	movi	r2,12
   41b4c:	a8800015 	stw	r2,0(r21)
   41b50:	0027883a 	mov	r19,zero
   41b54:	9805883a 	mov	r2,r19
   41b58:	dfc00a17 	ldw	ra,40(sp)
   41b5c:	df000917 	ldw	fp,36(sp)
   41b60:	ddc00817 	ldw	r23,32(sp)
   41b64:	dd800717 	ldw	r22,28(sp)
   41b68:	dd400617 	ldw	r21,24(sp)
   41b6c:	dd000517 	ldw	r20,20(sp)
   41b70:	dcc00417 	ldw	r19,16(sp)
   41b74:	dc800317 	ldw	r18,12(sp)
   41b78:	dc400217 	ldw	r17,8(sp)
   41b7c:	dc000117 	ldw	r16,4(sp)
   41b80:	dec00b04 	addi	sp,sp,44
   41b84:	f800283a 	ret
   41b88:	9480004c 	andi	r18,r18,1
   41b8c:	90006a26 	beq	r18,zero,41d38 <_realloc_r+0x390>
   41b90:	980b883a 	mov	r5,r19
   41b94:	a809883a 	mov	r4,r21
   41b98:	0040dd80 	call	40dd8 <_malloc_r>
   41b9c:	1027883a 	mov	r19,r2
   41ba0:	10001626 	beq	r2,zero,41bfc <_realloc_r+0x254>
   41ba4:	84bfff17 	ldw	r18,-4(r16)
   41ba8:	10fffe04 	addi	r3,r2,-8
   41bac:	00bfff84 	movi	r2,-2
   41bb0:	9084703a 	and	r2,r18,r2
   41bb4:	b085883a 	add	r2,r22,r2
   41bb8:	10c05a26 	beq	r2,r3,41d24 <_realloc_r+0x37c>
   41bbc:	a1bfff04 	addi	r6,r20,-4
   41bc0:	30800968 	cmpgeui	r2,r6,37
   41bc4:	1000671e 	bne	r2,zero,41d64 <_realloc_r+0x3bc>
   41bc8:	30800530 	cmpltui	r2,r6,20
   41bcc:	10003826 	beq	r2,zero,41cb0 <_realloc_r+0x308>
   41bd0:	9805883a 	mov	r2,r19
   41bd4:	8007883a 	mov	r3,r16
   41bd8:	19000017 	ldw	r4,0(r3)
   41bdc:	11000015 	stw	r4,0(r2)
   41be0:	19000117 	ldw	r4,4(r3)
   41be4:	11000115 	stw	r4,4(r2)
   41be8:	18c00217 	ldw	r3,8(r3)
   41bec:	10c00215 	stw	r3,8(r2)
   41bf0:	800b883a 	mov	r5,r16
   41bf4:	a809883a 	mov	r4,r21
   41bf8:	00428000 	call	42800 <_free_r>
   41bfc:	a809883a 	mov	r4,r21
   41c00:	00436100 	call	43610 <__malloc_unlock>
   41c04:	003fd306 	br	41b54 <_realloc_r+0x1ac>
   41c08:	300b883a 	mov	r5,r6
   41c0c:	dfc00a17 	ldw	ra,40(sp)
   41c10:	df000917 	ldw	fp,36(sp)
   41c14:	ddc00817 	ldw	r23,32(sp)
   41c18:	dd800717 	ldw	r22,28(sp)
   41c1c:	dd400617 	ldw	r21,24(sp)
   41c20:	dd000517 	ldw	r20,20(sp)
   41c24:	dcc00417 	ldw	r19,16(sp)
   41c28:	dc800317 	ldw	r18,12(sp)
   41c2c:	dc400217 	ldw	r17,8(sp)
   41c30:	dc000117 	ldw	r16,4(sp)
   41c34:	dec00b04 	addi	sp,sp,44
   41c38:	0040dd81 	jmpi	40dd8 <_malloc_r>
   41c3c:	9464b03a 	or	r18,r18,r17
   41c40:	b4800115 	stw	r18,4(r22)
   41c44:	b44b883a 	add	r5,r22,r17
   41c48:	18c00054 	ori	r3,r3,1
   41c4c:	28c00115 	stw	r3,4(r5)
   41c50:	10c00117 	ldw	r3,4(r2)
   41c54:	29400204 	addi	r5,r5,8
   41c58:	a809883a 	mov	r4,r21
   41c5c:	18c00054 	ori	r3,r3,1
   41c60:	10c00115 	stw	r3,4(r2)
   41c64:	00428000 	call	42800 <_free_r>
   41c68:	003fb006 	br	41b2c <_realloc_r+0x184>
   41c6c:	10c4703a 	and	r2,r2,r3
   41c70:	a087883a 	add	r3,r20,r2
   41c74:	89000404 	addi	r4,r17,16
   41c78:	193f7716 	blt	r3,r4,41a58 <_realloc_r+0xb0>
   41c7c:	b46d883a 	add	r22,r22,r17
   41c80:	1c45c83a 	sub	r2,r3,r17
   41c84:	e5800215 	stw	r22,8(fp)
   41c88:	10800054 	ori	r2,r2,1
   41c8c:	b0800115 	stw	r2,4(r22)
   41c90:	80bfff17 	ldw	r2,-4(r16)
   41c94:	a809883a 	mov	r4,r21
   41c98:	8027883a 	mov	r19,r16
   41c9c:	1080004c 	andi	r2,r2,1
   41ca0:	1444b03a 	or	r2,r2,r17
   41ca4:	80bfff15 	stw	r2,-4(r16)
   41ca8:	00436100 	call	43610 <__malloc_unlock>
   41cac:	003fa906 	br	41b54 <_realloc_r+0x1ac>
   41cb0:	80c00017 	ldw	r3,0(r16)
   41cb4:	30800728 	cmpgeui	r2,r6,28
   41cb8:	98c00015 	stw	r3,0(r19)
   41cbc:	80c00117 	ldw	r3,4(r16)
   41cc0:	98c00115 	stw	r3,4(r19)
   41cc4:	1000511e 	bne	r2,zero,41e0c <_realloc_r+0x464>
   41cc8:	80c00204 	addi	r3,r16,8
   41ccc:	98800204 	addi	r2,r19,8
   41cd0:	003fc106 	br	41bd8 <_realloc_r+0x230>
   41cd4:	30800317 	ldw	r2,12(r6)
   41cd8:	30c00217 	ldw	r3,8(r6)
   41cdc:	a1bfff04 	addi	r6,r20,-4
   41ce0:	31400968 	cmpgeui	r5,r6,37
   41ce4:	18800315 	stw	r2,12(r3)
   41ce8:	10c00215 	stw	r3,8(r2)
   41cec:	38c00217 	ldw	r3,8(r7)
   41cf0:	38800317 	ldw	r2,12(r7)
   41cf4:	39000204 	addi	r4,r7,8
   41cf8:	18800315 	stw	r2,12(r3)
   41cfc:	10c00215 	stw	r3,8(r2)
   41d00:	283f6c26 	beq	r5,zero,41ab4 <_realloc_r+0x10c>
   41d04:	800b883a 	mov	r5,r16
   41d08:	d9c00015 	stw	r7,0(sp)
   41d0c:	00417880 	call	41788 <memmove>
   41d10:	d9c00017 	ldw	r7,0(sp)
   41d14:	1021883a 	mov	r16,r2
   41d18:	b829883a 	mov	r20,r23
   41d1c:	382d883a 	mov	r22,r7
   41d20:	003f7806 	br	41b04 <_realloc_r+0x15c>
   41d24:	98bfff17 	ldw	r2,-4(r19)
   41d28:	00ffff04 	movi	r3,-4
   41d2c:	10c4703a 	and	r2,r2,r3
   41d30:	a0a9883a 	add	r20,r20,r2
   41d34:	003f7306 	br	41b04 <_realloc_r+0x15c>
   41d38:	81fffe17 	ldw	r7,-8(r16)
   41d3c:	b1cfc83a 	sub	r7,r22,r7
   41d40:	38800117 	ldw	r2,4(r7)
   41d44:	10c6703a 	and	r3,r2,r3
   41d48:	003f4f06 	br	41a88 <_realloc_r+0xe0>
   41d4c:	30800317 	ldw	r2,12(r6)
   41d50:	31000217 	ldw	r4,8(r6)
   41d54:	1829883a 	mov	r20,r3
   41d58:	20800315 	stw	r2,12(r4)
   41d5c:	11000215 	stw	r4,8(r2)
   41d60:	003f6806 	br	41b04 <_realloc_r+0x15c>
   41d64:	800b883a 	mov	r5,r16
   41d68:	9809883a 	mov	r4,r19
   41d6c:	00417880 	call	41788 <memmove>
   41d70:	003f9f06 	br	41bf0 <_realloc_r+0x248>
   41d74:	88800404 	addi	r2,r17,16
   41d78:	b8bf4316 	blt	r23,r2,41a88 <_realloc_r+0xe0>
   41d7c:	38800317 	ldw	r2,12(r7)
   41d80:	38c00217 	ldw	r3,8(r7)
   41d84:	a1bfff04 	addi	r6,r20,-4
   41d88:	31000968 	cmpgeui	r4,r6,37
   41d8c:	18800315 	stw	r2,12(r3)
   41d90:	10c00215 	stw	r3,8(r2)
   41d94:	3cc00204 	addi	r19,r7,8
   41d98:	2000421e 	bne	r4,zero,41ea4 <_realloc_r+0x4fc>
   41d9c:	30800530 	cmpltui	r2,r6,20
   41da0:	10003e1e 	bne	r2,zero,41e9c <_realloc_r+0x4f4>
   41da4:	80c00017 	ldw	r3,0(r16)
   41da8:	30800728 	cmpgeui	r2,r6,28
   41dac:	38c00215 	stw	r3,8(r7)
   41db0:	80c00117 	ldw	r3,4(r16)
   41db4:	38c00315 	stw	r3,12(r7)
   41db8:	1000471e 	bne	r2,zero,41ed8 <_realloc_r+0x530>
   41dbc:	84000204 	addi	r16,r16,8
   41dc0:	38800404 	addi	r2,r7,16
   41dc4:	80c00017 	ldw	r3,0(r16)
   41dc8:	10c00015 	stw	r3,0(r2)
   41dcc:	80c00117 	ldw	r3,4(r16)
   41dd0:	10c00115 	stw	r3,4(r2)
   41dd4:	80c00217 	ldw	r3,8(r16)
   41dd8:	10c00215 	stw	r3,8(r2)
   41ddc:	3c47883a 	add	r3,r7,r17
   41de0:	bc45c83a 	sub	r2,r23,r17
   41de4:	e0c00215 	stw	r3,8(fp)
   41de8:	10800054 	ori	r2,r2,1
   41dec:	18800115 	stw	r2,4(r3)
   41df0:	38800117 	ldw	r2,4(r7)
   41df4:	a809883a 	mov	r4,r21
   41df8:	1080004c 	andi	r2,r2,1
   41dfc:	1444b03a 	or	r2,r2,r17
   41e00:	38800115 	stw	r2,4(r7)
   41e04:	00436100 	call	43610 <__malloc_unlock>
   41e08:	003f5206 	br	41b54 <_realloc_r+0x1ac>
   41e0c:	80800217 	ldw	r2,8(r16)
   41e10:	31800920 	cmpeqi	r6,r6,36
   41e14:	98800215 	stw	r2,8(r19)
   41e18:	80800317 	ldw	r2,12(r16)
   41e1c:	98800315 	stw	r2,12(r19)
   41e20:	3000171e 	bne	r6,zero,41e80 <_realloc_r+0x4d8>
   41e24:	80c00404 	addi	r3,r16,16
   41e28:	98800404 	addi	r2,r19,16
   41e2c:	003f6a06 	br	41bd8 <_realloc_r+0x230>
   41e30:	2005883a 	mov	r2,r4
   41e34:	003f2906 	br	41adc <_realloc_r+0x134>
   41e38:	800b883a 	mov	r5,r16
   41e3c:	d9c00015 	stw	r7,0(sp)
   41e40:	00417880 	call	41788 <memmove>
   41e44:	d9c00017 	ldw	r7,0(sp)
   41e48:	1021883a 	mov	r16,r2
   41e4c:	b829883a 	mov	r20,r23
   41e50:	3c800117 	ldw	r18,4(r7)
   41e54:	382d883a 	mov	r22,r7
   41e58:	003f2a06 	br	41b04 <_realloc_r+0x15c>
   41e5c:	80800217 	ldw	r2,8(r16)
   41e60:	31800920 	cmpeqi	r6,r6,36
   41e64:	38800415 	stw	r2,16(r7)
   41e68:	80800317 	ldw	r2,12(r16)
   41e6c:	38800515 	stw	r2,20(r7)
   41e70:	3000121e 	bne	r6,zero,41ebc <_realloc_r+0x514>
   41e74:	84000404 	addi	r16,r16,16
   41e78:	38800604 	addi	r2,r7,24
   41e7c:	003f1706 	br	41adc <_realloc_r+0x134>
   41e80:	81000417 	ldw	r4,16(r16)
   41e84:	80c00604 	addi	r3,r16,24
   41e88:	98800604 	addi	r2,r19,24
   41e8c:	99000415 	stw	r4,16(r19)
   41e90:	81000517 	ldw	r4,20(r16)
   41e94:	99000515 	stw	r4,20(r19)
   41e98:	003f4f06 	br	41bd8 <_realloc_r+0x230>
   41e9c:	9805883a 	mov	r2,r19
   41ea0:	003fc806 	br	41dc4 <_realloc_r+0x41c>
   41ea4:	800b883a 	mov	r5,r16
   41ea8:	9809883a 	mov	r4,r19
   41eac:	d9c00015 	stw	r7,0(sp)
   41eb0:	00417880 	call	41788 <memmove>
   41eb4:	d9c00017 	ldw	r7,0(sp)
   41eb8:	003fc806 	br	41ddc <_realloc_r+0x434>
   41ebc:	80c00417 	ldw	r3,16(r16)
   41ec0:	84000604 	addi	r16,r16,24
   41ec4:	38800804 	addi	r2,r7,32
   41ec8:	38c00615 	stw	r3,24(r7)
   41ecc:	80ffff17 	ldw	r3,-4(r16)
   41ed0:	38c00715 	stw	r3,28(r7)
   41ed4:	003f0106 	br	41adc <_realloc_r+0x134>
   41ed8:	80800217 	ldw	r2,8(r16)
   41edc:	31800920 	cmpeqi	r6,r6,36
   41ee0:	38800415 	stw	r2,16(r7)
   41ee4:	80800317 	ldw	r2,12(r16)
   41ee8:	38800515 	stw	r2,20(r7)
   41eec:	3000031e 	bne	r6,zero,41efc <_realloc_r+0x554>
   41ef0:	84000404 	addi	r16,r16,16
   41ef4:	38800604 	addi	r2,r7,24
   41ef8:	003fb206 	br	41dc4 <_realloc_r+0x41c>
   41efc:	80c00417 	ldw	r3,16(r16)
   41f00:	84000604 	addi	r16,r16,24
   41f04:	38800804 	addi	r2,r7,32
   41f08:	38c00615 	stw	r3,24(r7)
   41f0c:	80ffff17 	ldw	r3,-4(r16)
   41f10:	38c00715 	stw	r3,28(r7)
   41f14:	003fab06 	br	41dc4 <_realloc_r+0x41c>

00041f18 <_sbrk_r>:
   41f18:	defffe04 	addi	sp,sp,-8
   41f1c:	dc000015 	stw	r16,0(sp)
   41f20:	00800174 	movhi	r2,5
   41f24:	2021883a 	mov	r16,r4
   41f28:	2809883a 	mov	r4,r5
   41f2c:	dfc00115 	stw	ra,4(sp)
   41f30:	1022dd15 	stw	zero,-29836(r2)
   41f34:	00437c40 	call	437c4 <sbrk>
   41f38:	10ffffd8 	cmpnei	r3,r2,-1
   41f3c:	18000426 	beq	r3,zero,41f50 <_sbrk_r+0x38>
   41f40:	dfc00117 	ldw	ra,4(sp)
   41f44:	dc000017 	ldw	r16,0(sp)
   41f48:	dec00204 	addi	sp,sp,8
   41f4c:	f800283a 	ret
   41f50:	00c00174 	movhi	r3,5
   41f54:	18e2dd17 	ldw	r3,-29836(r3)
   41f58:	183ff926 	beq	r3,zero,41f40 <_sbrk_r+0x28>
   41f5c:	80c00015 	stw	r3,0(r16)
   41f60:	dfc00117 	ldw	ra,4(sp)
   41f64:	dc000017 	ldw	r16,0(sp)
   41f68:	dec00204 	addi	sp,sp,8
   41f6c:	f800283a 	ret

00041f70 <__sread>:
   41f70:	defffe04 	addi	sp,sp,-8
   41f74:	dc000015 	stw	r16,0(sp)
   41f78:	2821883a 	mov	r16,r5
   41f7c:	2940038f 	ldh	r5,14(r5)
   41f80:	dfc00115 	stw	ra,4(sp)
   41f84:	0042da00 	call	42da0 <_read_r>
   41f88:	10000716 	blt	r2,zero,41fa8 <__sread+0x38>
   41f8c:	80c01417 	ldw	r3,80(r16)
   41f90:	1887883a 	add	r3,r3,r2
   41f94:	80c01415 	stw	r3,80(r16)
   41f98:	dfc00117 	ldw	ra,4(sp)
   41f9c:	dc000017 	ldw	r16,0(sp)
   41fa0:	dec00204 	addi	sp,sp,8
   41fa4:	f800283a 	ret
   41fa8:	80c0030b 	ldhu	r3,12(r16)
   41fac:	18fbffcc 	andi	r3,r3,61439
   41fb0:	80c0030d 	sth	r3,12(r16)
   41fb4:	dfc00117 	ldw	ra,4(sp)
   41fb8:	dc000017 	ldw	r16,0(sp)
   41fbc:	dec00204 	addi	sp,sp,8
   41fc0:	f800283a 	ret

00041fc4 <__seofread>:
   41fc4:	0005883a 	mov	r2,zero
   41fc8:	f800283a 	ret

00041fcc <__swrite>:
   41fcc:	2880030b 	ldhu	r2,12(r5)
   41fd0:	defffb04 	addi	sp,sp,-20
   41fd4:	dcc00315 	stw	r19,12(sp)
   41fd8:	dc800215 	stw	r18,8(sp)
   41fdc:	dc400115 	stw	r17,4(sp)
   41fe0:	dc000015 	stw	r16,0(sp)
   41fe4:	dfc00415 	stw	ra,16(sp)
   41fe8:	10c0400c 	andi	r3,r2,256
   41fec:	2821883a 	mov	r16,r5
   41ff0:	2023883a 	mov	r17,r4
   41ff4:	3025883a 	mov	r18,r6
   41ff8:	3827883a 	mov	r19,r7
   41ffc:	18000d1e 	bne	r3,zero,42034 <__swrite+0x68>
   42000:	8140038f 	ldh	r5,14(r16)
   42004:	10bbffcc 	andi	r2,r2,61439
   42008:	980f883a 	mov	r7,r19
   4200c:	900d883a 	mov	r6,r18
   42010:	8809883a 	mov	r4,r17
   42014:	8080030d 	sth	r2,12(r16)
   42018:	dfc00417 	ldw	ra,16(sp)
   4201c:	dcc00317 	ldw	r19,12(sp)
   42020:	dc800217 	ldw	r18,8(sp)
   42024:	dc400117 	ldw	r17,4(sp)
   42028:	dc000017 	ldw	r16,0(sp)
   4202c:	dec00504 	addi	sp,sp,20
   42030:	00420b01 	jmpi	420b0 <_write_r>
   42034:	2940038f 	ldh	r5,14(r5)
   42038:	01c00084 	movi	r7,2
   4203c:	000d883a 	mov	r6,zero
   42040:	0042afc0 	call	42afc <_lseek_r>
   42044:	8080030b 	ldhu	r2,12(r16)
   42048:	003fed06 	br	42000 <__swrite+0x34>

0004204c <__sseek>:
   4204c:	defffe04 	addi	sp,sp,-8
   42050:	dc000015 	stw	r16,0(sp)
   42054:	2821883a 	mov	r16,r5
   42058:	2940038f 	ldh	r5,14(r5)
   4205c:	dfc00115 	stw	ra,4(sp)
   42060:	0042afc0 	call	42afc <_lseek_r>
   42064:	10ffffd8 	cmpnei	r3,r2,-1
   42068:	18000826 	beq	r3,zero,4208c <__sseek+0x40>
   4206c:	80c0030b 	ldhu	r3,12(r16)
   42070:	80801415 	stw	r2,80(r16)
   42074:	18c40014 	ori	r3,r3,4096
   42078:	80c0030d 	sth	r3,12(r16)
   4207c:	dfc00117 	ldw	ra,4(sp)
   42080:	dc000017 	ldw	r16,0(sp)
   42084:	dec00204 	addi	sp,sp,8
   42088:	f800283a 	ret
   4208c:	80c0030b 	ldhu	r3,12(r16)
   42090:	18fbffcc 	andi	r3,r3,61439
   42094:	80c0030d 	sth	r3,12(r16)
   42098:	dfc00117 	ldw	ra,4(sp)
   4209c:	dc000017 	ldw	r16,0(sp)
   420a0:	dec00204 	addi	sp,sp,8
   420a4:	f800283a 	ret

000420a8 <__sclose>:
   420a8:	2940038f 	ldh	r5,14(r5)
   420ac:	00422781 	jmpi	42278 <_close_r>

000420b0 <_write_r>:
   420b0:	2807883a 	mov	r3,r5
   420b4:	defffe04 	addi	sp,sp,-8
   420b8:	dc000015 	stw	r16,0(sp)
   420bc:	300b883a 	mov	r5,r6
   420c0:	00800174 	movhi	r2,5
   420c4:	380d883a 	mov	r6,r7
   420c8:	2021883a 	mov	r16,r4
   420cc:	1809883a 	mov	r4,r3
   420d0:	dfc00115 	stw	ra,4(sp)
   420d4:	1022dd15 	stw	zero,-29836(r2)
   420d8:	00438b80 	call	438b8 <write>
   420dc:	10ffffd8 	cmpnei	r3,r2,-1
   420e0:	18000426 	beq	r3,zero,420f4 <_write_r+0x44>
   420e4:	dfc00117 	ldw	ra,4(sp)
   420e8:	dc000017 	ldw	r16,0(sp)
   420ec:	dec00204 	addi	sp,sp,8
   420f0:	f800283a 	ret
   420f4:	00c00174 	movhi	r3,5
   420f8:	18e2dd17 	ldw	r3,-29836(r3)
   420fc:	183ff926 	beq	r3,zero,420e4 <_write_r+0x34>
   42100:	80c00015 	stw	r3,0(r16)
   42104:	dfc00117 	ldw	ra,4(sp)
   42108:	dc000017 	ldw	r16,0(sp)
   4210c:	dec00204 	addi	sp,sp,8
   42110:	f800283a 	ret

00042114 <__swsetup_r>:
   42114:	00800134 	movhi	r2,4
   42118:	109c3217 	ldw	r2,28872(r2)
   4211c:	defffd04 	addi	sp,sp,-12
   42120:	dc400115 	stw	r17,4(sp)
   42124:	dc000015 	stw	r16,0(sp)
   42128:	dfc00215 	stw	ra,8(sp)
   4212c:	2023883a 	mov	r17,r4
   42130:	2821883a 	mov	r16,r5
   42134:	10000226 	beq	r2,zero,42140 <__swsetup_r+0x2c>
   42138:	10c00e17 	ldw	r3,56(r2)
   4213c:	18001f26 	beq	r3,zero,421bc <__swsetup_r+0xa8>
   42140:	8180030b 	ldhu	r6,12(r16)
   42144:	30c0020c 	andi	r3,r6,8
   42148:	3005883a 	mov	r2,r6
   4214c:	18002126 	beq	r3,zero,421d4 <__swsetup_r+0xc0>
   42150:	80c00417 	ldw	r3,16(r16)
   42154:	18002826 	beq	r3,zero,421f8 <__swsetup_r+0xe4>
   42158:	1100004c 	andi	r4,r2,1
   4215c:	20000b1e 	bne	r4,zero,4218c <__swsetup_r+0x78>
   42160:	1100008c 	andi	r4,r2,2
   42164:	20002e1e 	bne	r4,zero,42220 <__swsetup_r+0x10c>
   42168:	81000517 	ldw	r4,20(r16)
   4216c:	81000215 	stw	r4,8(r16)
   42170:	18000b26 	beq	r3,zero,421a0 <__swsetup_r+0x8c>
   42174:	0005883a 	mov	r2,zero
   42178:	dfc00217 	ldw	ra,8(sp)
   4217c:	dc400117 	ldw	r17,4(sp)
   42180:	dc000017 	ldw	r16,0(sp)
   42184:	dec00304 	addi	sp,sp,12
   42188:	f800283a 	ret
   4218c:	81000517 	ldw	r4,20(r16)
   42190:	80000215 	stw	zero,8(r16)
   42194:	0109c83a 	sub	r4,zero,r4
   42198:	81000615 	stw	r4,24(r16)
   4219c:	183ff51e 	bne	r3,zero,42174 <__swsetup_r+0x60>
   421a0:	10c0200c 	andi	r3,r2,128
   421a4:	0005883a 	mov	r2,zero
   421a8:	183ff326 	beq	r3,zero,42178 <__swsetup_r+0x64>
   421ac:	31801014 	ori	r6,r6,64
   421b0:	8180030d 	sth	r6,12(r16)
   421b4:	00bfffc4 	movi	r2,-1
   421b8:	003fef06 	br	42178 <__swsetup_r+0x64>
   421bc:	1009883a 	mov	r4,r2
   421c0:	00407940 	call	40794 <__sinit>
   421c4:	8180030b 	ldhu	r6,12(r16)
   421c8:	30c0020c 	andi	r3,r6,8
   421cc:	3005883a 	mov	r2,r6
   421d0:	183fdf1e 	bne	r3,zero,42150 <__swsetup_r+0x3c>
   421d4:	3080040c 	andi	r2,r6,16
   421d8:	10002126 	beq	r2,zero,42260 <__swsetup_r+0x14c>
   421dc:	3080010c 	andi	r2,r6,4
   421e0:	1000111e 	bne	r2,zero,42228 <__swsetup_r+0x114>
   421e4:	80c00417 	ldw	r3,16(r16)
   421e8:	30800214 	ori	r2,r6,8
   421ec:	8080030d 	sth	r2,12(r16)
   421f0:	100d883a 	mov	r6,r2
   421f4:	183fd81e 	bne	r3,zero,42158 <__swsetup_r+0x44>
   421f8:	1100a00c 	andi	r4,r2,640
   421fc:	21008020 	cmpeqi	r4,r4,512
   42200:	203fd51e 	bne	r4,zero,42158 <__swsetup_r+0x44>
   42204:	800b883a 	mov	r5,r16
   42208:	8809883a 	mov	r4,r17
   4220c:	0042b600 	call	42b60 <__smakebuf_r>
   42210:	8180030b 	ldhu	r6,12(r16)
   42214:	80c00417 	ldw	r3,16(r16)
   42218:	3005883a 	mov	r2,r6
   4221c:	003fce06 	br	42158 <__swsetup_r+0x44>
   42220:	0009883a 	mov	r4,zero
   42224:	003fd106 	br	4216c <__swsetup_r+0x58>
   42228:	81400c17 	ldw	r5,48(r16)
   4222c:	28000626 	beq	r5,zero,42248 <__swsetup_r+0x134>
   42230:	80801004 	addi	r2,r16,64
   42234:	28800326 	beq	r5,r2,42244 <__swsetup_r+0x130>
   42238:	8809883a 	mov	r4,r17
   4223c:	00428000 	call	42800 <_free_r>
   42240:	8180030b 	ldhu	r6,12(r16)
   42244:	80000c15 	stw	zero,48(r16)
   42248:	80c00417 	ldw	r3,16(r16)
   4224c:	00bff6c4 	movi	r2,-37
   42250:	118c703a 	and	r6,r2,r6
   42254:	80000115 	stw	zero,4(r16)
   42258:	80c00015 	stw	r3,0(r16)
   4225c:	003fe206 	br	421e8 <__swsetup_r+0xd4>
   42260:	00800244 	movi	r2,9
   42264:	88800015 	stw	r2,0(r17)
   42268:	31801014 	ori	r6,r6,64
   4226c:	8180030d 	sth	r6,12(r16)
   42270:	00bfffc4 	movi	r2,-1
   42274:	003fc006 	br	42178 <__swsetup_r+0x64>

00042278 <_close_r>:
   42278:	defffe04 	addi	sp,sp,-8
   4227c:	dc000015 	stw	r16,0(sp)
   42280:	00800174 	movhi	r2,5
   42284:	2021883a 	mov	r16,r4
   42288:	2809883a 	mov	r4,r5
   4228c:	dfc00115 	stw	ra,4(sp)
   42290:	1022dd15 	stw	zero,-29836(r2)
   42294:	00430ac0 	call	430ac <close>
   42298:	10ffffd8 	cmpnei	r3,r2,-1
   4229c:	18000426 	beq	r3,zero,422b0 <_close_r+0x38>
   422a0:	dfc00117 	ldw	ra,4(sp)
   422a4:	dc000017 	ldw	r16,0(sp)
   422a8:	dec00204 	addi	sp,sp,8
   422ac:	f800283a 	ret
   422b0:	00c00174 	movhi	r3,5
   422b4:	18e2dd17 	ldw	r3,-29836(r3)
   422b8:	183ff926 	beq	r3,zero,422a0 <_close_r+0x28>
   422bc:	80c00015 	stw	r3,0(r16)
   422c0:	dfc00117 	ldw	ra,4(sp)
   422c4:	dc000017 	ldw	r16,0(sp)
   422c8:	dec00204 	addi	sp,sp,8
   422cc:	f800283a 	ret

000422d0 <_fclose_r>:
   422d0:	defffc04 	addi	sp,sp,-16
   422d4:	dfc00315 	stw	ra,12(sp)
   422d8:	dc800215 	stw	r18,8(sp)
   422dc:	dc400115 	stw	r17,4(sp)
   422e0:	dc000015 	stw	r16,0(sp)
   422e4:	28000726 	beq	r5,zero,42304 <_fclose_r+0x34>
   422e8:	2821883a 	mov	r16,r5
   422ec:	2023883a 	mov	r17,r4
   422f0:	20000226 	beq	r4,zero,422fc <_fclose_r+0x2c>
   422f4:	20800e17 	ldw	r2,56(r4)
   422f8:	10002726 	beq	r2,zero,42398 <_fclose_r+0xc8>
   422fc:	8080030f 	ldh	r2,12(r16)
   42300:	1000081e 	bne	r2,zero,42324 <_fclose_r+0x54>
   42304:	0025883a 	mov	r18,zero
   42308:	9005883a 	mov	r2,r18
   4230c:	dfc00317 	ldw	ra,12(sp)
   42310:	dc800217 	ldw	r18,8(sp)
   42314:	dc400117 	ldw	r17,4(sp)
   42318:	dc000017 	ldw	r16,0(sp)
   4231c:	dec00404 	addi	sp,sp,16
   42320:	f800283a 	ret
   42324:	800b883a 	mov	r5,r16
   42328:	8809883a 	mov	r4,r17
   4232c:	00423d80 	call	423d8 <__sflush_r>
   42330:	80c00b17 	ldw	r3,44(r16)
   42334:	1025883a 	mov	r18,r2
   42338:	18000426 	beq	r3,zero,4234c <_fclose_r+0x7c>
   4233c:	81400717 	ldw	r5,28(r16)
   42340:	8809883a 	mov	r4,r17
   42344:	183ee83a 	callr	r3
   42348:	10001716 	blt	r2,zero,423a8 <_fclose_r+0xd8>
   4234c:	8080030b 	ldhu	r2,12(r16)
   42350:	1080200c 	andi	r2,r2,128
   42354:	1000181e 	bne	r2,zero,423b8 <_fclose_r+0xe8>
   42358:	81400c17 	ldw	r5,48(r16)
   4235c:	28000526 	beq	r5,zero,42374 <_fclose_r+0xa4>
   42360:	80801004 	addi	r2,r16,64
   42364:	28800226 	beq	r5,r2,42370 <_fclose_r+0xa0>
   42368:	8809883a 	mov	r4,r17
   4236c:	00428000 	call	42800 <_free_r>
   42370:	80000c15 	stw	zero,48(r16)
   42374:	81401117 	ldw	r5,68(r16)
   42378:	28000326 	beq	r5,zero,42388 <_fclose_r+0xb8>
   4237c:	8809883a 	mov	r4,r17
   42380:	00428000 	call	42800 <_free_r>
   42384:	80001115 	stw	zero,68(r16)
   42388:	00407a40 	call	407a4 <__sfp_lock_acquire>
   4238c:	8000030d 	sth	zero,12(r16)
   42390:	00407a80 	call	407a8 <__sfp_lock_release>
   42394:	003fdc06 	br	42308 <_fclose_r+0x38>
   42398:	00407940 	call	40794 <__sinit>
   4239c:	8080030f 	ldh	r2,12(r16)
   423a0:	103fd826 	beq	r2,zero,42304 <_fclose_r+0x34>
   423a4:	003fdf06 	br	42324 <_fclose_r+0x54>
   423a8:	8080030b 	ldhu	r2,12(r16)
   423ac:	04bfffc4 	movi	r18,-1
   423b0:	1080200c 	andi	r2,r2,128
   423b4:	103fe826 	beq	r2,zero,42358 <_fclose_r+0x88>
   423b8:	81400417 	ldw	r5,16(r16)
   423bc:	8809883a 	mov	r4,r17
   423c0:	00428000 	call	42800 <_free_r>
   423c4:	003fe406 	br	42358 <_fclose_r+0x88>

000423c8 <fclose>:
   423c8:	00800134 	movhi	r2,4
   423cc:	200b883a 	mov	r5,r4
   423d0:	111c3217 	ldw	r4,28872(r2)
   423d4:	00422d01 	jmpi	422d0 <_fclose_r>

000423d8 <__sflush_r>:
   423d8:	2880030b 	ldhu	r2,12(r5)
   423dc:	defffb04 	addi	sp,sp,-20
   423e0:	dcc00315 	stw	r19,12(sp)
   423e4:	dc000015 	stw	r16,0(sp)
   423e8:	dfc00415 	stw	ra,16(sp)
   423ec:	dc800215 	stw	r18,8(sp)
   423f0:	dc400115 	stw	r17,4(sp)
   423f4:	10c0020c 	andi	r3,r2,8
   423f8:	2821883a 	mov	r16,r5
   423fc:	2027883a 	mov	r19,r4
   42400:	18003f1e 	bne	r3,zero,42500 <__sflush_r+0x128>
   42404:	28c00117 	ldw	r3,4(r5)
   42408:	10820014 	ori	r2,r2,2048
   4240c:	2880030d 	sth	r2,12(r5)
   42410:	00c0550e 	bge	zero,r3,42568 <__sflush_r+0x190>
   42414:	82000a17 	ldw	r8,40(r16)
   42418:	40003126 	beq	r8,zero,424e0 <__sflush_r+0x108>
   4241c:	9c400017 	ldw	r17,0(r19)
   42420:	1104000c 	andi	r4,r2,4096
   42424:	98000015 	stw	zero,0(r19)
   42428:	81400717 	ldw	r5,28(r16)
   4242c:	1007883a 	mov	r3,r2
   42430:	2000521e 	bne	r4,zero,4257c <__sflush_r+0x1a4>
   42434:	01c00044 	movi	r7,1
   42438:	000d883a 	mov	r6,zero
   4243c:	9809883a 	mov	r4,r19
   42440:	403ee83a 	callr	r8
   42444:	10ffffd8 	cmpnei	r3,r2,-1
   42448:	18005826 	beq	r3,zero,425ac <__sflush_r+0x1d4>
   4244c:	80c0030b 	ldhu	r3,12(r16)
   42450:	82000a17 	ldw	r8,40(r16)
   42454:	18c0010c 	andi	r3,r3,4
   42458:	18000626 	beq	r3,zero,42474 <__sflush_r+0x9c>
   4245c:	81000117 	ldw	r4,4(r16)
   42460:	80c00c17 	ldw	r3,48(r16)
   42464:	1105c83a 	sub	r2,r2,r4
   42468:	18000226 	beq	r3,zero,42474 <__sflush_r+0x9c>
   4246c:	80c00f17 	ldw	r3,60(r16)
   42470:	10c5c83a 	sub	r2,r2,r3
   42474:	81400717 	ldw	r5,28(r16)
   42478:	100d883a 	mov	r6,r2
   4247c:	000f883a 	mov	r7,zero
   42480:	9809883a 	mov	r4,r19
   42484:	403ee83a 	callr	r8
   42488:	10ffffd8 	cmpnei	r3,r2,-1
   4248c:	18003d1e 	bne	r3,zero,42584 <__sflush_r+0x1ac>
   42490:	99000017 	ldw	r4,0(r19)
   42494:	80c0030b 	ldhu	r3,12(r16)
   42498:	20004e26 	beq	r4,zero,425d4 <__sflush_r+0x1fc>
   4249c:	21400760 	cmpeqi	r5,r4,29
   424a0:	2800021e 	bne	r5,zero,424ac <__sflush_r+0xd4>
   424a4:	210005a0 	cmpeqi	r4,r4,22
   424a8:	20002c26 	beq	r4,zero,4255c <__sflush_r+0x184>
   424ac:	80800417 	ldw	r2,16(r16)
   424b0:	18fdffcc 	andi	r3,r3,63487
   424b4:	80c0030d 	sth	r3,12(r16)
   424b8:	80000115 	stw	zero,4(r16)
   424bc:	80800015 	stw	r2,0(r16)
   424c0:	81400c17 	ldw	r5,48(r16)
   424c4:	9c400015 	stw	r17,0(r19)
   424c8:	28000526 	beq	r5,zero,424e0 <__sflush_r+0x108>
   424cc:	80801004 	addi	r2,r16,64
   424d0:	28800226 	beq	r5,r2,424dc <__sflush_r+0x104>
   424d4:	9809883a 	mov	r4,r19
   424d8:	00428000 	call	42800 <_free_r>
   424dc:	80000c15 	stw	zero,48(r16)
   424e0:	0005883a 	mov	r2,zero
   424e4:	dfc00417 	ldw	ra,16(sp)
   424e8:	dcc00317 	ldw	r19,12(sp)
   424ec:	dc800217 	ldw	r18,8(sp)
   424f0:	dc400117 	ldw	r17,4(sp)
   424f4:	dc000017 	ldw	r16,0(sp)
   424f8:	dec00504 	addi	sp,sp,20
   424fc:	f800283a 	ret
   42500:	2c800417 	ldw	r18,16(r5)
   42504:	903ff626 	beq	r18,zero,424e0 <__sflush_r+0x108>
   42508:	2c400017 	ldw	r17,0(r5)
   4250c:	108000cc 	andi	r2,r2,3
   42510:	2c800015 	stw	r18,0(r5)
   42514:	8ca3c83a 	sub	r17,r17,r18
   42518:	1000161e 	bne	r2,zero,42574 <__sflush_r+0x19c>
   4251c:	28800517 	ldw	r2,20(r5)
   42520:	80800215 	stw	r2,8(r16)
   42524:	04400316 	blt	zero,r17,42534 <__sflush_r+0x15c>
   42528:	003fed06 	br	424e0 <__sflush_r+0x108>
   4252c:	90a5883a 	add	r18,r18,r2
   42530:	047feb0e 	bge	zero,r17,424e0 <__sflush_r+0x108>
   42534:	80800917 	ldw	r2,36(r16)
   42538:	81400717 	ldw	r5,28(r16)
   4253c:	880f883a 	mov	r7,r17
   42540:	900d883a 	mov	r6,r18
   42544:	9809883a 	mov	r4,r19
   42548:	103ee83a 	callr	r2
   4254c:	88a3c83a 	sub	r17,r17,r2
   42550:	00bff616 	blt	zero,r2,4252c <__sflush_r+0x154>
   42554:	80c0030b 	ldhu	r3,12(r16)
   42558:	00bfffc4 	movi	r2,-1
   4255c:	18c01014 	ori	r3,r3,64
   42560:	80c0030d 	sth	r3,12(r16)
   42564:	003fdf06 	br	424e4 <__sflush_r+0x10c>
   42568:	28c00f17 	ldw	r3,60(r5)
   4256c:	00ffa916 	blt	zero,r3,42414 <__sflush_r+0x3c>
   42570:	003fdb06 	br	424e0 <__sflush_r+0x108>
   42574:	0005883a 	mov	r2,zero
   42578:	003fe906 	br	42520 <__sflush_r+0x148>
   4257c:	80801417 	ldw	r2,80(r16)
   42580:	003fb406 	br	42454 <__sflush_r+0x7c>
   42584:	80c0030b 	ldhu	r3,12(r16)
   42588:	81000417 	ldw	r4,16(r16)
   4258c:	80000115 	stw	zero,4(r16)
   42590:	197dffcc 	andi	r5,r3,63487
   42594:	8140030d 	sth	r5,12(r16)
   42598:	81000015 	stw	r4,0(r16)
   4259c:	18c4000c 	andi	r3,r3,4096
   425a0:	183fc726 	beq	r3,zero,424c0 <__sflush_r+0xe8>
   425a4:	80801415 	stw	r2,80(r16)
   425a8:	003fc506 	br	424c0 <__sflush_r+0xe8>
   425ac:	98c00017 	ldw	r3,0(r19)
   425b0:	183fa626 	beq	r3,zero,4244c <__sflush_r+0x74>
   425b4:	19000760 	cmpeqi	r4,r3,29
   425b8:	20000e1e 	bne	r4,zero,425f4 <__sflush_r+0x21c>
   425bc:	18c00598 	cmpnei	r3,r3,22
   425c0:	18000c26 	beq	r3,zero,425f4 <__sflush_r+0x21c>
   425c4:	80c0030b 	ldhu	r3,12(r16)
   425c8:	18c01014 	ori	r3,r3,64
   425cc:	80c0030d 	sth	r3,12(r16)
   425d0:	003fc406 	br	424e4 <__sflush_r+0x10c>
   425d4:	81000417 	ldw	r4,16(r16)
   425d8:	197dffcc 	andi	r5,r3,63487
   425dc:	8140030d 	sth	r5,12(r16)
   425e0:	80000115 	stw	zero,4(r16)
   425e4:	81000015 	stw	r4,0(r16)
   425e8:	18c4000c 	andi	r3,r3,4096
   425ec:	183fb426 	beq	r3,zero,424c0 <__sflush_r+0xe8>
   425f0:	003fec06 	br	425a4 <__sflush_r+0x1cc>
   425f4:	9c400015 	stw	r17,0(r19)
   425f8:	0005883a 	mov	r2,zero
   425fc:	003fb906 	br	424e4 <__sflush_r+0x10c>

00042600 <_fflush_r>:
   42600:	defffd04 	addi	sp,sp,-12
   42604:	dc000115 	stw	r16,4(sp)
   42608:	dfc00215 	stw	ra,8(sp)
   4260c:	2021883a 	mov	r16,r4
   42610:	20000226 	beq	r4,zero,4261c <_fflush_r+0x1c>
   42614:	20800e17 	ldw	r2,56(r4)
   42618:	10000726 	beq	r2,zero,42638 <_fflush_r+0x38>
   4261c:	2880030f 	ldh	r2,12(r5)
   42620:	10000a1e 	bne	r2,zero,4264c <_fflush_r+0x4c>
   42624:	0005883a 	mov	r2,zero
   42628:	dfc00217 	ldw	ra,8(sp)
   4262c:	dc000117 	ldw	r16,4(sp)
   42630:	dec00304 	addi	sp,sp,12
   42634:	f800283a 	ret
   42638:	d9400015 	stw	r5,0(sp)
   4263c:	00407940 	call	40794 <__sinit>
   42640:	d9400017 	ldw	r5,0(sp)
   42644:	2880030f 	ldh	r2,12(r5)
   42648:	103ff626 	beq	r2,zero,42624 <_fflush_r+0x24>
   4264c:	8009883a 	mov	r4,r16
   42650:	dfc00217 	ldw	ra,8(sp)
   42654:	dc000117 	ldw	r16,4(sp)
   42658:	dec00304 	addi	sp,sp,12
   4265c:	00423d81 	jmpi	423d8 <__sflush_r>

00042660 <fflush>:
   42660:	20001726 	beq	r4,zero,426c0 <fflush+0x60>
   42664:	00800134 	movhi	r2,4
   42668:	200b883a 	mov	r5,r4
   4266c:	111c3217 	ldw	r4,28872(r2)
   42670:	20000226 	beq	r4,zero,4267c <fflush+0x1c>
   42674:	20800e17 	ldw	r2,56(r4)
   42678:	10000526 	beq	r2,zero,42690 <fflush+0x30>
   4267c:	2880030f 	ldh	r2,12(r5)
   42680:	1000021e 	bne	r2,zero,4268c <fflush+0x2c>
   42684:	0005883a 	mov	r2,zero
   42688:	f800283a 	ret
   4268c:	00423d81 	jmpi	423d8 <__sflush_r>
   42690:	defffd04 	addi	sp,sp,-12
   42694:	d9400115 	stw	r5,4(sp)
   42698:	d9000015 	stw	r4,0(sp)
   4269c:	dfc00215 	stw	ra,8(sp)
   426a0:	00407940 	call	40794 <__sinit>
   426a4:	d9400117 	ldw	r5,4(sp)
   426a8:	d9000017 	ldw	r4,0(sp)
   426ac:	2880030f 	ldh	r2,12(r5)
   426b0:	10000826 	beq	r2,zero,426d4 <fflush+0x74>
   426b4:	dfc00217 	ldw	ra,8(sp)
   426b8:	dec00304 	addi	sp,sp,12
   426bc:	00423d81 	jmpi	423d8 <__sflush_r>
   426c0:	00800134 	movhi	r2,4
   426c4:	111c3117 	ldw	r4,28868(r2)
   426c8:	01400134 	movhi	r5,4
   426cc:	29498004 	addi	r5,r5,9728
   426d0:	0040d301 	jmpi	40d30 <_fwalk_reent>
   426d4:	0005883a 	mov	r2,zero
   426d8:	dfc00217 	ldw	ra,8(sp)
   426dc:	dec00304 	addi	sp,sp,12
   426e0:	f800283a 	ret

000426e4 <_malloc_trim_r>:
   426e4:	defffb04 	addi	sp,sp,-20
   426e8:	dcc00315 	stw	r19,12(sp)
   426ec:	04c00134 	movhi	r19,4
   426f0:	dc800215 	stw	r18,8(sp)
   426f4:	dc400115 	stw	r17,4(sp)
   426f8:	dc000015 	stw	r16,0(sp)
   426fc:	dfc00415 	stw	ra,16(sp)
   42700:	2821883a 	mov	r16,r5
   42704:	9cd6ad04 	addi	r19,r19,23220
   42708:	2025883a 	mov	r18,r4
   4270c:	00435ec0 	call	435ec <__malloc_lock>
   42710:	98800217 	ldw	r2,8(r19)
   42714:	14400117 	ldw	r17,4(r2)
   42718:	00bfff04 	movi	r2,-4
   4271c:	88a2703a 	and	r17,r17,r2
   42720:	8c21c83a 	sub	r16,r17,r16
   42724:	8403fbc4 	addi	r16,r16,4079
   42728:	8020d33a 	srli	r16,r16,12
   4272c:	843fffc4 	addi	r16,r16,-1
   42730:	8020933a 	slli	r16,r16,12
   42734:	80840008 	cmpgei	r2,r16,4096
   42738:	10000626 	beq	r2,zero,42754 <_malloc_trim_r+0x70>
   4273c:	000b883a 	mov	r5,zero
   42740:	9009883a 	mov	r4,r18
   42744:	0041f180 	call	41f18 <_sbrk_r>
   42748:	98c00217 	ldw	r3,8(r19)
   4274c:	1c47883a 	add	r3,r3,r17
   42750:	10c00a26 	beq	r2,r3,4277c <_malloc_trim_r+0x98>
   42754:	9009883a 	mov	r4,r18
   42758:	00436100 	call	43610 <__malloc_unlock>
   4275c:	0005883a 	mov	r2,zero
   42760:	dfc00417 	ldw	ra,16(sp)
   42764:	dcc00317 	ldw	r19,12(sp)
   42768:	dc800217 	ldw	r18,8(sp)
   4276c:	dc400117 	ldw	r17,4(sp)
   42770:	dc000017 	ldw	r16,0(sp)
   42774:	dec00504 	addi	sp,sp,20
   42778:	f800283a 	ret
   4277c:	040bc83a 	sub	r5,zero,r16
   42780:	9009883a 	mov	r4,r18
   42784:	0041f180 	call	41f18 <_sbrk_r>
   42788:	10bfffd8 	cmpnei	r2,r2,-1
   4278c:	10000d26 	beq	r2,zero,427c4 <_malloc_trim_r+0xe0>
   42790:	00800174 	movhi	r2,5
   42794:	10a2e617 	ldw	r2,-29800(r2)
   42798:	98c00217 	ldw	r3,8(r19)
   4279c:	8c23c83a 	sub	r17,r17,r16
   427a0:	8c400054 	ori	r17,r17,1
   427a4:	1405c83a 	sub	r2,r2,r16
   427a8:	1c400115 	stw	r17,4(r3)
   427ac:	9009883a 	mov	r4,r18
   427b0:	00c00174 	movhi	r3,5
   427b4:	18a2e615 	stw	r2,-29800(r3)
   427b8:	00436100 	call	43610 <__malloc_unlock>
   427bc:	00800044 	movi	r2,1
   427c0:	003fe706 	br	42760 <_malloc_trim_r+0x7c>
   427c4:	000b883a 	mov	r5,zero
   427c8:	9009883a 	mov	r4,r18
   427cc:	0041f180 	call	41f18 <_sbrk_r>
   427d0:	99000217 	ldw	r4,8(r19)
   427d4:	1107c83a 	sub	r3,r2,r4
   427d8:	19400410 	cmplti	r5,r3,16
   427dc:	283fdd1e 	bne	r5,zero,42754 <_malloc_trim_r+0x70>
   427e0:	01400134 	movhi	r5,4
   427e4:	295c3317 	ldw	r5,28876(r5)
   427e8:	18c00054 	ori	r3,r3,1
   427ec:	20c00115 	stw	r3,4(r4)
   427f0:	1145c83a 	sub	r2,r2,r5
   427f4:	01400174 	movhi	r5,5
   427f8:	28a2e615 	stw	r2,-29800(r5)
   427fc:	003fd506 	br	42754 <_malloc_trim_r+0x70>

00042800 <_free_r>:
   42800:	28004f26 	beq	r5,zero,42940 <_free_r+0x140>
   42804:	defffd04 	addi	sp,sp,-12
   42808:	dc400115 	stw	r17,4(sp)
   4280c:	dc000015 	stw	r16,0(sp)
   42810:	2023883a 	mov	r17,r4
   42814:	2821883a 	mov	r16,r5
   42818:	dfc00215 	stw	ra,8(sp)
   4281c:	00435ec0 	call	435ec <__malloc_lock>
   42820:	81ffff17 	ldw	r7,-4(r16)
   42824:	00bfff84 	movi	r2,-2
   42828:	80fffe04 	addi	r3,r16,-8
   4282c:	3884703a 	and	r2,r7,r2
   42830:	01000134 	movhi	r4,4
   42834:	188d883a 	add	r6,r3,r2
   42838:	2116ad04 	addi	r4,r4,23220
   4283c:	31400117 	ldw	r5,4(r6)
   42840:	22000217 	ldw	r8,8(r4)
   42844:	027fff04 	movi	r9,-4
   42848:	2a4a703a 	and	r5,r5,r9
   4284c:	41806426 	beq	r8,r6,429e0 <_free_r+0x1e0>
   42850:	31400115 	stw	r5,4(r6)
   42854:	39c0004c 	andi	r7,r7,1
   42858:	3151883a 	add	r8,r6,r5
   4285c:	3800281e 	bne	r7,zero,42900 <_free_r+0x100>
   42860:	82bffe17 	ldw	r10,-8(r16)
   42864:	42000117 	ldw	r8,4(r8)
   42868:	01c00134 	movhi	r7,4
   4286c:	1a87c83a 	sub	r3,r3,r10
   42870:	1a400217 	ldw	r9,8(r3)
   42874:	39d6af04 	addi	r7,r7,23228
   42878:	1285883a 	add	r2,r2,r10
   4287c:	4200004c 	andi	r8,r8,1
   42880:	49c04c26 	beq	r9,r7,429b4 <_free_r+0x1b4>
   42884:	1a800317 	ldw	r10,12(r3)
   42888:	4a800315 	stw	r10,12(r9)
   4288c:	52400215 	stw	r9,8(r10)
   42890:	40007126 	beq	r8,zero,42a58 <_free_r+0x258>
   42894:	11400054 	ori	r5,r2,1
   42898:	19400115 	stw	r5,4(r3)
   4289c:	30800015 	stw	r2,0(r6)
   428a0:	11408028 	cmpgeui	r5,r2,512
   428a4:	28002c1e 	bne	r5,zero,42958 <_free_r+0x158>
   428a8:	100ad0fa 	srli	r5,r2,3
   428ac:	100cd17a 	srli	r6,r2,5
   428b0:	21c00117 	ldw	r7,4(r4)
   428b4:	28800044 	addi	r2,r5,1
   428b8:	100490fa 	slli	r2,r2,3
   428bc:	01400044 	movi	r5,1
   428c0:	298a983a 	sll	r5,r5,r6
   428c4:	2085883a 	add	r2,r4,r2
   428c8:	11800017 	ldw	r6,0(r2)
   428cc:	29cab03a 	or	r5,r5,r7
   428d0:	11fffe04 	addi	r7,r2,-8
   428d4:	19c00315 	stw	r7,12(r3)
   428d8:	19800215 	stw	r6,8(r3)
   428dc:	21400115 	stw	r5,4(r4)
   428e0:	10c00015 	stw	r3,0(r2)
   428e4:	30c00315 	stw	r3,12(r6)
   428e8:	8809883a 	mov	r4,r17
   428ec:	dfc00217 	ldw	ra,8(sp)
   428f0:	dc400117 	ldw	r17,4(sp)
   428f4:	dc000017 	ldw	r16,0(sp)
   428f8:	dec00304 	addi	sp,sp,12
   428fc:	00436101 	jmpi	43610 <__malloc_unlock>
   42900:	41c00117 	ldw	r7,4(r8)
   42904:	39c0004c 	andi	r7,r7,1
   42908:	38000e1e 	bne	r7,zero,42944 <_free_r+0x144>
   4290c:	01c00134 	movhi	r7,4
   42910:	1145883a 	add	r2,r2,r5
   42914:	39d6af04 	addi	r7,r7,23228
   42918:	31400217 	ldw	r5,8(r6)
   4291c:	12400054 	ori	r9,r2,1
   42920:	1891883a 	add	r8,r3,r2
   42924:	29c05226 	beq	r5,r7,42a70 <_free_r+0x270>
   42928:	31800317 	ldw	r6,12(r6)
   4292c:	29800315 	stw	r6,12(r5)
   42930:	31400215 	stw	r5,8(r6)
   42934:	1a400115 	stw	r9,4(r3)
   42938:	40800015 	stw	r2,0(r8)
   4293c:	003fd806 	br	428a0 <_free_r+0xa0>
   42940:	f800283a 	ret
   42944:	11400054 	ori	r5,r2,1
   42948:	817fff15 	stw	r5,-4(r16)
   4294c:	30800015 	stw	r2,0(r6)
   42950:	11408028 	cmpgeui	r5,r2,512
   42954:	283fd426 	beq	r5,zero,428a8 <_free_r+0xa8>
   42958:	100ad27a 	srli	r5,r2,9
   4295c:	29800168 	cmpgeui	r6,r5,5
   42960:	3000341e 	bne	r6,zero,42a34 <_free_r+0x234>
   42964:	100ad1ba 	srli	r5,r2,6
   42968:	29800e44 	addi	r6,r5,57
   4296c:	300c90fa 	slli	r6,r6,3
   42970:	29c00e04 	addi	r7,r5,56
   42974:	218d883a 	add	r6,r4,r6
   42978:	31400017 	ldw	r5,0(r6)
   4297c:	31bffe04 	addi	r6,r6,-8
   42980:	31404226 	beq	r6,r5,42a8c <_free_r+0x28c>
   42984:	01ffff04 	movi	r7,-4
   42988:	29000117 	ldw	r4,4(r5)
   4298c:	21c8703a 	and	r4,r4,r7
   42990:	1100022e 	bgeu	r2,r4,4299c <_free_r+0x19c>
   42994:	29400217 	ldw	r5,8(r5)
   42998:	317ffb1e 	bne	r6,r5,42988 <_free_r+0x188>
   4299c:	29800317 	ldw	r6,12(r5)
   429a0:	19800315 	stw	r6,12(r3)
   429a4:	19400215 	stw	r5,8(r3)
   429a8:	30c00215 	stw	r3,8(r6)
   429ac:	28c00315 	stw	r3,12(r5)
   429b0:	003fcd06 	br	428e8 <_free_r+0xe8>
   429b4:	40004d1e 	bne	r8,zero,42aec <_free_r+0x2ec>
   429b8:	31000317 	ldw	r4,12(r6)
   429bc:	31800217 	ldw	r6,8(r6)
   429c0:	288b883a 	add	r5,r5,r2
   429c4:	28800054 	ori	r2,r5,1
   429c8:	31000315 	stw	r4,12(r6)
   429cc:	21800215 	stw	r6,8(r4)
   429d0:	18800115 	stw	r2,4(r3)
   429d4:	1947883a 	add	r3,r3,r5
   429d8:	19400015 	stw	r5,0(r3)
   429dc:	003fc206 	br	428e8 <_free_r+0xe8>
   429e0:	39c0004c 	andi	r7,r7,1
   429e4:	114b883a 	add	r5,r2,r5
   429e8:	3800071e 	bne	r7,zero,42a08 <_free_r+0x208>
   429ec:	81fffe17 	ldw	r7,-8(r16)
   429f0:	19c7c83a 	sub	r3,r3,r7
   429f4:	18800317 	ldw	r2,12(r3)
   429f8:	19800217 	ldw	r6,8(r3)
   429fc:	29cb883a 	add	r5,r5,r7
   42a00:	30800315 	stw	r2,12(r6)
   42a04:	11800215 	stw	r6,8(r2)
   42a08:	00800134 	movhi	r2,4
   42a0c:	29800054 	ori	r6,r5,1
   42a10:	109c3417 	ldw	r2,28880(r2)
   42a14:	19800115 	stw	r6,4(r3)
   42a18:	20c00215 	stw	r3,8(r4)
   42a1c:	28bfb236 	bltu	r5,r2,428e8 <_free_r+0xe8>
   42a20:	00800174 	movhi	r2,5
   42a24:	1162dc17 	ldw	r5,-29840(r2)
   42a28:	8809883a 	mov	r4,r17
   42a2c:	00426e40 	call	426e4 <_malloc_trim_r>
   42a30:	003fad06 	br	428e8 <_free_r+0xe8>
   42a34:	29800568 	cmpgeui	r6,r5,21
   42a38:	30000926 	beq	r6,zero,42a60 <_free_r+0x260>
   42a3c:	29801568 	cmpgeui	r6,r5,85
   42a40:	3000191e 	bne	r6,zero,42aa8 <_free_r+0x2a8>
   42a44:	100ad33a 	srli	r5,r2,12
   42a48:	29801bc4 	addi	r6,r5,111
   42a4c:	300c90fa 	slli	r6,r6,3
   42a50:	29c01b84 	addi	r7,r5,110
   42a54:	003fc706 	br	42974 <_free_r+0x174>
   42a58:	1145883a 	add	r2,r2,r5
   42a5c:	003fae06 	br	42918 <_free_r+0x118>
   42a60:	29801704 	addi	r6,r5,92
   42a64:	300c90fa 	slli	r6,r6,3
   42a68:	29c016c4 	addi	r7,r5,91
   42a6c:	003fc106 	br	42974 <_free_r+0x174>
   42a70:	20c00515 	stw	r3,20(r4)
   42a74:	20c00415 	stw	r3,16(r4)
   42a78:	19c00315 	stw	r7,12(r3)
   42a7c:	19c00215 	stw	r7,8(r3)
   42a80:	1a400115 	stw	r9,4(r3)
   42a84:	40800015 	stw	r2,0(r8)
   42a88:	003f9706 	br	428e8 <_free_r+0xe8>
   42a8c:	380fd0ba 	srai	r7,r7,2
   42a90:	00800044 	movi	r2,1
   42a94:	22000117 	ldw	r8,4(r4)
   42a98:	11c4983a 	sll	r2,r2,r7
   42a9c:	1204b03a 	or	r2,r2,r8
   42aa0:	20800115 	stw	r2,4(r4)
   42aa4:	003fbe06 	br	429a0 <_free_r+0x1a0>
   42aa8:	29805568 	cmpgeui	r6,r5,341
   42aac:	3000051e 	bne	r6,zero,42ac4 <_free_r+0x2c4>
   42ab0:	100ad3fa 	srli	r5,r2,15
   42ab4:	29801e04 	addi	r6,r5,120
   42ab8:	300c90fa 	slli	r6,r6,3
   42abc:	29c01dc4 	addi	r7,r5,119
   42ac0:	003fac06 	br	42974 <_free_r+0x174>
   42ac4:	29415568 	cmpgeui	r5,r5,1365
   42ac8:	2800051e 	bne	r5,zero,42ae0 <_free_r+0x2e0>
   42acc:	100ad4ba 	srli	r5,r2,18
   42ad0:	29801f44 	addi	r6,r5,125
   42ad4:	300c90fa 	slli	r6,r6,3
   42ad8:	29c01f04 	addi	r7,r5,124
   42adc:	003fa506 	br	42974 <_free_r+0x174>
   42ae0:	0180fe04 	movi	r6,1016
   42ae4:	01c01f84 	movi	r7,126
   42ae8:	003fa206 	br	42974 <_free_r+0x174>
   42aec:	11000054 	ori	r4,r2,1
   42af0:	19000115 	stw	r4,4(r3)
   42af4:	30800015 	stw	r2,0(r6)
   42af8:	003f7b06 	br	428e8 <_free_r+0xe8>

00042afc <_lseek_r>:
   42afc:	2807883a 	mov	r3,r5
   42b00:	defffe04 	addi	sp,sp,-8
   42b04:	dc000015 	stw	r16,0(sp)
   42b08:	300b883a 	mov	r5,r6
   42b0c:	00800174 	movhi	r2,5
   42b10:	380d883a 	mov	r6,r7
   42b14:	2021883a 	mov	r16,r4
   42b18:	1809883a 	mov	r4,r3
   42b1c:	dfc00115 	stw	ra,4(sp)
   42b20:	1022dd15 	stw	zero,-29836(r2)
   42b24:	004349c0 	call	4349c <lseek>
   42b28:	10ffffd8 	cmpnei	r3,r2,-1
   42b2c:	18000426 	beq	r3,zero,42b40 <_lseek_r+0x44>
   42b30:	dfc00117 	ldw	ra,4(sp)
   42b34:	dc000017 	ldw	r16,0(sp)
   42b38:	dec00204 	addi	sp,sp,8
   42b3c:	f800283a 	ret
   42b40:	00c00174 	movhi	r3,5
   42b44:	18e2dd17 	ldw	r3,-29836(r3)
   42b48:	183ff926 	beq	r3,zero,42b30 <_lseek_r+0x34>
   42b4c:	80c00015 	stw	r3,0(r16)
   42b50:	dfc00117 	ldw	ra,4(sp)
   42b54:	dc000017 	ldw	r16,0(sp)
   42b58:	dec00204 	addi	sp,sp,8
   42b5c:	f800283a 	ret

00042b60 <__smakebuf_r>:
   42b60:	2880030b 	ldhu	r2,12(r5)
   42b64:	deffe804 	addi	sp,sp,-96
   42b68:	dc001215 	stw	r16,72(sp)
   42b6c:	dfc01715 	stw	ra,92(sp)
   42b70:	dd001615 	stw	r20,88(sp)
   42b74:	dcc01515 	stw	r19,84(sp)
   42b78:	dc801415 	stw	r18,80(sp)
   42b7c:	dc401315 	stw	r17,76(sp)
   42b80:	10c0008c 	andi	r3,r2,2
   42b84:	2821883a 	mov	r16,r5
   42b88:	18000d26 	beq	r3,zero,42bc0 <__smakebuf_r+0x60>
   42b8c:	288010c4 	addi	r2,r5,67
   42b90:	28800015 	stw	r2,0(r5)
   42b94:	28800415 	stw	r2,16(r5)
   42b98:	00800044 	movi	r2,1
   42b9c:	28800515 	stw	r2,20(r5)
   42ba0:	dfc01717 	ldw	ra,92(sp)
   42ba4:	dd001617 	ldw	r20,88(sp)
   42ba8:	dcc01517 	ldw	r19,84(sp)
   42bac:	dc801417 	ldw	r18,80(sp)
   42bb0:	dc401317 	ldw	r17,76(sp)
   42bb4:	dc001217 	ldw	r16,72(sp)
   42bb8:	dec01804 	addi	sp,sp,96
   42bbc:	f800283a 	ret
   42bc0:	2940038f 	ldh	r5,14(r5)
   42bc4:	2023883a 	mov	r17,r4
   42bc8:	28002816 	blt	r5,zero,42c6c <__smakebuf_r+0x10c>
   42bcc:	d80d883a 	mov	r6,sp
   42bd0:	0042e040 	call	42e04 <_fstat_r>
   42bd4:	10002416 	blt	r2,zero,42c68 <__smakebuf_r+0x108>
   42bd8:	d8800117 	ldw	r2,4(sp)
   42bdc:	10bc000c 	andi	r2,r2,61440
   42be0:	10880018 	cmpnei	r2,r2,8192
   42be4:	1000461e 	bne	r2,zero,42d00 <__smakebuf_r+0x1a0>
   42be8:	8140038f 	ldh	r5,14(r16)
   42bec:	8809883a 	mov	r4,r17
   42bf0:	0042e640 	call	42e64 <_isatty_r>
   42bf4:	10003e26 	beq	r2,zero,42cf0 <__smakebuf_r+0x190>
   42bf8:	8080030b 	ldhu	r2,12(r16)
   42bfc:	80c010c4 	addi	r3,r16,67
   42c00:	80c00015 	stw	r3,0(r16)
   42c04:	10800054 	ori	r2,r2,1
   42c08:	8080030d 	sth	r2,12(r16)
   42c0c:	00800044 	movi	r2,1
   42c10:	80c00415 	stw	r3,16(r16)
   42c14:	80800515 	stw	r2,20(r16)
   42c18:	04c00044 	movi	r19,1
   42c1c:	05010004 	movi	r20,1024
   42c20:	04820004 	movi	r18,2048
   42c24:	a00b883a 	mov	r5,r20
   42c28:	8809883a 	mov	r4,r17
   42c2c:	0040dd80 	call	40dd8 <_malloc_r>
   42c30:	10001726 	beq	r2,zero,42c90 <__smakebuf_r+0x130>
   42c34:	80c0030b 	ldhu	r3,12(r16)
   42c38:	01000134 	movhi	r4,4
   42c3c:	21011804 	addi	r4,r4,1120
   42c40:	89000f15 	stw	r4,60(r17)
   42c44:	18c02014 	ori	r3,r3,128
   42c48:	80c0030d 	sth	r3,12(r16)
   42c4c:	80800015 	stw	r2,0(r16)
   42c50:	80800415 	stw	r2,16(r16)
   42c54:	85000515 	stw	r20,20(r16)
   42c58:	98001d1e 	bne	r19,zero,42cd0 <__smakebuf_r+0x170>
   42c5c:	90e4b03a 	or	r18,r18,r3
   42c60:	8480030d 	sth	r18,12(r16)
   42c64:	003fce06 	br	42ba0 <__smakebuf_r+0x40>
   42c68:	8080030b 	ldhu	r2,12(r16)
   42c6c:	1080200c 	andi	r2,r2,128
   42c70:	0027883a 	mov	r19,zero
   42c74:	10001326 	beq	r2,zero,42cc4 <__smakebuf_r+0x164>
   42c78:	05001004 	movi	r20,64
   42c7c:	a00b883a 	mov	r5,r20
   42c80:	8809883a 	mov	r4,r17
   42c84:	0025883a 	mov	r18,zero
   42c88:	0040dd80 	call	40dd8 <_malloc_r>
   42c8c:	103fe91e 	bne	r2,zero,42c34 <__smakebuf_r+0xd4>
   42c90:	8080030b 	ldhu	r2,12(r16)
   42c94:	10c0800c 	andi	r3,r2,512
   42c98:	183fc11e 	bne	r3,zero,42ba0 <__smakebuf_r+0x40>
   42c9c:	00ffff04 	movi	r3,-4
   42ca0:	10c4703a 	and	r2,r2,r3
   42ca4:	10800094 	ori	r2,r2,2
   42ca8:	80c010c4 	addi	r3,r16,67
   42cac:	8080030d 	sth	r2,12(r16)
   42cb0:	00800044 	movi	r2,1
   42cb4:	80c00015 	stw	r3,0(r16)
   42cb8:	80c00415 	stw	r3,16(r16)
   42cbc:	80800515 	stw	r2,20(r16)
   42cc0:	003fb706 	br	42ba0 <__smakebuf_r+0x40>
   42cc4:	05010004 	movi	r20,1024
   42cc8:	0025883a 	mov	r18,zero
   42ccc:	003fd506 	br	42c24 <__smakebuf_r+0xc4>
   42cd0:	8140038f 	ldh	r5,14(r16)
   42cd4:	8809883a 	mov	r4,r17
   42cd8:	0042e640 	call	42e64 <_isatty_r>
   42cdc:	80c0030b 	ldhu	r3,12(r16)
   42ce0:	103fde26 	beq	r2,zero,42c5c <__smakebuf_r+0xfc>
   42ce4:	18ffff0c 	andi	r3,r3,65532
   42ce8:	18c00054 	ori	r3,r3,1
   42cec:	003fdb06 	br	42c5c <__smakebuf_r+0xfc>
   42cf0:	04c00044 	movi	r19,1
   42cf4:	05010004 	movi	r20,1024
   42cf8:	04820004 	movi	r18,2048
   42cfc:	003fc906 	br	42c24 <__smakebuf_r+0xc4>
   42d00:	0027883a 	mov	r19,zero
   42d04:	05010004 	movi	r20,1024
   42d08:	04820004 	movi	r18,2048
   42d0c:	003fc506 	br	42c24 <__smakebuf_r+0xc4>

00042d10 <__swhatbuf_r>:
   42d10:	deffea04 	addi	sp,sp,-88
   42d14:	dc001215 	stw	r16,72(sp)
   42d18:	2821883a 	mov	r16,r5
   42d1c:	2940038f 	ldh	r5,14(r5)
   42d20:	dc801415 	stw	r18,80(sp)
   42d24:	dc401315 	stw	r17,76(sp)
   42d28:	dfc01515 	stw	ra,84(sp)
   42d2c:	3023883a 	mov	r17,r6
   42d30:	3825883a 	mov	r18,r7
   42d34:	28001016 	blt	r5,zero,42d78 <__swhatbuf_r+0x68>
   42d38:	d80d883a 	mov	r6,sp
   42d3c:	0042e040 	call	42e04 <_fstat_r>
   42d40:	10000d16 	blt	r2,zero,42d78 <__swhatbuf_r+0x68>
   42d44:	d8c00117 	ldw	r3,4(sp)
   42d48:	01010004 	movi	r4,1024
   42d4c:	00820004 	movi	r2,2048
   42d50:	18fc000c 	andi	r3,r3,61440
   42d54:	18c80020 	cmpeqi	r3,r3,8192
   42d58:	90c00015 	stw	r3,0(r18)
   42d5c:	89000015 	stw	r4,0(r17)
   42d60:	dfc01517 	ldw	ra,84(sp)
   42d64:	dc801417 	ldw	r18,80(sp)
   42d68:	dc401317 	ldw	r17,76(sp)
   42d6c:	dc001217 	ldw	r16,72(sp)
   42d70:	dec01604 	addi	sp,sp,88
   42d74:	f800283a 	ret
   42d78:	8080030b 	ldhu	r2,12(r16)
   42d7c:	0007883a 	mov	r3,zero
   42d80:	1080200c 	andi	r2,r2,128
   42d84:	10000326 	beq	r2,zero,42d94 <__swhatbuf_r+0x84>
   42d88:	01001004 	movi	r4,64
   42d8c:	0005883a 	mov	r2,zero
   42d90:	003ff106 	br	42d58 <__swhatbuf_r+0x48>
   42d94:	01010004 	movi	r4,1024
   42d98:	0005883a 	mov	r2,zero
   42d9c:	003fee06 	br	42d58 <__swhatbuf_r+0x48>

00042da0 <_read_r>:
   42da0:	2807883a 	mov	r3,r5
   42da4:	defffe04 	addi	sp,sp,-8
   42da8:	dc000015 	stw	r16,0(sp)
   42dac:	300b883a 	mov	r5,r6
   42db0:	00800174 	movhi	r2,5
   42db4:	380d883a 	mov	r6,r7
   42db8:	2021883a 	mov	r16,r4
   42dbc:	1809883a 	mov	r4,r3
   42dc0:	dfc00115 	stw	ra,4(sp)
   42dc4:	1022dd15 	stw	zero,-29836(r2)
   42dc8:	00436700 	call	43670 <read>
   42dcc:	10ffffd8 	cmpnei	r3,r2,-1
   42dd0:	18000426 	beq	r3,zero,42de4 <_read_r+0x44>
   42dd4:	dfc00117 	ldw	ra,4(sp)
   42dd8:	dc000017 	ldw	r16,0(sp)
   42ddc:	dec00204 	addi	sp,sp,8
   42de0:	f800283a 	ret
   42de4:	00c00174 	movhi	r3,5
   42de8:	18e2dd17 	ldw	r3,-29836(r3)
   42dec:	183ff926 	beq	r3,zero,42dd4 <_read_r+0x34>
   42df0:	80c00015 	stw	r3,0(r16)
   42df4:	dfc00117 	ldw	ra,4(sp)
   42df8:	dc000017 	ldw	r16,0(sp)
   42dfc:	dec00204 	addi	sp,sp,8
   42e00:	f800283a 	ret

00042e04 <_fstat_r>:
   42e04:	2807883a 	mov	r3,r5
   42e08:	defffe04 	addi	sp,sp,-8
   42e0c:	dc000015 	stw	r16,0(sp)
   42e10:	00800174 	movhi	r2,5
   42e14:	300b883a 	mov	r5,r6
   42e18:	2021883a 	mov	r16,r4
   42e1c:	1809883a 	mov	r4,r3
   42e20:	dfc00115 	stw	ra,4(sp)
   42e24:	1022dd15 	stw	zero,-29836(r2)
   42e28:	00431e40 	call	431e4 <fstat>
   42e2c:	10ffffd8 	cmpnei	r3,r2,-1
   42e30:	18000426 	beq	r3,zero,42e44 <_fstat_r+0x40>
   42e34:	dfc00117 	ldw	ra,4(sp)
   42e38:	dc000017 	ldw	r16,0(sp)
   42e3c:	dec00204 	addi	sp,sp,8
   42e40:	f800283a 	ret
   42e44:	00c00174 	movhi	r3,5
   42e48:	18e2dd17 	ldw	r3,-29836(r3)
   42e4c:	183ff926 	beq	r3,zero,42e34 <_fstat_r+0x30>
   42e50:	80c00015 	stw	r3,0(r16)
   42e54:	dfc00117 	ldw	ra,4(sp)
   42e58:	dc000017 	ldw	r16,0(sp)
   42e5c:	dec00204 	addi	sp,sp,8
   42e60:	f800283a 	ret

00042e64 <_isatty_r>:
   42e64:	defffe04 	addi	sp,sp,-8
   42e68:	dc000015 	stw	r16,0(sp)
   42e6c:	00800174 	movhi	r2,5
   42e70:	2021883a 	mov	r16,r4
   42e74:	2809883a 	mov	r4,r5
   42e78:	dfc00115 	stw	ra,4(sp)
   42e7c:	1022dd15 	stw	zero,-29836(r2)
   42e80:	00432d00 	call	432d0 <isatty>
   42e84:	10ffffd8 	cmpnei	r3,r2,-1
   42e88:	18000426 	beq	r3,zero,42e9c <_isatty_r+0x38>
   42e8c:	dfc00117 	ldw	ra,4(sp)
   42e90:	dc000017 	ldw	r16,0(sp)
   42e94:	dec00204 	addi	sp,sp,8
   42e98:	f800283a 	ret
   42e9c:	00c00174 	movhi	r3,5
   42ea0:	18e2dd17 	ldw	r3,-29836(r3)
   42ea4:	183ff926 	beq	r3,zero,42e8c <_isatty_r+0x28>
   42ea8:	80c00015 	stw	r3,0(r16)
   42eac:	dfc00117 	ldw	ra,4(sp)
   42eb0:	dc000017 	ldw	r16,0(sp)
   42eb4:	dec00204 	addi	sp,sp,8
   42eb8:	f800283a 	ret

00042ebc <__divsi3>:
   42ebc:	20001a16 	blt	r4,zero,42f28 <__divsi3+0x6c>
   42ec0:	000f883a 	mov	r7,zero
   42ec4:	2800020e 	bge	r5,zero,42ed0 <__divsi3+0x14>
   42ec8:	014bc83a 	sub	r5,zero,r5
   42ecc:	39c0005c 	xori	r7,r7,1
   42ed0:	200d883a 	mov	r6,r4
   42ed4:	00c00044 	movi	r3,1
   42ed8:	2900092e 	bgeu	r5,r4,42f00 <__divsi3+0x44>
   42edc:	00800804 	movi	r2,32
   42ee0:	00c00044 	movi	r3,1
   42ee4:	00000106 	br	42eec <__divsi3+0x30>
   42ee8:	10001226 	beq	r2,zero,42f34 <__divsi3+0x78>
   42eec:	294b883a 	add	r5,r5,r5
   42ef0:	10bfffc4 	addi	r2,r2,-1
   42ef4:	18c7883a 	add	r3,r3,r3
   42ef8:	293ffb36 	bltu	r5,r4,42ee8 <__divsi3+0x2c>
   42efc:	18000d26 	beq	r3,zero,42f34 <__divsi3+0x78>
   42f00:	0005883a 	mov	r2,zero
   42f04:	31400236 	bltu	r6,r5,42f10 <__divsi3+0x54>
   42f08:	314dc83a 	sub	r6,r6,r5
   42f0c:	10c4b03a 	or	r2,r2,r3
   42f10:	1806d07a 	srli	r3,r3,1
   42f14:	280ad07a 	srli	r5,r5,1
   42f18:	183ffa1e 	bne	r3,zero,42f04 <__divsi3+0x48>
   42f1c:	38000126 	beq	r7,zero,42f24 <__divsi3+0x68>
   42f20:	0085c83a 	sub	r2,zero,r2
   42f24:	f800283a 	ret
   42f28:	0109c83a 	sub	r4,zero,r4
   42f2c:	01c00044 	movi	r7,1
   42f30:	003fe406 	br	42ec4 <__divsi3+0x8>
   42f34:	0005883a 	mov	r2,zero
   42f38:	003ff806 	br	42f1c <__divsi3+0x60>

00042f3c <__modsi3>:
   42f3c:	20001916 	blt	r4,zero,42fa4 <__modsi3+0x68>
   42f40:	000f883a 	mov	r7,zero
   42f44:	2005883a 	mov	r2,r4
   42f48:	2800010e 	bge	r5,zero,42f50 <__modsi3+0x14>
   42f4c:	014bc83a 	sub	r5,zero,r5
   42f50:	00c00044 	movi	r3,1
   42f54:	2900092e 	bgeu	r5,r4,42f7c <__modsi3+0x40>
   42f58:	01800804 	movi	r6,32
   42f5c:	00c00044 	movi	r3,1
   42f60:	00000106 	br	42f68 <__modsi3+0x2c>
   42f64:	30000d26 	beq	r6,zero,42f9c <__modsi3+0x60>
   42f68:	294b883a 	add	r5,r5,r5
   42f6c:	31bfffc4 	addi	r6,r6,-1
   42f70:	18c7883a 	add	r3,r3,r3
   42f74:	293ffb36 	bltu	r5,r4,42f64 <__modsi3+0x28>
   42f78:	18000826 	beq	r3,zero,42f9c <__modsi3+0x60>
   42f7c:	1806d07a 	srli	r3,r3,1
   42f80:	11400136 	bltu	r2,r5,42f88 <__modsi3+0x4c>
   42f84:	1145c83a 	sub	r2,r2,r5
   42f88:	280ad07a 	srli	r5,r5,1
   42f8c:	183ffb1e 	bne	r3,zero,42f7c <__modsi3+0x40>
   42f90:	38000126 	beq	r7,zero,42f98 <__modsi3+0x5c>
   42f94:	0085c83a 	sub	r2,zero,r2
   42f98:	f800283a 	ret
   42f9c:	2005883a 	mov	r2,r4
   42fa0:	003ffb06 	br	42f90 <__modsi3+0x54>
   42fa4:	0109c83a 	sub	r4,zero,r4
   42fa8:	01c00044 	movi	r7,1
   42fac:	003fe506 	br	42f44 <__modsi3+0x8>

00042fb0 <__udivsi3>:
   42fb0:	200d883a 	mov	r6,r4
   42fb4:	2900152e 	bgeu	r5,r4,4300c <__udivsi3+0x5c>
   42fb8:	28001416 	blt	r5,zero,4300c <__udivsi3+0x5c>
   42fbc:	00800804 	movi	r2,32
   42fc0:	00c00044 	movi	r3,1
   42fc4:	00000206 	br	42fd0 <__udivsi3+0x20>
   42fc8:	10000e26 	beq	r2,zero,43004 <__udivsi3+0x54>
   42fcc:	28000516 	blt	r5,zero,42fe4 <__udivsi3+0x34>
   42fd0:	294b883a 	add	r5,r5,r5
   42fd4:	10bfffc4 	addi	r2,r2,-1
   42fd8:	18c7883a 	add	r3,r3,r3
   42fdc:	293ffa36 	bltu	r5,r4,42fc8 <__udivsi3+0x18>
   42fe0:	18000826 	beq	r3,zero,43004 <__udivsi3+0x54>
   42fe4:	0005883a 	mov	r2,zero
   42fe8:	31400236 	bltu	r6,r5,42ff4 <__udivsi3+0x44>
   42fec:	314dc83a 	sub	r6,r6,r5
   42ff0:	10c4b03a 	or	r2,r2,r3
   42ff4:	1806d07a 	srli	r3,r3,1
   42ff8:	280ad07a 	srli	r5,r5,1
   42ffc:	183ffa1e 	bne	r3,zero,42fe8 <__udivsi3+0x38>
   43000:	f800283a 	ret
   43004:	0005883a 	mov	r2,zero
   43008:	f800283a 	ret
   4300c:	00c00044 	movi	r3,1
   43010:	003ff406 	br	42fe4 <__udivsi3+0x34>

00043014 <__umodsi3>:
   43014:	2005883a 	mov	r2,r4
   43018:	2900132e 	bgeu	r5,r4,43068 <__umodsi3+0x54>
   4301c:	28001216 	blt	r5,zero,43068 <__umodsi3+0x54>
   43020:	01800804 	movi	r6,32
   43024:	00c00044 	movi	r3,1
   43028:	00000206 	br	43034 <__umodsi3+0x20>
   4302c:	30000c26 	beq	r6,zero,43060 <__umodsi3+0x4c>
   43030:	28000516 	blt	r5,zero,43048 <__umodsi3+0x34>
   43034:	294b883a 	add	r5,r5,r5
   43038:	31bfffc4 	addi	r6,r6,-1
   4303c:	18c7883a 	add	r3,r3,r3
   43040:	293ffa36 	bltu	r5,r4,4302c <__umodsi3+0x18>
   43044:	18000626 	beq	r3,zero,43060 <__umodsi3+0x4c>
   43048:	1806d07a 	srli	r3,r3,1
   4304c:	11400136 	bltu	r2,r5,43054 <__umodsi3+0x40>
   43050:	1145c83a 	sub	r2,r2,r5
   43054:	280ad07a 	srli	r5,r5,1
   43058:	183ffb1e 	bne	r3,zero,43048 <__umodsi3+0x34>
   4305c:	f800283a 	ret
   43060:	2005883a 	mov	r2,r4
   43064:	f800283a 	ret
   43068:	00c00044 	movi	r3,1
   4306c:	003ff606 	br	43048 <__umodsi3+0x34>

00043070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43070:	defffe04 	addi	sp,sp,-8
   43074:	dfc00115 	stw	ra,4(sp)
   43078:	df000015 	stw	fp,0(sp)
   4307c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43080:	d0a00917 	ldw	r2,-32732(gp)
   43084:	10000326 	beq	r2,zero,43094 <alt_get_errno+0x24>
   43088:	d0a00917 	ldw	r2,-32732(gp)
   4308c:	103ee83a 	callr	r2
   43090:	00000106 	br	43098 <alt_get_errno+0x28>
   43094:	d0a6ac04 	addi	r2,gp,-25936
}
   43098:	e037883a 	mov	sp,fp
   4309c:	dfc00117 	ldw	ra,4(sp)
   430a0:	df000017 	ldw	fp,0(sp)
   430a4:	dec00204 	addi	sp,sp,8
   430a8:	f800283a 	ret

000430ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   430ac:	defffb04 	addi	sp,sp,-20
   430b0:	dfc00415 	stw	ra,16(sp)
   430b4:	df000315 	stw	fp,12(sp)
   430b8:	df000304 	addi	fp,sp,12
   430bc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   430c0:	e0bffd17 	ldw	r2,-12(fp)
   430c4:	10000616 	blt	r2,zero,430e0 <close+0x34>
   430c8:	e0bffd17 	ldw	r2,-12(fp)
   430cc:	10c00324 	muli	r3,r2,12
   430d0:	00800134 	movhi	r2,4
   430d4:	1097b904 	addi	r2,r2,24292
   430d8:	1885883a 	add	r2,r3,r2
   430dc:	00000106 	br	430e4 <close+0x38>
   430e0:	0005883a 	mov	r2,zero
   430e4:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   430e8:	e0bfff17 	ldw	r2,-4(fp)
   430ec:	10001926 	beq	r2,zero,43154 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   430f0:	e0bfff17 	ldw	r2,-4(fp)
   430f4:	10800017 	ldw	r2,0(r2)
   430f8:	10800417 	ldw	r2,16(r2)
   430fc:	10000626 	beq	r2,zero,43118 <close+0x6c>
   43100:	e0bfff17 	ldw	r2,-4(fp)
   43104:	10800017 	ldw	r2,0(r2)
   43108:	10800417 	ldw	r2,16(r2)
   4310c:	e13fff17 	ldw	r4,-4(fp)
   43110:	103ee83a 	callr	r2
   43114:	00000106 	br	4311c <close+0x70>
   43118:	0005883a 	mov	r2,zero
   4311c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43120:	e13ffd17 	ldw	r4,-12(fp)
   43124:	004376c0 	call	4376c <alt_release_fd>
    if (rval < 0)
   43128:	e0bffe17 	ldw	r2,-8(fp)
   4312c:	1000070e 	bge	r2,zero,4314c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   43130:	00430700 	call	43070 <alt_get_errno>
   43134:	1007883a 	mov	r3,r2
   43138:	e0bffe17 	ldw	r2,-8(fp)
   4313c:	0085c83a 	sub	r2,zero,r2
   43140:	18800015 	stw	r2,0(r3)
      return -1;
   43144:	00bfffc4 	movi	r2,-1
   43148:	00000706 	br	43168 <close+0xbc>
    }
    return 0;
   4314c:	0005883a 	mov	r2,zero
   43150:	00000506 	br	43168 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43154:	00430700 	call	43070 <alt_get_errno>
   43158:	1007883a 	mov	r3,r2
   4315c:	00801444 	movi	r2,81
   43160:	18800015 	stw	r2,0(r3)
    return -1;
   43164:	00bfffc4 	movi	r2,-1
  }
}
   43168:	e037883a 	mov	sp,fp
   4316c:	dfc00117 	ldw	ra,4(sp)
   43170:	df000017 	ldw	fp,0(sp)
   43174:	dec00204 	addi	sp,sp,8
   43178:	f800283a 	ret

0004317c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4317c:	defffc04 	addi	sp,sp,-16
   43180:	df000315 	stw	fp,12(sp)
   43184:	df000304 	addi	fp,sp,12
   43188:	e13fff15 	stw	r4,-4(fp)
   4318c:	e17ffe15 	stw	r5,-8(fp)
   43190:	e1bffd15 	stw	r6,-12(fp)
  return len;
   43194:	e0bffd17 	ldw	r2,-12(fp)
}
   43198:	e037883a 	mov	sp,fp
   4319c:	df000017 	ldw	fp,0(sp)
   431a0:	dec00104 	addi	sp,sp,4
   431a4:	f800283a 	ret

000431a8 <alt_get_errno>:
{
   431a8:	defffe04 	addi	sp,sp,-8
   431ac:	dfc00115 	stw	ra,4(sp)
   431b0:	df000015 	stw	fp,0(sp)
   431b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   431b8:	d0a00917 	ldw	r2,-32732(gp)
   431bc:	10000326 	beq	r2,zero,431cc <alt_get_errno+0x24>
   431c0:	d0a00917 	ldw	r2,-32732(gp)
   431c4:	103ee83a 	callr	r2
   431c8:	00000106 	br	431d0 <alt_get_errno+0x28>
   431cc:	d0a6ac04 	addi	r2,gp,-25936
}
   431d0:	e037883a 	mov	sp,fp
   431d4:	dfc00117 	ldw	ra,4(sp)
   431d8:	df000017 	ldw	fp,0(sp)
   431dc:	dec00204 	addi	sp,sp,8
   431e0:	f800283a 	ret

000431e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   431e4:	defffb04 	addi	sp,sp,-20
   431e8:	dfc00415 	stw	ra,16(sp)
   431ec:	df000315 	stw	fp,12(sp)
   431f0:	df000304 	addi	fp,sp,12
   431f4:	e13ffe15 	stw	r4,-8(fp)
   431f8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   431fc:	e0bffe17 	ldw	r2,-8(fp)
   43200:	10000616 	blt	r2,zero,4321c <fstat+0x38>
   43204:	e0bffe17 	ldw	r2,-8(fp)
   43208:	10c00324 	muli	r3,r2,12
   4320c:	00800134 	movhi	r2,4
   43210:	1097b904 	addi	r2,r2,24292
   43214:	1885883a 	add	r2,r3,r2
   43218:	00000106 	br	43220 <fstat+0x3c>
   4321c:	0005883a 	mov	r2,zero
   43220:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   43224:	e0bfff17 	ldw	r2,-4(fp)
   43228:	10001026 	beq	r2,zero,4326c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4322c:	e0bfff17 	ldw	r2,-4(fp)
   43230:	10800017 	ldw	r2,0(r2)
   43234:	10800817 	ldw	r2,32(r2)
   43238:	10000726 	beq	r2,zero,43258 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   4323c:	e0bfff17 	ldw	r2,-4(fp)
   43240:	10800017 	ldw	r2,0(r2)
   43244:	10800817 	ldw	r2,32(r2)
   43248:	e17ffd17 	ldw	r5,-12(fp)
   4324c:	e13fff17 	ldw	r4,-4(fp)
   43250:	103ee83a 	callr	r2
   43254:	00000a06 	br	43280 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43258:	e0bffd17 	ldw	r2,-12(fp)
   4325c:	00c80004 	movi	r3,8192
   43260:	10c00115 	stw	r3,4(r2)
      return 0;
   43264:	0005883a 	mov	r2,zero
   43268:	00000506 	br	43280 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4326c:	00431a80 	call	431a8 <alt_get_errno>
   43270:	1007883a 	mov	r3,r2
   43274:	00801444 	movi	r2,81
   43278:	18800015 	stw	r2,0(r3)
    return -1;
   4327c:	00bfffc4 	movi	r2,-1
  }
}
   43280:	e037883a 	mov	sp,fp
   43284:	dfc00117 	ldw	ra,4(sp)
   43288:	df000017 	ldw	fp,0(sp)
   4328c:	dec00204 	addi	sp,sp,8
   43290:	f800283a 	ret

00043294 <alt_get_errno>:
{
   43294:	defffe04 	addi	sp,sp,-8
   43298:	dfc00115 	stw	ra,4(sp)
   4329c:	df000015 	stw	fp,0(sp)
   432a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   432a4:	d0a00917 	ldw	r2,-32732(gp)
   432a8:	10000326 	beq	r2,zero,432b8 <alt_get_errno+0x24>
   432ac:	d0a00917 	ldw	r2,-32732(gp)
   432b0:	103ee83a 	callr	r2
   432b4:	00000106 	br	432bc <alt_get_errno+0x28>
   432b8:	d0a6ac04 	addi	r2,gp,-25936
}
   432bc:	e037883a 	mov	sp,fp
   432c0:	dfc00117 	ldw	ra,4(sp)
   432c4:	df000017 	ldw	fp,0(sp)
   432c8:	dec00204 	addi	sp,sp,8
   432cc:	f800283a 	ret

000432d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   432d0:	deffea04 	addi	sp,sp,-88
   432d4:	dfc01515 	stw	ra,84(sp)
   432d8:	df001415 	stw	fp,80(sp)
   432dc:	df001404 	addi	fp,sp,80
   432e0:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   432e4:	e0bfec17 	ldw	r2,-80(fp)
   432e8:	10000616 	blt	r2,zero,43304 <isatty+0x34>
   432ec:	e0bfec17 	ldw	r2,-80(fp)
   432f0:	10c00324 	muli	r3,r2,12
   432f4:	00800134 	movhi	r2,4
   432f8:	1097b904 	addi	r2,r2,24292
   432fc:	1885883a 	add	r2,r3,r2
   43300:	00000106 	br	43308 <isatty+0x38>
   43304:	0005883a 	mov	r2,zero
   43308:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   4330c:	e0bfff17 	ldw	r2,-4(fp)
   43310:	10000e26 	beq	r2,zero,4334c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43314:	e0bfff17 	ldw	r2,-4(fp)
   43318:	10800017 	ldw	r2,0(r2)
   4331c:	10800817 	ldw	r2,32(r2)
   43320:	1000021e 	bne	r2,zero,4332c <isatty+0x5c>
    {
      return 1;
   43324:	00800044 	movi	r2,1
   43328:	00000d06 	br	43360 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4332c:	e0bfed04 	addi	r2,fp,-76
   43330:	100b883a 	mov	r5,r2
   43334:	e13fec17 	ldw	r4,-80(fp)
   43338:	00431e40 	call	431e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4333c:	e0bfee17 	ldw	r2,-72(fp)
   43340:	10880020 	cmpeqi	r2,r2,8192
   43344:	10803fcc 	andi	r2,r2,255
   43348:	00000506 	br	43360 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4334c:	00432940 	call	43294 <alt_get_errno>
   43350:	1007883a 	mov	r3,r2
   43354:	00801444 	movi	r2,81
   43358:	18800015 	stw	r2,0(r3)
    return 0;
   4335c:	0005883a 	mov	r2,zero
  }
}
   43360:	e037883a 	mov	sp,fp
   43364:	dfc00117 	ldw	ra,4(sp)
   43368:	df000017 	ldw	fp,0(sp)
   4336c:	dec00204 	addi	sp,sp,8
   43370:	f800283a 	ret

00043374 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43374:	defffc04 	addi	sp,sp,-16
   43378:	df000315 	stw	fp,12(sp)
   4337c:	df000304 	addi	fp,sp,12
   43380:	e13fff15 	stw	r4,-4(fp)
   43384:	e17ffe15 	stw	r5,-8(fp)
   43388:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   4338c:	e0fffe17 	ldw	r3,-8(fp)
   43390:	e0bfff17 	ldw	r2,-4(fp)
   43394:	18800c26 	beq	r3,r2,433c8 <alt_load_section+0x54>
  {
    while( to != end )
   43398:	00000806 	br	433bc <alt_load_section+0x48>
    {
      *to++ = *from++;
   4339c:	e0ffff17 	ldw	r3,-4(fp)
   433a0:	18800104 	addi	r2,r3,4
   433a4:	e0bfff15 	stw	r2,-4(fp)
   433a8:	e0bffe17 	ldw	r2,-8(fp)
   433ac:	11000104 	addi	r4,r2,4
   433b0:	e13ffe15 	stw	r4,-8(fp)
   433b4:	18c00017 	ldw	r3,0(r3)
   433b8:	10c00015 	stw	r3,0(r2)
    while( to != end )
   433bc:	e0fffe17 	ldw	r3,-8(fp)
   433c0:	e0bffd17 	ldw	r2,-12(fp)
   433c4:	18bff51e 	bne	r3,r2,4339c <alt_load_section+0x28>
    }
  }
}
   433c8:	0001883a 	nop
   433cc:	e037883a 	mov	sp,fp
   433d0:	df000017 	ldw	fp,0(sp)
   433d4:	dec00104 	addi	sp,sp,4
   433d8:	f800283a 	ret

000433dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   433dc:	defffe04 	addi	sp,sp,-8
   433e0:	dfc00115 	stw	ra,4(sp)
   433e4:	df000015 	stw	fp,0(sp)
   433e8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   433ec:	01800134 	movhi	r6,4
   433f0:	319c3f04 	addi	r6,r6,28924
   433f4:	01400134 	movhi	r5,4
   433f8:	2955a404 	addi	r5,r5,22160
   433fc:	01000134 	movhi	r4,4
   43400:	211c3f04 	addi	r4,r4,28924
   43404:	00433740 	call	43374 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43408:	01800134 	movhi	r6,4
   4340c:	31808e04 	addi	r6,r6,568
   43410:	01400134 	movhi	r5,4
   43414:	29400804 	addi	r5,r5,32
   43418:	01000134 	movhi	r4,4
   4341c:	21000804 	addi	r4,r4,32
   43420:	00433740 	call	43374 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43424:	01800134 	movhi	r6,4
   43428:	3195a404 	addi	r6,r6,22160
   4342c:	01400134 	movhi	r5,4
   43430:	29559304 	addi	r5,r5,22092
   43434:	01000134 	movhi	r4,4
   43438:	21159304 	addi	r4,r4,22092
   4343c:	00433740 	call	43374 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43440:	004463c0 	call	4463c <alt_dcache_flush_all>
  alt_icache_flush_all();
   43444:	00448340 	call	44834 <alt_icache_flush_all>
}
   43448:	0001883a 	nop
   4344c:	e037883a 	mov	sp,fp
   43450:	dfc00117 	ldw	ra,4(sp)
   43454:	df000017 	ldw	fp,0(sp)
   43458:	dec00204 	addi	sp,sp,8
   4345c:	f800283a 	ret

00043460 <alt_get_errno>:
{
   43460:	defffe04 	addi	sp,sp,-8
   43464:	dfc00115 	stw	ra,4(sp)
   43468:	df000015 	stw	fp,0(sp)
   4346c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43470:	d0a00917 	ldw	r2,-32732(gp)
   43474:	10000326 	beq	r2,zero,43484 <alt_get_errno+0x24>
   43478:	d0a00917 	ldw	r2,-32732(gp)
   4347c:	103ee83a 	callr	r2
   43480:	00000106 	br	43488 <alt_get_errno+0x28>
   43484:	d0a6ac04 	addi	r2,gp,-25936
}
   43488:	e037883a 	mov	sp,fp
   4348c:	dfc00117 	ldw	ra,4(sp)
   43490:	df000017 	ldw	fp,0(sp)
   43494:	dec00204 	addi	sp,sp,8
   43498:	f800283a 	ret

0004349c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4349c:	defff904 	addi	sp,sp,-28
   434a0:	dfc00615 	stw	ra,24(sp)
   434a4:	df000515 	stw	fp,20(sp)
   434a8:	df000504 	addi	fp,sp,20
   434ac:	e13ffd15 	stw	r4,-12(fp)
   434b0:	e17ffc15 	stw	r5,-16(fp)
   434b4:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   434b8:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   434bc:	e0bffd17 	ldw	r2,-12(fp)
   434c0:	10000616 	blt	r2,zero,434dc <lseek+0x40>
   434c4:	e0bffd17 	ldw	r2,-12(fp)
   434c8:	10c00324 	muli	r3,r2,12
   434cc:	00800134 	movhi	r2,4
   434d0:	1097b904 	addi	r2,r2,24292
   434d4:	1885883a 	add	r2,r3,r2
   434d8:	00000106 	br	434e0 <lseek+0x44>
   434dc:	0005883a 	mov	r2,zero
   434e0:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   434e4:	e0bffe17 	ldw	r2,-8(fp)
   434e8:	10001026 	beq	r2,zero,4352c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   434ec:	e0bffe17 	ldw	r2,-8(fp)
   434f0:	10800017 	ldw	r2,0(r2)
   434f4:	10800717 	ldw	r2,28(r2)
   434f8:	10000926 	beq	r2,zero,43520 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   434fc:	e0bffe17 	ldw	r2,-8(fp)
   43500:	10800017 	ldw	r2,0(r2)
   43504:	10800717 	ldw	r2,28(r2)
   43508:	e1bffb17 	ldw	r6,-20(fp)
   4350c:	e17ffc17 	ldw	r5,-16(fp)
   43510:	e13ffe17 	ldw	r4,-8(fp)
   43514:	103ee83a 	callr	r2
   43518:	e0bfff15 	stw	r2,-4(fp)
   4351c:	00000506 	br	43534 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43520:	00bfde84 	movi	r2,-134
   43524:	e0bfff15 	stw	r2,-4(fp)
   43528:	00000206 	br	43534 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   4352c:	00bfebc4 	movi	r2,-81
   43530:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   43534:	e0bfff17 	ldw	r2,-4(fp)
   43538:	1000070e 	bge	r2,zero,43558 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4353c:	00434600 	call	43460 <alt_get_errno>
   43540:	1007883a 	mov	r3,r2
   43544:	e0bfff17 	ldw	r2,-4(fp)
   43548:	0085c83a 	sub	r2,zero,r2
   4354c:	18800015 	stw	r2,0(r3)
    rc = -1;
   43550:	00bfffc4 	movi	r2,-1
   43554:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   43558:	e0bfff17 	ldw	r2,-4(fp)
}
   4355c:	e037883a 	mov	sp,fp
   43560:	dfc00117 	ldw	ra,4(sp)
   43564:	df000017 	ldw	fp,0(sp)
   43568:	dec00204 	addi	sp,sp,8
   4356c:	f800283a 	ret

00043570 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43570:	defffd04 	addi	sp,sp,-12
   43574:	dfc00215 	stw	ra,8(sp)
   43578:	df000115 	stw	fp,4(sp)
   4357c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43580:	0009883a 	mov	r4,zero
   43584:	00439e40 	call	439e4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   43588:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4358c:	0043a200 	call	43a20 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   43590:	01800134 	movhi	r6,4
   43594:	31959c04 	addi	r6,r6,22128
   43598:	01400134 	movhi	r5,4
   4359c:	29559c04 	addi	r5,r5,22128
   435a0:	01000134 	movhi	r4,4
   435a4:	21159c04 	addi	r4,r4,22128
   435a8:	0044bb00 	call	44bb0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   435ac:	004476c0 	call	4476c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   435b0:	01000134 	movhi	r4,4
   435b4:	2111f404 	addi	r4,r4,18384
   435b8:	00453a40 	call	453a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   435bc:	d0a6ad17 	ldw	r2,-25932(gp)
   435c0:	d0e6ae17 	ldw	r3,-25928(gp)
   435c4:	d126af17 	ldw	r4,-25924(gp)
   435c8:	200d883a 	mov	r6,r4
   435cc:	180b883a 	mov	r5,r3
   435d0:	1009883a 	mov	r4,r2
   435d4:	00402840 	call	40284 <main>
   435d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   435dc:	01000044 	movi	r4,1
   435e0:	00430ac0 	call	430ac <close>
  exit (result);
   435e4:	e13fff17 	ldw	r4,-4(fp)
   435e8:	00453b80 	call	453b8 <exit>

000435ec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   435ec:	defffe04 	addi	sp,sp,-8
   435f0:	df000115 	stw	fp,4(sp)
   435f4:	df000104 	addi	fp,sp,4
   435f8:	e13fff15 	stw	r4,-4(fp)
}
   435fc:	0001883a 	nop
   43600:	e037883a 	mov	sp,fp
   43604:	df000017 	ldw	fp,0(sp)
   43608:	dec00104 	addi	sp,sp,4
   4360c:	f800283a 	ret

00043610 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   43610:	defffe04 	addi	sp,sp,-8
   43614:	df000115 	stw	fp,4(sp)
   43618:	df000104 	addi	fp,sp,4
   4361c:	e13fff15 	stw	r4,-4(fp)
}
   43620:	0001883a 	nop
   43624:	e037883a 	mov	sp,fp
   43628:	df000017 	ldw	fp,0(sp)
   4362c:	dec00104 	addi	sp,sp,4
   43630:	f800283a 	ret

00043634 <alt_get_errno>:
{
   43634:	defffe04 	addi	sp,sp,-8
   43638:	dfc00115 	stw	ra,4(sp)
   4363c:	df000015 	stw	fp,0(sp)
   43640:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43644:	d0a00917 	ldw	r2,-32732(gp)
   43648:	10000326 	beq	r2,zero,43658 <alt_get_errno+0x24>
   4364c:	d0a00917 	ldw	r2,-32732(gp)
   43650:	103ee83a 	callr	r2
   43654:	00000106 	br	4365c <alt_get_errno+0x28>
   43658:	d0a6ac04 	addi	r2,gp,-25936
}
   4365c:	e037883a 	mov	sp,fp
   43660:	dfc00117 	ldw	ra,4(sp)
   43664:	df000017 	ldw	fp,0(sp)
   43668:	dec00204 	addi	sp,sp,8
   4366c:	f800283a 	ret

00043670 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   43670:	defff904 	addi	sp,sp,-28
   43674:	dfc00615 	stw	ra,24(sp)
   43678:	df000515 	stw	fp,20(sp)
   4367c:	df000504 	addi	fp,sp,20
   43680:	e13ffd15 	stw	r4,-12(fp)
   43684:	e17ffc15 	stw	r5,-16(fp)
   43688:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4368c:	e0bffd17 	ldw	r2,-12(fp)
   43690:	10000616 	blt	r2,zero,436ac <read+0x3c>
   43694:	e0bffd17 	ldw	r2,-12(fp)
   43698:	10c00324 	muli	r3,r2,12
   4369c:	00800134 	movhi	r2,4
   436a0:	1097b904 	addi	r2,r2,24292
   436a4:	1885883a 	add	r2,r3,r2
   436a8:	00000106 	br	436b0 <read+0x40>
   436ac:	0005883a 	mov	r2,zero
   436b0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   436b4:	e0bfff17 	ldw	r2,-4(fp)
   436b8:	10002226 	beq	r2,zero,43744 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   436bc:	e0bfff17 	ldw	r2,-4(fp)
   436c0:	10800217 	ldw	r2,8(r2)
   436c4:	108000cc 	andi	r2,r2,3
   436c8:	10800060 	cmpeqi	r2,r2,1
   436cc:	1000181e 	bne	r2,zero,43730 <read+0xc0>
        (fd->dev->read))
   436d0:	e0bfff17 	ldw	r2,-4(fp)
   436d4:	10800017 	ldw	r2,0(r2)
   436d8:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   436dc:	10001426 	beq	r2,zero,43730 <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   436e0:	e0bfff17 	ldw	r2,-4(fp)
   436e4:	10800017 	ldw	r2,0(r2)
   436e8:	10800517 	ldw	r2,20(r2)
   436ec:	e0fffb17 	ldw	r3,-20(fp)
   436f0:	180d883a 	mov	r6,r3
   436f4:	e17ffc17 	ldw	r5,-16(fp)
   436f8:	e13fff17 	ldw	r4,-4(fp)
   436fc:	103ee83a 	callr	r2
   43700:	e0bffe15 	stw	r2,-8(fp)
   43704:	e0bffe17 	ldw	r2,-8(fp)
   43708:	1000070e 	bge	r2,zero,43728 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4370c:	00436340 	call	43634 <alt_get_errno>
   43710:	1007883a 	mov	r3,r2
   43714:	e0bffe17 	ldw	r2,-8(fp)
   43718:	0085c83a 	sub	r2,zero,r2
   4371c:	18800015 	stw	r2,0(r3)
          return -1;
   43720:	00bfffc4 	movi	r2,-1
   43724:	00000c06 	br	43758 <read+0xe8>
        }
        return rval;
   43728:	e0bffe17 	ldw	r2,-8(fp)
   4372c:	00000a06 	br	43758 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43730:	00436340 	call	43634 <alt_get_errno>
   43734:	1007883a 	mov	r3,r2
   43738:	00800344 	movi	r2,13
   4373c:	18800015 	stw	r2,0(r3)
   43740:	00000406 	br	43754 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43744:	00436340 	call	43634 <alt_get_errno>
   43748:	1007883a 	mov	r3,r2
   4374c:	00801444 	movi	r2,81
   43750:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43754:	00bfffc4 	movi	r2,-1
}
   43758:	e037883a 	mov	sp,fp
   4375c:	dfc00117 	ldw	ra,4(sp)
   43760:	df000017 	ldw	fp,0(sp)
   43764:	dec00204 	addi	sp,sp,8
   43768:	f800283a 	ret

0004376c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4376c:	defffe04 	addi	sp,sp,-8
   43770:	df000115 	stw	fp,4(sp)
   43774:	df000104 	addi	fp,sp,4
   43778:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4377c:	e0bfff17 	ldw	r2,-4(fp)
   43780:	108000d0 	cmplti	r2,r2,3
   43784:	10000a1e 	bne	r2,zero,437b0 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
   43788:	e0bfff17 	ldw	r2,-4(fp)
   4378c:	10c00324 	muli	r3,r2,12
   43790:	00800134 	movhi	r2,4
   43794:	1885883a 	add	r2,r3,r2
   43798:	1017bb15 	stw	zero,24300(r2)
    alt_fd_list[fd].dev      = 0;
   4379c:	e0bfff17 	ldw	r2,-4(fp)
   437a0:	10c00324 	muli	r3,r2,12
   437a4:	00800134 	movhi	r2,4
   437a8:	1885883a 	add	r2,r3,r2
   437ac:	1017b915 	stw	zero,24292(r2)
  }
}
   437b0:	0001883a 	nop
   437b4:	e037883a 	mov	sp,fp
   437b8:	df000017 	ldw	fp,0(sp)
   437bc:	dec00104 	addi	sp,sp,4
   437c0:	f800283a 	ret

000437c4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   437c4:	defff904 	addi	sp,sp,-28
   437c8:	df000615 	stw	fp,24(sp)
   437cc:	df000604 	addi	fp,sp,24
   437d0:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   437d4:	0005303a 	rdctl	r2,status
   437d8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   437dc:	e0fffd17 	ldw	r3,-12(fp)
   437e0:	00bfff84 	movi	r2,-2
   437e4:	1884703a 	and	r2,r3,r2
   437e8:	1001703a 	wrctl	status,r2
  return context;
   437ec:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   437f0:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   437f4:	d0a00a17 	ldw	r2,-32728(gp)
   437f8:	10c000c4 	addi	r3,r2,3
   437fc:	00bfff04 	movi	r2,-4
   43800:	1884703a 	and	r2,r3,r2
   43804:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43808:	d0e00a17 	ldw	r3,-32728(gp)
   4380c:	e0bffa17 	ldw	r2,-24(fp)
   43810:	1887883a 	add	r3,r3,r2
   43814:	008001f4 	movhi	r2,7
   43818:	10880004 	addi	r2,r2,8192
   4381c:	10c0072e 	bgeu	r2,r3,4383c <sbrk+0x78>
   43820:	e0bfff17 	ldw	r2,-4(fp)
   43824:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   43828:	e0bffc17 	ldw	r2,-16(fp)
   4382c:	1001703a 	wrctl	status,r2
}
   43830:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43834:	00bfffc4 	movi	r2,-1
   43838:	00000c06 	br	4386c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   4383c:	d0a00a17 	ldw	r2,-32728(gp)
   43840:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   43844:	d0e00a17 	ldw	r3,-32728(gp)
   43848:	e0bffa17 	ldw	r2,-24(fp)
   4384c:	1885883a 	add	r2,r3,r2
   43850:	d0a00a15 	stw	r2,-32728(gp)
   43854:	e0bfff17 	ldw	r2,-4(fp)
   43858:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   4385c:	e0bffb17 	ldw	r2,-20(fp)
   43860:	1001703a 	wrctl	status,r2
}
   43864:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   43868:	e0bffe17 	ldw	r2,-8(fp)
} 
   4386c:	e037883a 	mov	sp,fp
   43870:	df000017 	ldw	fp,0(sp)
   43874:	dec00104 	addi	sp,sp,4
   43878:	f800283a 	ret

0004387c <alt_get_errno>:
{
   4387c:	defffe04 	addi	sp,sp,-8
   43880:	dfc00115 	stw	ra,4(sp)
   43884:	df000015 	stw	fp,0(sp)
   43888:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4388c:	d0a00917 	ldw	r2,-32732(gp)
   43890:	10000326 	beq	r2,zero,438a0 <alt_get_errno+0x24>
   43894:	d0a00917 	ldw	r2,-32732(gp)
   43898:	103ee83a 	callr	r2
   4389c:	00000106 	br	438a4 <alt_get_errno+0x28>
   438a0:	d0a6ac04 	addi	r2,gp,-25936
}
   438a4:	e037883a 	mov	sp,fp
   438a8:	dfc00117 	ldw	ra,4(sp)
   438ac:	df000017 	ldw	fp,0(sp)
   438b0:	dec00204 	addi	sp,sp,8
   438b4:	f800283a 	ret

000438b8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   438b8:	defff904 	addi	sp,sp,-28
   438bc:	dfc00615 	stw	ra,24(sp)
   438c0:	df000515 	stw	fp,20(sp)
   438c4:	df000504 	addi	fp,sp,20
   438c8:	e13ffd15 	stw	r4,-12(fp)
   438cc:	e17ffc15 	stw	r5,-16(fp)
   438d0:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   438d4:	e0bffd17 	ldw	r2,-12(fp)
   438d8:	10000616 	blt	r2,zero,438f4 <write+0x3c>
   438dc:	e0bffd17 	ldw	r2,-12(fp)
   438e0:	10c00324 	muli	r3,r2,12
   438e4:	00800134 	movhi	r2,4
   438e8:	1097b904 	addi	r2,r2,24292
   438ec:	1885883a 	add	r2,r3,r2
   438f0:	00000106 	br	438f8 <write+0x40>
   438f4:	0005883a 	mov	r2,zero
   438f8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   438fc:	e0bfff17 	ldw	r2,-4(fp)
   43900:	10002126 	beq	r2,zero,43988 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43904:	e0bfff17 	ldw	r2,-4(fp)
   43908:	10800217 	ldw	r2,8(r2)
   4390c:	108000cc 	andi	r2,r2,3
   43910:	10001826 	beq	r2,zero,43974 <write+0xbc>
   43914:	e0bfff17 	ldw	r2,-4(fp)
   43918:	10800017 	ldw	r2,0(r2)
   4391c:	10800617 	ldw	r2,24(r2)
   43920:	10001426 	beq	r2,zero,43974 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43924:	e0bfff17 	ldw	r2,-4(fp)
   43928:	10800017 	ldw	r2,0(r2)
   4392c:	10800617 	ldw	r2,24(r2)
   43930:	e0fffb17 	ldw	r3,-20(fp)
   43934:	180d883a 	mov	r6,r3
   43938:	e17ffc17 	ldw	r5,-16(fp)
   4393c:	e13fff17 	ldw	r4,-4(fp)
   43940:	103ee83a 	callr	r2
   43944:	e0bffe15 	stw	r2,-8(fp)
   43948:	e0bffe17 	ldw	r2,-8(fp)
   4394c:	1000070e 	bge	r2,zero,4396c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   43950:	004387c0 	call	4387c <alt_get_errno>
   43954:	1007883a 	mov	r3,r2
   43958:	e0bffe17 	ldw	r2,-8(fp)
   4395c:	0085c83a 	sub	r2,zero,r2
   43960:	18800015 	stw	r2,0(r3)
        return -1;
   43964:	00bfffc4 	movi	r2,-1
   43968:	00000c06 	br	4399c <write+0xe4>
      }
      return rval;
   4396c:	e0bffe17 	ldw	r2,-8(fp)
   43970:	00000a06 	br	4399c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43974:	004387c0 	call	4387c <alt_get_errno>
   43978:	1007883a 	mov	r3,r2
   4397c:	00800344 	movi	r2,13
   43980:	18800015 	stw	r2,0(r3)
   43984:	00000406 	br	43998 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43988:	004387c0 	call	4387c <alt_get_errno>
   4398c:	1007883a 	mov	r3,r2
   43990:	00801444 	movi	r2,81
   43994:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43998:	00bfffc4 	movi	r2,-1
}
   4399c:	e037883a 	mov	sp,fp
   439a0:	dfc00117 	ldw	ra,4(sp)
   439a4:	df000017 	ldw	fp,0(sp)
   439a8:	dec00204 	addi	sp,sp,8
   439ac:	f800283a 	ret

000439b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   439b0:	defffd04 	addi	sp,sp,-12
   439b4:	dfc00215 	stw	ra,8(sp)
   439b8:	df000115 	stw	fp,4(sp)
   439bc:	df000104 	addi	fp,sp,4
   439c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   439c4:	d1600604 	addi	r5,gp,-32744
   439c8:	e13fff17 	ldw	r4,-4(fp)
   439cc:	00446c40 	call	446c4 <alt_dev_llist_insert>
}
   439d0:	e037883a 	mov	sp,fp
   439d4:	dfc00117 	ldw	ra,4(sp)
   439d8:	df000017 	ldw	fp,0(sp)
   439dc:	dec00204 	addi	sp,sp,8
   439e0:	f800283a 	ret

000439e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   439e4:	defffd04 	addi	sp,sp,-12
   439e8:	dfc00215 	stw	ra,8(sp)
   439ec:	df000115 	stw	fp,4(sp)
   439f0:	df000104 	addi	fp,sp,4
   439f4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_LAB6, cpu_lab6);
   439f8:	00450440 	call	45044 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   439fc:	00800044 	movi	r2,1
   43a00:	1001703a 	wrctl	status,r2
}
   43a04:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   43a08:	0001883a 	nop
   43a0c:	e037883a 	mov	sp,fp
   43a10:	dfc00117 	ldw	ra,4(sp)
   43a14:	df000017 	ldw	fp,0(sp)
   43a18:	dec00204 	addi	sp,sp,8
   43a1c:	f800283a 	ret

00043a20 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43a20:	defffe04 	addi	sp,sp,-8
   43a24:	dfc00115 	stw	ra,4(sp)
   43a28:	df000015 	stw	fp,0(sp)
   43a2c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   43a30:	000d883a 	mov	r6,zero
   43a34:	000b883a 	mov	r5,zero
   43a38:	01000134 	movhi	r4,4
   43a3c:	21182304 	addi	r4,r4,24716
   43a40:	0043bcc0 	call	43bcc <altera_avalon_jtag_uart_init>
   43a44:	01000134 	movhi	r4,4
   43a48:	21181904 	addi	r4,r4,24676
   43a4c:	00439b00 	call	439b0 <alt_dev_reg>
}
   43a50:	0001883a 	nop
   43a54:	e037883a 	mov	sp,fp
   43a58:	dfc00117 	ldw	ra,4(sp)
   43a5c:	df000017 	ldw	fp,0(sp)
   43a60:	dec00204 	addi	sp,sp,8
   43a64:	f800283a 	ret

00043a68 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43a68:	defffa04 	addi	sp,sp,-24
   43a6c:	dfc00515 	stw	ra,20(sp)
   43a70:	df000415 	stw	fp,16(sp)
   43a74:	df000404 	addi	fp,sp,16
   43a78:	e13ffe15 	stw	r4,-8(fp)
   43a7c:	e17ffd15 	stw	r5,-12(fp)
   43a80:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43a84:	e0bffe17 	ldw	r2,-8(fp)
   43a88:	10800017 	ldw	r2,0(r2)
   43a8c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43a90:	e0bfff17 	ldw	r2,-4(fp)
   43a94:	10c00a04 	addi	r3,r2,40
   43a98:	e0bffe17 	ldw	r2,-8(fp)
   43a9c:	10800217 	ldw	r2,8(r2)
   43aa0:	100f883a 	mov	r7,r2
   43aa4:	e1bffc17 	ldw	r6,-16(fp)
   43aa8:	e17ffd17 	ldw	r5,-12(fp)
   43aac:	1809883a 	mov	r4,r3
   43ab0:	00440940 	call	44094 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   43ab4:	e037883a 	mov	sp,fp
   43ab8:	dfc00117 	ldw	ra,4(sp)
   43abc:	df000017 	ldw	fp,0(sp)
   43ac0:	dec00204 	addi	sp,sp,8
   43ac4:	f800283a 	ret

00043ac8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43ac8:	defffa04 	addi	sp,sp,-24
   43acc:	dfc00515 	stw	ra,20(sp)
   43ad0:	df000415 	stw	fp,16(sp)
   43ad4:	df000404 	addi	fp,sp,16
   43ad8:	e13ffe15 	stw	r4,-8(fp)
   43adc:	e17ffd15 	stw	r5,-12(fp)
   43ae0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43ae4:	e0bffe17 	ldw	r2,-8(fp)
   43ae8:	10800017 	ldw	r2,0(r2)
   43aec:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43af0:	e0bfff17 	ldw	r2,-4(fp)
   43af4:	10c00a04 	addi	r3,r2,40
   43af8:	e0bffe17 	ldw	r2,-8(fp)
   43afc:	10800217 	ldw	r2,8(r2)
   43b00:	100f883a 	mov	r7,r2
   43b04:	e1bffc17 	ldw	r6,-16(fp)
   43b08:	e17ffd17 	ldw	r5,-12(fp)
   43b0c:	1809883a 	mov	r4,r3
   43b10:	00442b40 	call	442b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43b14:	e037883a 	mov	sp,fp
   43b18:	dfc00117 	ldw	ra,4(sp)
   43b1c:	df000017 	ldw	fp,0(sp)
   43b20:	dec00204 	addi	sp,sp,8
   43b24:	f800283a 	ret

00043b28 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   43b28:	defffc04 	addi	sp,sp,-16
   43b2c:	dfc00315 	stw	ra,12(sp)
   43b30:	df000215 	stw	fp,8(sp)
   43b34:	df000204 	addi	fp,sp,8
   43b38:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43b3c:	e0bffe17 	ldw	r2,-8(fp)
   43b40:	10800017 	ldw	r2,0(r2)
   43b44:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   43b48:	e0bfff17 	ldw	r2,-4(fp)
   43b4c:	10c00a04 	addi	r3,r2,40
   43b50:	e0bffe17 	ldw	r2,-8(fp)
   43b54:	10800217 	ldw	r2,8(r2)
   43b58:	100b883a 	mov	r5,r2
   43b5c:	1809883a 	mov	r4,r3
   43b60:	0043f380 	call	43f38 <altera_avalon_jtag_uart_close>
}
   43b64:	e037883a 	mov	sp,fp
   43b68:	dfc00117 	ldw	ra,4(sp)
   43b6c:	df000017 	ldw	fp,0(sp)
   43b70:	dec00204 	addi	sp,sp,8
   43b74:	f800283a 	ret

00043b78 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   43b78:	defffa04 	addi	sp,sp,-24
   43b7c:	dfc00515 	stw	ra,20(sp)
   43b80:	df000415 	stw	fp,16(sp)
   43b84:	df000404 	addi	fp,sp,16
   43b88:	e13ffe15 	stw	r4,-8(fp)
   43b8c:	e17ffd15 	stw	r5,-12(fp)
   43b90:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   43b94:	e0bffe17 	ldw	r2,-8(fp)
   43b98:	10800017 	ldw	r2,0(r2)
   43b9c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   43ba0:	e0bfff17 	ldw	r2,-4(fp)
   43ba4:	10800a04 	addi	r2,r2,40
   43ba8:	e1bffc17 	ldw	r6,-16(fp)
   43bac:	e17ffd17 	ldw	r5,-12(fp)
   43bb0:	1009883a 	mov	r4,r2
   43bb4:	0043fa00 	call	43fa0 <altera_avalon_jtag_uart_ioctl>
}
   43bb8:	e037883a 	mov	sp,fp
   43bbc:	dfc00117 	ldw	ra,4(sp)
   43bc0:	df000017 	ldw	fp,0(sp)
   43bc4:	dec00204 	addi	sp,sp,8
   43bc8:	f800283a 	ret

00043bcc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   43bcc:	defffa04 	addi	sp,sp,-24
   43bd0:	dfc00515 	stw	ra,20(sp)
   43bd4:	df000415 	stw	fp,16(sp)
   43bd8:	df000404 	addi	fp,sp,16
   43bdc:	e13fff15 	stw	r4,-4(fp)
   43be0:	e17ffe15 	stw	r5,-8(fp)
   43be4:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43be8:	e0bfff17 	ldw	r2,-4(fp)
   43bec:	00c00044 	movi	r3,1
   43bf0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   43bf4:	e0bfff17 	ldw	r2,-4(fp)
   43bf8:	10800017 	ldw	r2,0(r2)
   43bfc:	10800104 	addi	r2,r2,4
   43c00:	1007883a 	mov	r3,r2
   43c04:	e0bfff17 	ldw	r2,-4(fp)
   43c08:	10800817 	ldw	r2,32(r2)
   43c0c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   43c10:	e0bffe17 	ldw	r2,-8(fp)
   43c14:	e0fffd17 	ldw	r3,-12(fp)
   43c18:	d8000015 	stw	zero,0(sp)
   43c1c:	e1ffff17 	ldw	r7,-4(fp)
   43c20:	01800134 	movhi	r6,4
   43c24:	318f2304 	addi	r6,r6,15500
   43c28:	180b883a 	mov	r5,r3
   43c2c:	1009883a 	mov	r4,r2
   43c30:	00448680 	call	44868 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   43c34:	e0bfff17 	ldw	r2,-4(fp)
   43c38:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   43c3c:	e0bfff17 	ldw	r2,-4(fp)
   43c40:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   43c44:	d0e6b117 	ldw	r3,-25916(gp)
   43c48:	e1ffff17 	ldw	r7,-4(fp)
   43c4c:	01800134 	movhi	r6,4
   43c50:	318fa604 	addi	r6,r6,16024
   43c54:	180b883a 	mov	r5,r3
   43c58:	1009883a 	mov	r4,r2
   43c5c:	00444dc0 	call	444dc <alt_alarm_start>
   43c60:	1000040e 	bge	r2,zero,43c74 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   43c64:	e0ffff17 	ldw	r3,-4(fp)
   43c68:	00a00034 	movhi	r2,32768
   43c6c:	10bfffc4 	addi	r2,r2,-1
   43c70:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43c74:	0001883a 	nop
   43c78:	e037883a 	mov	sp,fp
   43c7c:	dfc00117 	ldw	ra,4(sp)
   43c80:	df000017 	ldw	fp,0(sp)
   43c84:	dec00204 	addi	sp,sp,8
   43c88:	f800283a 	ret

00043c8c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   43c8c:	defff804 	addi	sp,sp,-32
   43c90:	df000715 	stw	fp,28(sp)
   43c94:	df000704 	addi	fp,sp,28
   43c98:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   43c9c:	e0bff917 	ldw	r2,-28(fp)
   43ca0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   43ca4:	e0bffd17 	ldw	r2,-12(fp)
   43ca8:	10800017 	ldw	r2,0(r2)
   43cac:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43cb0:	e0bffc17 	ldw	r2,-16(fp)
   43cb4:	10800104 	addi	r2,r2,4
   43cb8:	10800037 	ldwio	r2,0(r2)
   43cbc:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   43cc0:	e0bffb17 	ldw	r2,-20(fp)
   43cc4:	1080c00c 	andi	r2,r2,768
   43cc8:	10006d26 	beq	r2,zero,43e80 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   43ccc:	e0bffb17 	ldw	r2,-20(fp)
   43cd0:	1080400c 	andi	r2,r2,256
   43cd4:	10003526 	beq	r2,zero,43dac <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   43cd8:	00800074 	movhi	r2,1
   43cdc:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43ce0:	e0bffd17 	ldw	r2,-12(fp)
   43ce4:	10800a17 	ldw	r2,40(r2)
   43ce8:	10800044 	addi	r2,r2,1
   43cec:	1081ffcc 	andi	r2,r2,2047
   43cf0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   43cf4:	e0bffd17 	ldw	r2,-12(fp)
   43cf8:	10800b17 	ldw	r2,44(r2)
   43cfc:	e0fffa17 	ldw	r3,-24(fp)
   43d00:	18801526 	beq	r3,r2,43d58 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43d04:	e0bffc17 	ldw	r2,-16(fp)
   43d08:	10800037 	ldwio	r2,0(r2)
   43d0c:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   43d10:	e0bfff17 	ldw	r2,-4(fp)
   43d14:	10a0000c 	andi	r2,r2,32768
   43d18:	10001126 	beq	r2,zero,43d60 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43d1c:	e0bffd17 	ldw	r2,-12(fp)
   43d20:	10800a17 	ldw	r2,40(r2)
   43d24:	e0ffff17 	ldw	r3,-4(fp)
   43d28:	1809883a 	mov	r4,r3
   43d2c:	e0fffd17 	ldw	r3,-12(fp)
   43d30:	1885883a 	add	r2,r3,r2
   43d34:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43d38:	e0bffd17 	ldw	r2,-12(fp)
   43d3c:	10800a17 	ldw	r2,40(r2)
   43d40:	10800044 	addi	r2,r2,1
   43d44:	10c1ffcc 	andi	r3,r2,2047
   43d48:	e0bffd17 	ldw	r2,-12(fp)
   43d4c:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   43d50:	0001883a 	nop
      {
   43d54:	003fe206 	br	43ce0 <altera_avalon_jtag_uart_irq+0x54>
          break;
   43d58:	0001883a 	nop
   43d5c:	00000106 	br	43d64 <altera_avalon_jtag_uart_irq+0xd8>
          break;
   43d60:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   43d64:	e0bfff17 	ldw	r2,-4(fp)
   43d68:	10bfffec 	andhi	r2,r2,65535
   43d6c:	10000f26 	beq	r2,zero,43dac <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43d70:	e0bffd17 	ldw	r2,-12(fp)
   43d74:	10c00817 	ldw	r3,32(r2)
   43d78:	00bfff84 	movi	r2,-2
   43d7c:	1886703a 	and	r3,r3,r2
   43d80:	e0bffd17 	ldw	r2,-12(fp)
   43d84:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   43d88:	e0bffc17 	ldw	r2,-16(fp)
   43d8c:	10800104 	addi	r2,r2,4
   43d90:	1007883a 	mov	r3,r2
   43d94:	e0bffd17 	ldw	r2,-12(fp)
   43d98:	10800817 	ldw	r2,32(r2)
   43d9c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43da0:	e0bffc17 	ldw	r2,-16(fp)
   43da4:	10800104 	addi	r2,r2,4
   43da8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   43dac:	e0bffb17 	ldw	r2,-20(fp)
   43db0:	1080800c 	andi	r2,r2,512
   43db4:	103fbe26 	beq	r2,zero,43cb0 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   43db8:	e0bffb17 	ldw	r2,-20(fp)
   43dbc:	1004d43a 	srli	r2,r2,16
   43dc0:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   43dc4:	00001406 	br	43e18 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   43dc8:	e0bffc17 	ldw	r2,-16(fp)
   43dcc:	e0fffd17 	ldw	r3,-12(fp)
   43dd0:	18c00d17 	ldw	r3,52(r3)
   43dd4:	e13ffd17 	ldw	r4,-12(fp)
   43dd8:	20c7883a 	add	r3,r4,r3
   43ddc:	18c20e03 	ldbu	r3,2104(r3)
   43de0:	18c03fcc 	andi	r3,r3,255
   43de4:	18c0201c 	xori	r3,r3,128
   43de8:	18ffe004 	addi	r3,r3,-128
   43dec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43df0:	e0bffd17 	ldw	r2,-12(fp)
   43df4:	10800d17 	ldw	r2,52(r2)
   43df8:	10800044 	addi	r2,r2,1
   43dfc:	10c1ffcc 	andi	r3,r2,2047
   43e00:	e0bffd17 	ldw	r2,-12(fp)
   43e04:	10c00d15 	stw	r3,52(r2)
   43e08:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   43e0c:	e0bffe17 	ldw	r2,-8(fp)
   43e10:	10bfffc4 	addi	r2,r2,-1
   43e14:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   43e18:	e0bffe17 	ldw	r2,-8(fp)
   43e1c:	10000526 	beq	r2,zero,43e34 <altera_avalon_jtag_uart_irq+0x1a8>
   43e20:	e0bffd17 	ldw	r2,-12(fp)
   43e24:	10c00d17 	ldw	r3,52(r2)
   43e28:	e0bffd17 	ldw	r2,-12(fp)
   43e2c:	10800c17 	ldw	r2,48(r2)
   43e30:	18bfe51e 	bne	r3,r2,43dc8 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
   43e34:	e0bffe17 	ldw	r2,-8(fp)
   43e38:	103f9d26 	beq	r2,zero,43cb0 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   43e3c:	e0bffd17 	ldw	r2,-12(fp)
   43e40:	10c00817 	ldw	r3,32(r2)
   43e44:	00bfff44 	movi	r2,-3
   43e48:	1886703a 	and	r3,r3,r2
   43e4c:	e0bffd17 	ldw	r2,-12(fp)
   43e50:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   43e54:	e0bffd17 	ldw	r2,-12(fp)
   43e58:	10800017 	ldw	r2,0(r2)
   43e5c:	10800104 	addi	r2,r2,4
   43e60:	1007883a 	mov	r3,r2
   43e64:	e0bffd17 	ldw	r2,-12(fp)
   43e68:	10800817 	ldw	r2,32(r2)
   43e6c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43e70:	e0bffc17 	ldw	r2,-16(fp)
   43e74:	10800104 	addi	r2,r2,4
   43e78:	10800037 	ldwio	r2,0(r2)
  {
   43e7c:	003f8c06 	br	43cb0 <altera_avalon_jtag_uart_irq+0x24>
      break;
   43e80:	0001883a 	nop
      }
    }
  }
}
   43e84:	0001883a 	nop
   43e88:	e037883a 	mov	sp,fp
   43e8c:	df000017 	ldw	fp,0(sp)
   43e90:	dec00104 	addi	sp,sp,4
   43e94:	f800283a 	ret

00043e98 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   43e98:	defffc04 	addi	sp,sp,-16
   43e9c:	df000315 	stw	fp,12(sp)
   43ea0:	df000304 	addi	fp,sp,12
   43ea4:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   43ea8:	e0bffd17 	ldw	r2,-12(fp)
   43eac:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   43eb0:	e0bfff17 	ldw	r2,-4(fp)
   43eb4:	10800017 	ldw	r2,0(r2)
   43eb8:	10800104 	addi	r2,r2,4
   43ebc:	10800037 	ldwio	r2,0(r2)
   43ec0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   43ec4:	e0bffe17 	ldw	r2,-8(fp)
   43ec8:	1081000c 	andi	r2,r2,1024
   43ecc:	10000b26 	beq	r2,zero,43efc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   43ed0:	e0bfff17 	ldw	r2,-4(fp)
   43ed4:	10800017 	ldw	r2,0(r2)
   43ed8:	10800104 	addi	r2,r2,4
   43edc:	1007883a 	mov	r3,r2
   43ee0:	e0bfff17 	ldw	r2,-4(fp)
   43ee4:	10800817 	ldw	r2,32(r2)
   43ee8:	10810014 	ori	r2,r2,1024
   43eec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   43ef0:	e0bfff17 	ldw	r2,-4(fp)
   43ef4:	10000915 	stw	zero,36(r2)
   43ef8:	00000a06 	br	43f24 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   43efc:	e0bfff17 	ldw	r2,-4(fp)
   43f00:	10c00917 	ldw	r3,36(r2)
   43f04:	00a00034 	movhi	r2,32768
   43f08:	10bfff04 	addi	r2,r2,-4
   43f0c:	10c00536 	bltu	r2,r3,43f24 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   43f10:	e0bfff17 	ldw	r2,-4(fp)
   43f14:	10800917 	ldw	r2,36(r2)
   43f18:	10c00044 	addi	r3,r2,1
   43f1c:	e0bfff17 	ldw	r2,-4(fp)
   43f20:	10c00915 	stw	r3,36(r2)
   43f24:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   43f28:	e037883a 	mov	sp,fp
   43f2c:	df000017 	ldw	fp,0(sp)
   43f30:	dec00104 	addi	sp,sp,4
   43f34:	f800283a 	ret

00043f38 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   43f38:	defffd04 	addi	sp,sp,-12
   43f3c:	df000215 	stw	fp,8(sp)
   43f40:	df000204 	addi	fp,sp,8
   43f44:	e13fff15 	stw	r4,-4(fp)
   43f48:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   43f4c:	00000506 	br	43f64 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   43f50:	e0bffe17 	ldw	r2,-8(fp)
   43f54:	1090000c 	andi	r2,r2,16384
   43f58:	10000226 	beq	r2,zero,43f64 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   43f5c:	00bffd44 	movi	r2,-11
   43f60:	00000b06 	br	43f90 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   43f64:	e0bfff17 	ldw	r2,-4(fp)
   43f68:	10c00d17 	ldw	r3,52(r2)
   43f6c:	e0bfff17 	ldw	r2,-4(fp)
   43f70:	10800c17 	ldw	r2,48(r2)
   43f74:	18800526 	beq	r3,r2,43f8c <altera_avalon_jtag_uart_close+0x54>
   43f78:	e0bfff17 	ldw	r2,-4(fp)
   43f7c:	10c00917 	ldw	r3,36(r2)
   43f80:	e0bfff17 	ldw	r2,-4(fp)
   43f84:	10800117 	ldw	r2,4(r2)
   43f88:	18bff136 	bltu	r3,r2,43f50 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   43f8c:	0005883a 	mov	r2,zero
}
   43f90:	e037883a 	mov	sp,fp
   43f94:	df000017 	ldw	fp,0(sp)
   43f98:	dec00104 	addi	sp,sp,4
   43f9c:	f800283a 	ret

00043fa0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   43fa0:	defffa04 	addi	sp,sp,-24
   43fa4:	df000515 	stw	fp,20(sp)
   43fa8:	df000504 	addi	fp,sp,20
   43fac:	e13ffd15 	stw	r4,-12(fp)
   43fb0:	e17ffc15 	stw	r5,-16(fp)
   43fb4:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   43fb8:	00bff9c4 	movi	r2,-25
   43fbc:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   43fc0:	e0bffc17 	ldw	r2,-16(fp)
   43fc4:	109a8060 	cmpeqi	r2,r2,27137
   43fc8:	1000041e 	bne	r2,zero,43fdc <altera_avalon_jtag_uart_ioctl+0x3c>
   43fcc:	e0bffc17 	ldw	r2,-16(fp)
   43fd0:	109a80a0 	cmpeqi	r2,r2,27138
   43fd4:	1000181e 	bne	r2,zero,44038 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   43fd8:	00002906 	br	44080 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   43fdc:	e0bffd17 	ldw	r2,-12(fp)
   43fe0:	10c00117 	ldw	r3,4(r2)
   43fe4:	00a00034 	movhi	r2,32768
   43fe8:	10bfffc4 	addi	r2,r2,-1
   43fec:	18802126 	beq	r3,r2,44074 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   43ff0:	e0bffb17 	ldw	r2,-20(fp)
   43ff4:	10800017 	ldw	r2,0(r2)
   43ff8:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   43ffc:	e0bffe17 	ldw	r2,-8(fp)
   44000:	10800090 	cmplti	r2,r2,2
   44004:	1000061e 	bne	r2,zero,44020 <altera_avalon_jtag_uart_ioctl+0x80>
   44008:	e0fffe17 	ldw	r3,-8(fp)
   4400c:	00a00034 	movhi	r2,32768
   44010:	10bfffc4 	addi	r2,r2,-1
   44014:	18800226 	beq	r3,r2,44020 <altera_avalon_jtag_uart_ioctl+0x80>
   44018:	e0bffe17 	ldw	r2,-8(fp)
   4401c:	00000206 	br	44028 <altera_avalon_jtag_uart_ioctl+0x88>
   44020:	00a00034 	movhi	r2,32768
   44024:	10bfff84 	addi	r2,r2,-2
   44028:	e0fffd17 	ldw	r3,-12(fp)
   4402c:	18800115 	stw	r2,4(r3)
      rc = 0;
   44030:	e03fff15 	stw	zero,-4(fp)
    break;
   44034:	00000f06 	br	44074 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   44038:	e0bffd17 	ldw	r2,-12(fp)
   4403c:	10c00117 	ldw	r3,4(r2)
   44040:	00a00034 	movhi	r2,32768
   44044:	10bfffc4 	addi	r2,r2,-1
   44048:	18800c26 	beq	r3,r2,4407c <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4404c:	e0bffd17 	ldw	r2,-12(fp)
   44050:	10c00917 	ldw	r3,36(r2)
   44054:	e0bffd17 	ldw	r2,-12(fp)
   44058:	10800117 	ldw	r2,4(r2)
   4405c:	1885803a 	cmpltu	r2,r3,r2
   44060:	10c03fcc 	andi	r3,r2,255
   44064:	e0bffb17 	ldw	r2,-20(fp)
   44068:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4406c:	e03fff15 	stw	zero,-4(fp)
    break;
   44070:	00000206 	br	4407c <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   44074:	0001883a 	nop
   44078:	00000106 	br	44080 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   4407c:	0001883a 	nop
  }

  return rc;
   44080:	e0bfff17 	ldw	r2,-4(fp)
}
   44084:	e037883a 	mov	sp,fp
   44088:	df000017 	ldw	fp,0(sp)
   4408c:	dec00104 	addi	sp,sp,4
   44090:	f800283a 	ret

00044094 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   44094:	defff304 	addi	sp,sp,-52
   44098:	dfc00c15 	stw	ra,48(sp)
   4409c:	df000b15 	stw	fp,44(sp)
   440a0:	df000b04 	addi	fp,sp,44
   440a4:	e13ff815 	stw	r4,-32(fp)
   440a8:	e17ff715 	stw	r5,-36(fp)
   440ac:	e1bff615 	stw	r6,-40(fp)
   440b0:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   440b4:	e0bff717 	ldw	r2,-36(fp)
   440b8:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   440bc:	00004706 	br	441dc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   440c0:	e0bff817 	ldw	r2,-32(fp)
   440c4:	10800a17 	ldw	r2,40(r2)
   440c8:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   440cc:	e0bff817 	ldw	r2,-32(fp)
   440d0:	10800b17 	ldw	r2,44(r2)
   440d4:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   440d8:	e0fffd17 	ldw	r3,-12(fp)
   440dc:	e0bffc17 	ldw	r2,-16(fp)
   440e0:	18800536 	bltu	r3,r2,440f8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   440e4:	e0fffd17 	ldw	r3,-12(fp)
   440e8:	e0bffc17 	ldw	r2,-16(fp)
   440ec:	1885c83a 	sub	r2,r3,r2
   440f0:	e0bffe15 	stw	r2,-8(fp)
   440f4:	00000406 	br	44108 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   440f8:	00c20004 	movi	r3,2048
   440fc:	e0bffc17 	ldw	r2,-16(fp)
   44100:	1885c83a 	sub	r2,r3,r2
   44104:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   44108:	e0bffe17 	ldw	r2,-8(fp)
   4410c:	10001e26 	beq	r2,zero,44188 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   44110:	e0fff617 	ldw	r3,-40(fp)
   44114:	e0bffe17 	ldw	r2,-8(fp)
   44118:	1880022e 	bgeu	r3,r2,44124 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   4411c:	e0bff617 	ldw	r2,-40(fp)
   44120:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   44124:	e0bff817 	ldw	r2,-32(fp)
   44128:	10c00e04 	addi	r3,r2,56
   4412c:	e0bffc17 	ldw	r2,-16(fp)
   44130:	1885883a 	add	r2,r3,r2
   44134:	e1bffe17 	ldw	r6,-8(fp)
   44138:	100b883a 	mov	r5,r2
   4413c:	e13fff17 	ldw	r4,-4(fp)
   44140:	00416880 	call	41688 <memcpy>
      ptr   += n;
   44144:	e0ffff17 	ldw	r3,-4(fp)
   44148:	e0bffe17 	ldw	r2,-8(fp)
   4414c:	1885883a 	add	r2,r3,r2
   44150:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   44154:	e0fff617 	ldw	r3,-40(fp)
   44158:	e0bffe17 	ldw	r2,-8(fp)
   4415c:	1885c83a 	sub	r2,r3,r2
   44160:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44164:	e0fffc17 	ldw	r3,-16(fp)
   44168:	e0bffe17 	ldw	r2,-8(fp)
   4416c:	1885883a 	add	r2,r3,r2
   44170:	10c1ffcc 	andi	r3,r2,2047
   44174:	e0bff817 	ldw	r2,-32(fp)
   44178:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4417c:	e0bff617 	ldw	r2,-40(fp)
   44180:	00bfcf16 	blt	zero,r2,440c0 <altera_avalon_jtag_uart_read+0x2c>
   44184:	00000106 	br	4418c <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   44188:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   4418c:	e0ffff17 	ldw	r3,-4(fp)
   44190:	e0bff717 	ldw	r2,-36(fp)
   44194:	1880141e 	bne	r3,r2,441e8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   44198:	e0bff517 	ldw	r2,-44(fp)
   4419c:	1090000c 	andi	r2,r2,16384
   441a0:	1000131e 	bne	r2,zero,441f0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   441a4:	0001883a 	nop
   441a8:	e0bff817 	ldw	r2,-32(fp)
   441ac:	10800a17 	ldw	r2,40(r2)
   441b0:	e0fffd17 	ldw	r3,-12(fp)
   441b4:	1880051e 	bne	r3,r2,441cc <altera_avalon_jtag_uart_read+0x138>
   441b8:	e0bff817 	ldw	r2,-32(fp)
   441bc:	10c00917 	ldw	r3,36(r2)
   441c0:	e0bff817 	ldw	r2,-32(fp)
   441c4:	10800117 	ldw	r2,4(r2)
   441c8:	18bff736 	bltu	r3,r2,441a8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   441cc:	e0bff817 	ldw	r2,-32(fp)
   441d0:	10800a17 	ldw	r2,40(r2)
   441d4:	e0fffd17 	ldw	r3,-12(fp)
   441d8:	18800726 	beq	r3,r2,441f8 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   441dc:	e0bff617 	ldw	r2,-40(fp)
   441e0:	00bfb716 	blt	zero,r2,440c0 <altera_avalon_jtag_uart_read+0x2c>
   441e4:	00000506 	br	441fc <altera_avalon_jtag_uart_read+0x168>
      break;
   441e8:	0001883a 	nop
   441ec:	00000306 	br	441fc <altera_avalon_jtag_uart_read+0x168>
      break;
   441f0:	0001883a 	nop
   441f4:	00000106 	br	441fc <altera_avalon_jtag_uart_read+0x168>
      break;
   441f8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   441fc:	e0ffff17 	ldw	r3,-4(fp)
   44200:	e0bff717 	ldw	r2,-36(fp)
   44204:	18801926 	beq	r3,r2,4426c <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   44208:	0005303a 	rdctl	r2,status
   4420c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44210:	e0fff917 	ldw	r3,-28(fp)
   44214:	00bfff84 	movi	r2,-2
   44218:	1884703a 	and	r2,r3,r2
   4421c:	1001703a 	wrctl	status,r2
  return context;
   44220:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   44224:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   44228:	e0bff817 	ldw	r2,-32(fp)
   4422c:	10800817 	ldw	r2,32(r2)
   44230:	10c00054 	ori	r3,r2,1
   44234:	e0bff817 	ldw	r2,-32(fp)
   44238:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4423c:	e0bff817 	ldw	r2,-32(fp)
   44240:	10800017 	ldw	r2,0(r2)
   44244:	10800104 	addi	r2,r2,4
   44248:	1007883a 	mov	r3,r2
   4424c:	e0bff817 	ldw	r2,-32(fp)
   44250:	10800817 	ldw	r2,32(r2)
   44254:	18800035 	stwio	r2,0(r3)
   44258:	e0bffb17 	ldw	r2,-20(fp)
   4425c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   44260:	e0bffa17 	ldw	r2,-24(fp)
   44264:	1001703a 	wrctl	status,r2
}
   44268:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4426c:	e0ffff17 	ldw	r3,-4(fp)
   44270:	e0bff717 	ldw	r2,-36(fp)
   44274:	18800426 	beq	r3,r2,44288 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   44278:	e0ffff17 	ldw	r3,-4(fp)
   4427c:	e0bff717 	ldw	r2,-36(fp)
   44280:	1885c83a 	sub	r2,r3,r2
   44284:	00000606 	br	442a0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   44288:	e0bff517 	ldw	r2,-44(fp)
   4428c:	1090000c 	andi	r2,r2,16384
   44290:	10000226 	beq	r2,zero,4429c <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   44294:	00bffd44 	movi	r2,-11
   44298:	00000106 	br	442a0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   4429c:	00bffec4 	movi	r2,-5
}
   442a0:	e037883a 	mov	sp,fp
   442a4:	dfc00117 	ldw	ra,4(sp)
   442a8:	df000017 	ldw	fp,0(sp)
   442ac:	dec00204 	addi	sp,sp,8
   442b0:	f800283a 	ret

000442b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   442b4:	defff304 	addi	sp,sp,-52
   442b8:	dfc00c15 	stw	ra,48(sp)
   442bc:	df000b15 	stw	fp,44(sp)
   442c0:	df000b04 	addi	fp,sp,44
   442c4:	e13ff815 	stw	r4,-32(fp)
   442c8:	e17ff715 	stw	r5,-36(fp)
   442cc:	e1bff615 	stw	r6,-40(fp)
   442d0:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   442d4:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   442d8:	e0bff717 	ldw	r2,-36(fp)
   442dc:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   442e0:	00003706 	br	443c0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   442e4:	e0bff817 	ldw	r2,-32(fp)
   442e8:	10800c17 	ldw	r2,48(r2)
   442ec:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   442f0:	e0bff817 	ldw	r2,-32(fp)
   442f4:	10800d17 	ldw	r2,52(r2)
   442f8:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   442fc:	e0fffc17 	ldw	r3,-16(fp)
   44300:	e0bfff17 	ldw	r2,-4(fp)
   44304:	1880062e 	bgeu	r3,r2,44320 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   44308:	e0ffff17 	ldw	r3,-4(fp)
   4430c:	e0bffc17 	ldw	r2,-16(fp)
   44310:	1885c83a 	sub	r2,r3,r2
   44314:	10bfffc4 	addi	r2,r2,-1
   44318:	e0bffe15 	stw	r2,-8(fp)
   4431c:	00000b06 	br	4434c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   44320:	e0bfff17 	ldw	r2,-4(fp)
   44324:	10000526 	beq	r2,zero,4433c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   44328:	00c20004 	movi	r3,2048
   4432c:	e0bffc17 	ldw	r2,-16(fp)
   44330:	1885c83a 	sub	r2,r3,r2
   44334:	e0bffe15 	stw	r2,-8(fp)
   44338:	00000406 	br	4434c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4433c:	00c1ffc4 	movi	r3,2047
   44340:	e0bffc17 	ldw	r2,-16(fp)
   44344:	1885c83a 	sub	r2,r3,r2
   44348:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   4434c:	e0bffe17 	ldw	r2,-8(fp)
   44350:	10001e26 	beq	r2,zero,443cc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   44354:	e0fff617 	ldw	r3,-40(fp)
   44358:	e0bffe17 	ldw	r2,-8(fp)
   4435c:	1880022e 	bgeu	r3,r2,44368 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   44360:	e0bff617 	ldw	r2,-40(fp)
   44364:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   44368:	e0bff817 	ldw	r2,-32(fp)
   4436c:	10c20e04 	addi	r3,r2,2104
   44370:	e0bffc17 	ldw	r2,-16(fp)
   44374:	1885883a 	add	r2,r3,r2
   44378:	e1bffe17 	ldw	r6,-8(fp)
   4437c:	e17ff717 	ldw	r5,-36(fp)
   44380:	1009883a 	mov	r4,r2
   44384:	00416880 	call	41688 <memcpy>
      ptr   += n;
   44388:	e0fff717 	ldw	r3,-36(fp)
   4438c:	e0bffe17 	ldw	r2,-8(fp)
   44390:	1885883a 	add	r2,r3,r2
   44394:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   44398:	e0fff617 	ldw	r3,-40(fp)
   4439c:	e0bffe17 	ldw	r2,-8(fp)
   443a0:	1885c83a 	sub	r2,r3,r2
   443a4:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   443a8:	e0fffc17 	ldw	r3,-16(fp)
   443ac:	e0bffe17 	ldw	r2,-8(fp)
   443b0:	1885883a 	add	r2,r3,r2
   443b4:	10c1ffcc 	andi	r3,r2,2047
   443b8:	e0bff817 	ldw	r2,-32(fp)
   443bc:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   443c0:	e0bff617 	ldw	r2,-40(fp)
   443c4:	00bfc716 	blt	zero,r2,442e4 <altera_avalon_jtag_uart_write+0x30>
   443c8:	00000106 	br	443d0 <altera_avalon_jtag_uart_write+0x11c>
        break;
   443cc:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   443d0:	0005303a 	rdctl	r2,status
   443d4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   443d8:	e0fff917 	ldw	r3,-28(fp)
   443dc:	00bfff84 	movi	r2,-2
   443e0:	1884703a 	and	r2,r3,r2
   443e4:	1001703a 	wrctl	status,r2
  return context;
   443e8:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   443ec:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   443f0:	e0bff817 	ldw	r2,-32(fp)
   443f4:	10800817 	ldw	r2,32(r2)
   443f8:	10c00094 	ori	r3,r2,2
   443fc:	e0bff817 	ldw	r2,-32(fp)
   44400:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44404:	e0bff817 	ldw	r2,-32(fp)
   44408:	10800017 	ldw	r2,0(r2)
   4440c:	10800104 	addi	r2,r2,4
   44410:	1007883a 	mov	r3,r2
   44414:	e0bff817 	ldw	r2,-32(fp)
   44418:	10800817 	ldw	r2,32(r2)
   4441c:	18800035 	stwio	r2,0(r3)
   44420:	e0bffb17 	ldw	r2,-20(fp)
   44424:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   44428:	e0bffa17 	ldw	r2,-24(fp)
   4442c:	1001703a 	wrctl	status,r2
}
   44430:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   44434:	e0bff617 	ldw	r2,-40(fp)
   44438:	0080100e 	bge	zero,r2,4447c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   4443c:	e0bff517 	ldw	r2,-44(fp)
   44440:	1090000c 	andi	r2,r2,16384
   44444:	1000101e 	bne	r2,zero,44488 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   44448:	0001883a 	nop
   4444c:	e0bff817 	ldw	r2,-32(fp)
   44450:	10800d17 	ldw	r2,52(r2)
   44454:	e0ffff17 	ldw	r3,-4(fp)
   44458:	1880051e 	bne	r3,r2,44470 <altera_avalon_jtag_uart_write+0x1bc>
   4445c:	e0bff817 	ldw	r2,-32(fp)
   44460:	10c00917 	ldw	r3,36(r2)
   44464:	e0bff817 	ldw	r2,-32(fp)
   44468:	10800117 	ldw	r2,4(r2)
   4446c:	18bff736 	bltu	r3,r2,4444c <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   44470:	e0bff817 	ldw	r2,-32(fp)
   44474:	10800917 	ldw	r2,36(r2)
   44478:	1000051e 	bne	r2,zero,44490 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   4447c:	e0bff617 	ldw	r2,-40(fp)
   44480:	00bfcf16 	blt	zero,r2,443c0 <altera_avalon_jtag_uart_write+0x10c>
   44484:	00000306 	br	44494 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   44488:	0001883a 	nop
   4448c:	00000106 	br	44494 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   44490:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   44494:	e0fff717 	ldw	r3,-36(fp)
   44498:	e0bffd17 	ldw	r2,-12(fp)
   4449c:	18800426 	beq	r3,r2,444b0 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   444a0:	e0fff717 	ldw	r3,-36(fp)
   444a4:	e0bffd17 	ldw	r2,-12(fp)
   444a8:	1885c83a 	sub	r2,r3,r2
   444ac:	00000606 	br	444c8 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   444b0:	e0bff517 	ldw	r2,-44(fp)
   444b4:	1090000c 	andi	r2,r2,16384
   444b8:	10000226 	beq	r2,zero,444c4 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   444bc:	00bffd44 	movi	r2,-11
   444c0:	00000106 	br	444c8 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   444c4:	00bffec4 	movi	r2,-5
}
   444c8:	e037883a 	mov	sp,fp
   444cc:	dfc00117 	ldw	ra,4(sp)
   444d0:	df000017 	ldw	fp,0(sp)
   444d4:	dec00204 	addi	sp,sp,8
   444d8:	f800283a 	ret

000444dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   444dc:	defff404 	addi	sp,sp,-48
   444e0:	df000b15 	stw	fp,44(sp)
   444e4:	df000b04 	addi	fp,sp,44
   444e8:	e13ff815 	stw	r4,-32(fp)
   444ec:	e17ff715 	stw	r5,-36(fp)
   444f0:	e1bff615 	stw	r6,-40(fp)
   444f4:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   444f8:	e03ffe15 	stw	zero,-8(fp)
   444fc:	e03fff15 	stw	zero,-4(fp)
   44500:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
   44504:	10004826 	beq	r2,zero,44628 <alt_alarm_start+0x14c>
  {
    if (alarm)
   44508:	e0bff817 	ldw	r2,-32(fp)
   4450c:	10004426 	beq	r2,zero,44620 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   44510:	e0bff817 	ldw	r2,-32(fp)
   44514:	e0fff617 	ldw	r3,-40(fp)
   44518:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   4451c:	e0bff817 	ldw	r2,-32(fp)
   44520:	e0fff517 	ldw	r3,-44(fp)
   44524:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   44528:	0005303a 	rdctl	r2,status
   4452c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44530:	e0fff917 	ldw	r3,-28(fp)
   44534:	00bfff84 	movi	r2,-2
   44538:	1884703a 	and	r2,r3,r2
   4453c:	1001703a 	wrctl	status,r2
  return context;
   44540:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   44544:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   44548:	d0a6b217 	ldw	r2,-25912(gp)
   4454c:	d0e6b317 	ldw	r3,-25908(gp)
      
      current_nticks = alt_nticks();
   44550:	e0bffe15 	stw	r2,-8(fp)
   44554:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   44558:	e0bff717 	ldw	r2,-36(fp)
   4455c:	1011883a 	mov	r8,r2
   44560:	0013883a 	mov	r9,zero
   44564:	e13ffe17 	ldw	r4,-8(fp)
   44568:	e17fff17 	ldw	r5,-4(fp)
   4456c:	4105883a 	add	r2,r8,r4
   44570:	120d803a 	cmpltu	r6,r2,r8
   44574:	4947883a 	add	r3,r9,r5
   44578:	30c9883a 	add	r4,r6,r3
   4457c:	2007883a 	mov	r3,r4
   44580:	1009883a 	mov	r4,r2
   44584:	180b883a 	mov	r5,r3
   44588:	01800044 	movi	r6,1
   4458c:	000f883a 	mov	r7,zero
   44590:	2185883a 	add	r2,r4,r6
   44594:	1111803a 	cmpltu	r8,r2,r4
   44598:	29c7883a 	add	r3,r5,r7
   4459c:	40c9883a 	add	r4,r8,r3
   445a0:	2007883a 	mov	r3,r4
   445a4:	1009883a 	mov	r4,r2
   445a8:	180b883a 	mov	r5,r3
   445ac:	e0bff817 	ldw	r2,-32(fp)
   445b0:	11000215 	stw	r4,8(r2)
   445b4:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   445b8:	e0bff817 	ldw	r2,-32(fp)
   445bc:	d0e00c04 	addi	r3,gp,-32720
   445c0:	e0fffb15 	stw	r3,-20(fp)
   445c4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   445c8:	e0bffa17 	ldw	r2,-24(fp)
   445cc:	e0fffb17 	ldw	r3,-20(fp)
   445d0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   445d4:	e0bffb17 	ldw	r2,-20(fp)
   445d8:	10c00017 	ldw	r3,0(r2)
   445dc:	e0bffa17 	ldw	r2,-24(fp)
   445e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   445e4:	e0bffb17 	ldw	r2,-20(fp)
   445e8:	10800017 	ldw	r2,0(r2)
   445ec:	e0fffa17 	ldw	r3,-24(fp)
   445f0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   445f4:	e0bffb17 	ldw	r2,-20(fp)
   445f8:	e0fffa17 	ldw	r3,-24(fp)
   445fc:	10c00015 	stw	r3,0(r2)
}
   44600:	0001883a 	nop
   44604:	e0bffd17 	ldw	r2,-12(fp)
   44608:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   4460c:	e0bffc17 	ldw	r2,-16(fp)
   44610:	1001703a 	wrctl	status,r2
}
   44614:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   44618:	0005883a 	mov	r2,zero
   4461c:	00000306 	br	4462c <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   44620:	00bffa84 	movi	r2,-22
   44624:	00000106 	br	4462c <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   44628:	00bfde84 	movi	r2,-134
  }
}
   4462c:	e037883a 	mov	sp,fp
   44630:	df000017 	ldw	fp,0(sp)
   44634:	dec00104 	addi	sp,sp,4
   44638:	f800283a 	ret

0004463c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4463c:	defffe04 	addi	sp,sp,-8
   44640:	df000115 	stw	fp,4(sp)
   44644:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   44648:	e03fff15 	stw	zero,-4(fp)
   4464c:	00000506 	br	44664 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   44650:	e0bfff17 	ldw	r2,-4(fp)
   44654:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   44658:	e0bfff17 	ldw	r2,-4(fp)
   4465c:	10800804 	addi	r2,r2,32
   44660:	e0bfff15 	stw	r2,-4(fp)
   44664:	e0bfff17 	ldw	r2,-4(fp)
   44668:	10820030 	cmpltui	r2,r2,2048
   4466c:	103ff81e 	bne	r2,zero,44650 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   44670:	0001883a 	nop
   44674:	0001883a 	nop
   44678:	e037883a 	mov	sp,fp
   4467c:	df000017 	ldw	fp,0(sp)
   44680:	dec00104 	addi	sp,sp,4
   44684:	f800283a 	ret

00044688 <alt_get_errno>:
{
   44688:	defffe04 	addi	sp,sp,-8
   4468c:	dfc00115 	stw	ra,4(sp)
   44690:	df000015 	stw	fp,0(sp)
   44694:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44698:	d0a00917 	ldw	r2,-32732(gp)
   4469c:	10000326 	beq	r2,zero,446ac <alt_get_errno+0x24>
   446a0:	d0a00917 	ldw	r2,-32732(gp)
   446a4:	103ee83a 	callr	r2
   446a8:	00000106 	br	446b0 <alt_get_errno+0x28>
   446ac:	d0a6ac04 	addi	r2,gp,-25936
}
   446b0:	e037883a 	mov	sp,fp
   446b4:	dfc00117 	ldw	ra,4(sp)
   446b8:	df000017 	ldw	fp,0(sp)
   446bc:	dec00204 	addi	sp,sp,8
   446c0:	f800283a 	ret

000446c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   446c4:	defffa04 	addi	sp,sp,-24
   446c8:	dfc00515 	stw	ra,20(sp)
   446cc:	df000415 	stw	fp,16(sp)
   446d0:	df000404 	addi	fp,sp,16
   446d4:	e13ffd15 	stw	r4,-12(fp)
   446d8:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   446dc:	e0bffd17 	ldw	r2,-12(fp)
   446e0:	10000326 	beq	r2,zero,446f0 <alt_dev_llist_insert+0x2c>
   446e4:	e0bffd17 	ldw	r2,-12(fp)
   446e8:	10800217 	ldw	r2,8(r2)
   446ec:	1000061e 	bne	r2,zero,44708 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   446f0:	00446880 	call	44688 <alt_get_errno>
   446f4:	1007883a 	mov	r3,r2
   446f8:	00800584 	movi	r2,22
   446fc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44700:	00bffa84 	movi	r2,-22
   44704:	00001406 	br	44758 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   44708:	e0bffd17 	ldw	r2,-12(fp)
   4470c:	e0fffc17 	ldw	r3,-16(fp)
   44710:	e0ffff15 	stw	r3,-4(fp)
   44714:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   44718:	e0bffe17 	ldw	r2,-8(fp)
   4471c:	e0ffff17 	ldw	r3,-4(fp)
   44720:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44724:	e0bfff17 	ldw	r2,-4(fp)
   44728:	10c00017 	ldw	r3,0(r2)
   4472c:	e0bffe17 	ldw	r2,-8(fp)
   44730:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   44734:	e0bfff17 	ldw	r2,-4(fp)
   44738:	10800017 	ldw	r2,0(r2)
   4473c:	e0fffe17 	ldw	r3,-8(fp)
   44740:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44744:	e0bfff17 	ldw	r2,-4(fp)
   44748:	e0fffe17 	ldw	r3,-8(fp)
   4474c:	10c00015 	stw	r3,0(r2)
}
   44750:	0001883a 	nop

  return 0;  
   44754:	0005883a 	mov	r2,zero
}
   44758:	e037883a 	mov	sp,fp
   4475c:	dfc00117 	ldw	ra,4(sp)
   44760:	df000017 	ldw	fp,0(sp)
   44764:	dec00204 	addi	sp,sp,8
   44768:	f800283a 	ret

0004476c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4476c:	defffd04 	addi	sp,sp,-12
   44770:	dfc00215 	stw	ra,8(sp)
   44774:	df000115 	stw	fp,4(sp)
   44778:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4477c:	00800134 	movhi	r2,4
   44780:	10959204 	addi	r2,r2,22088
   44784:	e0bfff15 	stw	r2,-4(fp)
   44788:	00000606 	br	447a4 <_do_ctors+0x38>
        (*ctor) (); 
   4478c:	e0bfff17 	ldw	r2,-4(fp)
   44790:	10800017 	ldw	r2,0(r2)
   44794:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44798:	e0bfff17 	ldw	r2,-4(fp)
   4479c:	10bfff04 	addi	r2,r2,-4
   447a0:	e0bfff15 	stw	r2,-4(fp)
   447a4:	e0ffff17 	ldw	r3,-4(fp)
   447a8:	00800134 	movhi	r2,4
   447ac:	10959304 	addi	r2,r2,22092
   447b0:	18bff62e 	bgeu	r3,r2,4478c <_do_ctors+0x20>
}
   447b4:	0001883a 	nop
   447b8:	0001883a 	nop
   447bc:	e037883a 	mov	sp,fp
   447c0:	dfc00117 	ldw	ra,4(sp)
   447c4:	df000017 	ldw	fp,0(sp)
   447c8:	dec00204 	addi	sp,sp,8
   447cc:	f800283a 	ret

000447d0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   447d0:	defffd04 	addi	sp,sp,-12
   447d4:	dfc00215 	stw	ra,8(sp)
   447d8:	df000115 	stw	fp,4(sp)
   447dc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   447e0:	00800134 	movhi	r2,4
   447e4:	10959204 	addi	r2,r2,22088
   447e8:	e0bfff15 	stw	r2,-4(fp)
   447ec:	00000606 	br	44808 <_do_dtors+0x38>
        (*dtor) (); 
   447f0:	e0bfff17 	ldw	r2,-4(fp)
   447f4:	10800017 	ldw	r2,0(r2)
   447f8:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   447fc:	e0bfff17 	ldw	r2,-4(fp)
   44800:	10bfff04 	addi	r2,r2,-4
   44804:	e0bfff15 	stw	r2,-4(fp)
   44808:	e0ffff17 	ldw	r3,-4(fp)
   4480c:	00800134 	movhi	r2,4
   44810:	10959304 	addi	r2,r2,22092
   44814:	18bff62e 	bgeu	r3,r2,447f0 <_do_dtors+0x20>
}
   44818:	0001883a 	nop
   4481c:	0001883a 	nop
   44820:	e037883a 	mov	sp,fp
   44824:	dfc00117 	ldw	ra,4(sp)
   44828:	df000017 	ldw	fp,0(sp)
   4482c:	dec00204 	addi	sp,sp,8
   44830:	f800283a 	ret

00044834 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   44834:	defffe04 	addi	sp,sp,-8
   44838:	dfc00115 	stw	ra,4(sp)
   4483c:	df000015 	stw	fp,0(sp)
   44840:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   44844:	01440004 	movi	r5,4096
   44848:	0009883a 	mov	r4,zero
   4484c:	00452a00 	call	452a0 <alt_icache_flush>
#endif
}
   44850:	0001883a 	nop
   44854:	e037883a 	mov	sp,fp
   44858:	dfc00117 	ldw	ra,4(sp)
   4485c:	df000017 	ldw	fp,0(sp)
   44860:	dec00204 	addi	sp,sp,8
   44864:	f800283a 	ret

00044868 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44868:	defff904 	addi	sp,sp,-28
   4486c:	dfc00615 	stw	ra,24(sp)
   44870:	df000515 	stw	fp,20(sp)
   44874:	df000504 	addi	fp,sp,20
   44878:	e13fff15 	stw	r4,-4(fp)
   4487c:	e17ffe15 	stw	r5,-8(fp)
   44880:	e1bffd15 	stw	r6,-12(fp)
   44884:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   44888:	e0800217 	ldw	r2,8(fp)
   4488c:	d8800015 	stw	r2,0(sp)
   44890:	e1fffc17 	ldw	r7,-16(fp)
   44894:	e1bffd17 	ldw	r6,-12(fp)
   44898:	e17ffe17 	ldw	r5,-8(fp)
   4489c:	e13fff17 	ldw	r4,-4(fp)
   448a0:	0044a180 	call	44a18 <alt_iic_isr_register>
}  
   448a4:	e037883a 	mov	sp,fp
   448a8:	dfc00117 	ldw	ra,4(sp)
   448ac:	df000017 	ldw	fp,0(sp)
   448b0:	dec00204 	addi	sp,sp,8
   448b4:	f800283a 	ret

000448b8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   448b8:	defff904 	addi	sp,sp,-28
   448bc:	df000615 	stw	fp,24(sp)
   448c0:	df000604 	addi	fp,sp,24
   448c4:	e13ffb15 	stw	r4,-20(fp)
   448c8:	e17ffa15 	stw	r5,-24(fp)
   448cc:	e0bffa17 	ldw	r2,-24(fp)
   448d0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   448d4:	0005303a 	rdctl	r2,status
   448d8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   448dc:	e0fffe17 	ldw	r3,-8(fp)
   448e0:	00bfff84 	movi	r2,-2
   448e4:	1884703a 	and	r2,r3,r2
   448e8:	1001703a 	wrctl	status,r2
  return context;
   448ec:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   448f0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   448f4:	00c00044 	movi	r3,1
   448f8:	e0bfff17 	ldw	r2,-4(fp)
   448fc:	1884983a 	sll	r2,r3,r2
   44900:	1007883a 	mov	r3,r2
   44904:	d0a6b017 	ldw	r2,-25920(gp)
   44908:	1884b03a 	or	r2,r3,r2
   4490c:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44910:	d0a6b017 	ldw	r2,-25920(gp)
   44914:	100170fa 	wrctl	ienable,r2
   44918:	e0bffd17 	ldw	r2,-12(fp)
   4491c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   44920:	e0bffc17 	ldw	r2,-16(fp)
   44924:	1001703a 	wrctl	status,r2
}
   44928:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   4492c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   44930:	e037883a 	mov	sp,fp
   44934:	df000017 	ldw	fp,0(sp)
   44938:	dec00104 	addi	sp,sp,4
   4493c:	f800283a 	ret

00044940 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   44940:	defff904 	addi	sp,sp,-28
   44944:	df000615 	stw	fp,24(sp)
   44948:	df000604 	addi	fp,sp,24
   4494c:	e13ffb15 	stw	r4,-20(fp)
   44950:	e17ffa15 	stw	r5,-24(fp)
   44954:	e0bffa17 	ldw	r2,-24(fp)
   44958:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   4495c:	0005303a 	rdctl	r2,status
   44960:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44964:	e0fffe17 	ldw	r3,-8(fp)
   44968:	00bfff84 	movi	r2,-2
   4496c:	1884703a 	and	r2,r3,r2
   44970:	1001703a 	wrctl	status,r2
  return context;
   44974:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   44978:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   4497c:	00c00044 	movi	r3,1
   44980:	e0bfff17 	ldw	r2,-4(fp)
   44984:	1884983a 	sll	r2,r3,r2
   44988:	0084303a 	nor	r2,zero,r2
   4498c:	1007883a 	mov	r3,r2
   44990:	d0a6b017 	ldw	r2,-25920(gp)
   44994:	1884703a 	and	r2,r3,r2
   44998:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4499c:	d0a6b017 	ldw	r2,-25920(gp)
   449a0:	100170fa 	wrctl	ienable,r2
   449a4:	e0bffd17 	ldw	r2,-12(fp)
   449a8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   449ac:	e0bffc17 	ldw	r2,-16(fp)
   449b0:	1001703a 	wrctl	status,r2
}
   449b4:	0001883a 	nop
  return 0;
   449b8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   449bc:	e037883a 	mov	sp,fp
   449c0:	df000017 	ldw	fp,0(sp)
   449c4:	dec00104 	addi	sp,sp,4
   449c8:	f800283a 	ret

000449cc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   449cc:	defffc04 	addi	sp,sp,-16
   449d0:	df000315 	stw	fp,12(sp)
   449d4:	df000304 	addi	fp,sp,12
   449d8:	e13ffe15 	stw	r4,-8(fp)
   449dc:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   449e0:	000530fa 	rdctl	r2,ienable
   449e4:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   449e8:	00c00044 	movi	r3,1
   449ec:	e0bffd17 	ldw	r2,-12(fp)
   449f0:	1884983a 	sll	r2,r3,r2
   449f4:	1007883a 	mov	r3,r2
   449f8:	e0bfff17 	ldw	r2,-4(fp)
   449fc:	1884703a 	and	r2,r3,r2
   44a00:	1004c03a 	cmpne	r2,r2,zero
   44a04:	10803fcc 	andi	r2,r2,255
}
   44a08:	e037883a 	mov	sp,fp
   44a0c:	df000017 	ldw	fp,0(sp)
   44a10:	dec00104 	addi	sp,sp,4
   44a14:	f800283a 	ret

00044a18 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44a18:	defff504 	addi	sp,sp,-44
   44a1c:	dfc00a15 	stw	ra,40(sp)
   44a20:	df000915 	stw	fp,36(sp)
   44a24:	df000904 	addi	fp,sp,36
   44a28:	e13ffa15 	stw	r4,-24(fp)
   44a2c:	e17ff915 	stw	r5,-28(fp)
   44a30:	e1bff815 	stw	r6,-32(fp)
   44a34:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   44a38:	00bffa84 	movi	r2,-22
   44a3c:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   44a40:	e0bff917 	ldw	r2,-28(fp)
   44a44:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   44a48:	e0bffe17 	ldw	r2,-8(fp)
   44a4c:	10800808 	cmpgei	r2,r2,32
   44a50:	1000251e 	bne	r2,zero,44ae8 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   44a54:	0005303a 	rdctl	r2,status
   44a58:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44a5c:	e0fffc17 	ldw	r3,-16(fp)
   44a60:	00bfff84 	movi	r2,-2
   44a64:	1884703a 	and	r2,r3,r2
   44a68:	1001703a 	wrctl	status,r2
  return context;
   44a6c:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   44a70:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   44a74:	e0bffe17 	ldw	r2,-8(fp)
   44a78:	100890fa 	slli	r4,r2,3
   44a7c:	e0fff817 	ldw	r3,-32(fp)
   44a80:	00800174 	movhi	r2,5
   44a84:	2085883a 	add	r2,r4,r2
   44a88:	10e2f015 	stw	r3,-29760(r2)
    alt_irq[id].context = isr_context;
   44a8c:	e0bffe17 	ldw	r2,-8(fp)
   44a90:	100890fa 	slli	r4,r2,3
   44a94:	e0fff717 	ldw	r3,-36(fp)
   44a98:	00800174 	movhi	r2,5
   44a9c:	2085883a 	add	r2,r4,r2
   44aa0:	10e2f115 	stw	r3,-29756(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   44aa4:	e0bff817 	ldw	r2,-32(fp)
   44aa8:	10000526 	beq	r2,zero,44ac0 <alt_iic_isr_register+0xa8>
   44aac:	e0bffe17 	ldw	r2,-8(fp)
   44ab0:	100b883a 	mov	r5,r2
   44ab4:	e13ffa17 	ldw	r4,-24(fp)
   44ab8:	00448b80 	call	448b8 <alt_ic_irq_enable>
   44abc:	00000406 	br	44ad0 <alt_iic_isr_register+0xb8>
   44ac0:	e0bffe17 	ldw	r2,-8(fp)
   44ac4:	100b883a 	mov	r5,r2
   44ac8:	e13ffa17 	ldw	r4,-24(fp)
   44acc:	00449400 	call	44940 <alt_ic_irq_disable>
   44ad0:	e0bfff15 	stw	r2,-4(fp)
   44ad4:	e0bffd17 	ldw	r2,-12(fp)
   44ad8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   44adc:	e0bffb17 	ldw	r2,-20(fp)
   44ae0:	1001703a 	wrctl	status,r2
}
   44ae4:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   44ae8:	e0bfff17 	ldw	r2,-4(fp)
}
   44aec:	e037883a 	mov	sp,fp
   44af0:	dfc00117 	ldw	ra,4(sp)
   44af4:	df000017 	ldw	fp,0(sp)
   44af8:	dec00204 	addi	sp,sp,8
   44afc:	f800283a 	ret

00044b00 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   44b00:	defff904 	addi	sp,sp,-28
   44b04:	dfc00615 	stw	ra,24(sp)
   44b08:	df000515 	stw	fp,20(sp)
   44b0c:	df000504 	addi	fp,sp,20
   44b10:	e13ffe15 	stw	r4,-8(fp)
   44b14:	e17ffd15 	stw	r5,-12(fp)
   44b18:	e1bffc15 	stw	r6,-16(fp)
   44b1c:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   44b20:	e1bffb17 	ldw	r6,-20(fp)
   44b24:	e17ffc17 	ldw	r5,-16(fp)
   44b28:	e13ffd17 	ldw	r4,-12(fp)
   44b2c:	0044d200 	call	44d20 <open>
   44b30:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   44b34:	e0bfff17 	ldw	r2,-4(fp)
   44b38:	10001716 	blt	r2,zero,44b98 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
   44b3c:	e0bfff17 	ldw	r2,-4(fp)
   44b40:	10c00324 	muli	r3,r2,12
   44b44:	00800134 	movhi	r2,4
   44b48:	1885883a 	add	r2,r3,r2
   44b4c:	10d7b917 	ldw	r3,24292(r2)
   44b50:	e0bffe17 	ldw	r2,-8(fp)
   44b54:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   44b58:	e0bfff17 	ldw	r2,-4(fp)
   44b5c:	10c00324 	muli	r3,r2,12
   44b60:	00800134 	movhi	r2,4
   44b64:	1885883a 	add	r2,r3,r2
   44b68:	10d7ba17 	ldw	r3,24296(r2)
   44b6c:	e0bffe17 	ldw	r2,-8(fp)
   44b70:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   44b74:	e0bfff17 	ldw	r2,-4(fp)
   44b78:	10c00324 	muli	r3,r2,12
   44b7c:	00800134 	movhi	r2,4
   44b80:	1885883a 	add	r2,r3,r2
   44b84:	10d7bb17 	ldw	r3,24300(r2)
   44b88:	e0bffe17 	ldw	r2,-8(fp)
   44b8c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   44b90:	e13fff17 	ldw	r4,-4(fp)
   44b94:	004376c0 	call	4376c <alt_release_fd>
  }
} 
   44b98:	0001883a 	nop
   44b9c:	e037883a 	mov	sp,fp
   44ba0:	dfc00117 	ldw	ra,4(sp)
   44ba4:	df000017 	ldw	fp,0(sp)
   44ba8:	dec00204 	addi	sp,sp,8
   44bac:	f800283a 	ret

00044bb0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   44bb0:	defffb04 	addi	sp,sp,-20
   44bb4:	dfc00415 	stw	ra,16(sp)
   44bb8:	df000315 	stw	fp,12(sp)
   44bbc:	df000304 	addi	fp,sp,12
   44bc0:	e13fff15 	stw	r4,-4(fp)
   44bc4:	e17ffe15 	stw	r5,-8(fp)
   44bc8:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   44bcc:	01c07fc4 	movi	r7,511
   44bd0:	01800044 	movi	r6,1
   44bd4:	e17fff17 	ldw	r5,-4(fp)
   44bd8:	01000134 	movhi	r4,4
   44bdc:	2117bc04 	addi	r4,r4,24304
   44be0:	0044b000 	call	44b00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   44be4:	01c07fc4 	movi	r7,511
   44be8:	000d883a 	mov	r6,zero
   44bec:	e17ffe17 	ldw	r5,-8(fp)
   44bf0:	01000134 	movhi	r4,4
   44bf4:	2117b904 	addi	r4,r4,24292
   44bf8:	0044b000 	call	44b00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   44bfc:	01c07fc4 	movi	r7,511
   44c00:	01800044 	movi	r6,1
   44c04:	e17ffd17 	ldw	r5,-12(fp)
   44c08:	01000134 	movhi	r4,4
   44c0c:	2117bf04 	addi	r4,r4,24316
   44c10:	0044b000 	call	44b00 <alt_open_fd>
}  
   44c14:	0001883a 	nop
   44c18:	e037883a 	mov	sp,fp
   44c1c:	dfc00117 	ldw	ra,4(sp)
   44c20:	df000017 	ldw	fp,0(sp)
   44c24:	dec00204 	addi	sp,sp,8
   44c28:	f800283a 	ret

00044c2c <alt_get_errno>:
{
   44c2c:	defffe04 	addi	sp,sp,-8
   44c30:	dfc00115 	stw	ra,4(sp)
   44c34:	df000015 	stw	fp,0(sp)
   44c38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44c3c:	d0a00917 	ldw	r2,-32732(gp)
   44c40:	10000326 	beq	r2,zero,44c50 <alt_get_errno+0x24>
   44c44:	d0a00917 	ldw	r2,-32732(gp)
   44c48:	103ee83a 	callr	r2
   44c4c:	00000106 	br	44c54 <alt_get_errno+0x28>
   44c50:	d0a6ac04 	addi	r2,gp,-25936
}
   44c54:	e037883a 	mov	sp,fp
   44c58:	dfc00117 	ldw	ra,4(sp)
   44c5c:	df000017 	ldw	fp,0(sp)
   44c60:	dec00204 	addi	sp,sp,8
   44c64:	f800283a 	ret

00044c68 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   44c68:	defffd04 	addi	sp,sp,-12
   44c6c:	df000215 	stw	fp,8(sp)
   44c70:	df000204 	addi	fp,sp,8
   44c74:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   44c78:	e0bffe17 	ldw	r2,-8(fp)
   44c7c:	10800217 	ldw	r2,8(r2)
   44c80:	10d00034 	orhi	r3,r2,16384
   44c84:	e0bffe17 	ldw	r2,-8(fp)
   44c88:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44c8c:	e03fff15 	stw	zero,-4(fp)
   44c90:	00001a06 	br	44cfc <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44c94:	e0bfff17 	ldw	r2,-4(fp)
   44c98:	10c00324 	muli	r3,r2,12
   44c9c:	00800134 	movhi	r2,4
   44ca0:	1885883a 	add	r2,r3,r2
   44ca4:	10d7b917 	ldw	r3,24292(r2)
   44ca8:	e0bffe17 	ldw	r2,-8(fp)
   44cac:	10800017 	ldw	r2,0(r2)
   44cb0:	18800f1e 	bne	r3,r2,44cf0 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44cb4:	e0bfff17 	ldw	r2,-4(fp)
   44cb8:	10c00324 	muli	r3,r2,12
   44cbc:	00800134 	movhi	r2,4
   44cc0:	1885883a 	add	r2,r3,r2
   44cc4:	1097bb17 	ldw	r2,24300(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
   44cc8:	1000090e 	bge	r2,zero,44cf0 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
   44ccc:	e0bfff17 	ldw	r2,-4(fp)
   44cd0:	10c00324 	muli	r3,r2,12
   44cd4:	00800134 	movhi	r2,4
   44cd8:	1097b904 	addi	r2,r2,24292
   44cdc:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44ce0:	e0fffe17 	ldw	r3,-8(fp)
   44ce4:	18800226 	beq	r3,r2,44cf0 <alt_file_locked+0x88>
    {
      return -EACCES;
   44ce8:	00bffcc4 	movi	r2,-13
   44cec:	00000806 	br	44d10 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
   44cf0:	e0bfff17 	ldw	r2,-4(fp)
   44cf4:	10800044 	addi	r2,r2,1
   44cf8:	e0bfff15 	stw	r2,-4(fp)
   44cfc:	d0a00817 	ldw	r2,-32736(gp)
   44d00:	1007883a 	mov	r3,r2
   44d04:	e0bfff17 	ldw	r2,-4(fp)
   44d08:	18bfe22e 	bgeu	r3,r2,44c94 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   44d0c:	0005883a 	mov	r2,zero
}
   44d10:	e037883a 	mov	sp,fp
   44d14:	df000017 	ldw	fp,0(sp)
   44d18:	dec00104 	addi	sp,sp,4
   44d1c:	f800283a 	ret

00044d20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   44d20:	defff604 	addi	sp,sp,-40
   44d24:	dfc00915 	stw	ra,36(sp)
   44d28:	df000815 	stw	fp,32(sp)
   44d2c:	df000804 	addi	fp,sp,32
   44d30:	e13ffa15 	stw	r4,-24(fp)
   44d34:	e17ff915 	stw	r5,-28(fp)
   44d38:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   44d3c:	00bfffc4 	movi	r2,-1
   44d40:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   44d44:	00bffb44 	movi	r2,-19
   44d48:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   44d4c:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   44d50:	d1600604 	addi	r5,gp,-32744
   44d54:	e13ffa17 	ldw	r4,-24(fp)
   44d58:	00450680 	call	45068 <alt_find_dev>
   44d5c:	e0bfff15 	stw	r2,-4(fp)
   44d60:	e0bfff17 	ldw	r2,-4(fp)
   44d64:	1000051e 	bne	r2,zero,44d7c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   44d68:	e13ffa17 	ldw	r4,-24(fp)
   44d6c:	00450f80 	call	450f8 <alt_find_file>
   44d70:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   44d74:	00800044 	movi	r2,1
   44d78:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   44d7c:	e0bfff17 	ldw	r2,-4(fp)
   44d80:	10002926 	beq	r2,zero,44e28 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   44d84:	e13fff17 	ldw	r4,-4(fp)
   44d88:	00452000 	call	45200 <alt_get_fd>
   44d8c:	e0bffe15 	stw	r2,-8(fp)
   44d90:	e0bffe17 	ldw	r2,-8(fp)
   44d94:	1000030e 	bge	r2,zero,44da4 <open+0x84>
    {
      status = index;
   44d98:	e0bffe17 	ldw	r2,-8(fp)
   44d9c:	e0bffd15 	stw	r2,-12(fp)
   44da0:	00002306 	br	44e30 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   44da4:	e0bffe17 	ldw	r2,-8(fp)
   44da8:	10c00324 	muli	r3,r2,12
   44dac:	00800134 	movhi	r2,4
   44db0:	1097b904 	addi	r2,r2,24292
   44db4:	1885883a 	add	r2,r3,r2
   44db8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   44dbc:	e0fff917 	ldw	r3,-28(fp)
   44dc0:	00900034 	movhi	r2,16384
   44dc4:	10bfffc4 	addi	r2,r2,-1
   44dc8:	1886703a 	and	r3,r3,r2
   44dcc:	e0bffb17 	ldw	r2,-20(fp)
   44dd0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   44dd4:	e0bffc17 	ldw	r2,-16(fp)
   44dd8:	1000051e 	bne	r2,zero,44df0 <open+0xd0>
   44ddc:	e13ffb17 	ldw	r4,-20(fp)
   44de0:	0044c680 	call	44c68 <alt_file_locked>
   44de4:	e0bffd15 	stw	r2,-12(fp)
   44de8:	e0bffd17 	ldw	r2,-12(fp)
   44dec:	10001016 	blt	r2,zero,44e30 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   44df0:	e0bfff17 	ldw	r2,-4(fp)
   44df4:	10800317 	ldw	r2,12(r2)
   44df8:	10000826 	beq	r2,zero,44e1c <open+0xfc>
   44dfc:	e0bfff17 	ldw	r2,-4(fp)
   44e00:	10800317 	ldw	r2,12(r2)
   44e04:	e1fff817 	ldw	r7,-32(fp)
   44e08:	e1bff917 	ldw	r6,-28(fp)
   44e0c:	e17ffa17 	ldw	r5,-24(fp)
   44e10:	e13ffb17 	ldw	r4,-20(fp)
   44e14:	103ee83a 	callr	r2
   44e18:	00000106 	br	44e20 <open+0x100>
   44e1c:	0005883a 	mov	r2,zero
   44e20:	e0bffd15 	stw	r2,-12(fp)
   44e24:	00000206 	br	44e30 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   44e28:	00bffb44 	movi	r2,-19
   44e2c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   44e30:	e0bffd17 	ldw	r2,-12(fp)
   44e34:	1000090e 	bge	r2,zero,44e5c <open+0x13c>
  {
    alt_release_fd (index);  
   44e38:	e13ffe17 	ldw	r4,-8(fp)
   44e3c:	004376c0 	call	4376c <alt_release_fd>
    ALT_ERRNO = -status;
   44e40:	0044c2c0 	call	44c2c <alt_get_errno>
   44e44:	1007883a 	mov	r3,r2
   44e48:	e0bffd17 	ldw	r2,-12(fp)
   44e4c:	0085c83a 	sub	r2,zero,r2
   44e50:	18800015 	stw	r2,0(r3)
    return -1;
   44e54:	00bfffc4 	movi	r2,-1
   44e58:	00000106 	br	44e60 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   44e5c:	e0bffe17 	ldw	r2,-8(fp)
}
   44e60:	e037883a 	mov	sp,fp
   44e64:	dfc00117 	ldw	ra,4(sp)
   44e68:	df000017 	ldw	fp,0(sp)
   44e6c:	dec00204 	addi	sp,sp,8
   44e70:	f800283a 	ret

00044e74 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   44e74:	defffa04 	addi	sp,sp,-24
   44e78:	df000515 	stw	fp,20(sp)
   44e7c:	df000504 	addi	fp,sp,20
   44e80:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   44e84:	0005303a 	rdctl	r2,status
   44e88:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44e8c:	e0fffc17 	ldw	r3,-16(fp)
   44e90:	00bfff84 	movi	r2,-2
   44e94:	1884703a 	and	r2,r3,r2
   44e98:	1001703a 	wrctl	status,r2
  return context;
   44e9c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   44ea0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   44ea4:	e0bffb17 	ldw	r2,-20(fp)
   44ea8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   44eac:	e0bffd17 	ldw	r2,-12(fp)
   44eb0:	10800017 	ldw	r2,0(r2)
   44eb4:	e0fffd17 	ldw	r3,-12(fp)
   44eb8:	18c00117 	ldw	r3,4(r3)
   44ebc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   44ec0:	e0bffd17 	ldw	r2,-12(fp)
   44ec4:	10800117 	ldw	r2,4(r2)
   44ec8:	e0fffd17 	ldw	r3,-12(fp)
   44ecc:	18c00017 	ldw	r3,0(r3)
   44ed0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   44ed4:	e0bffd17 	ldw	r2,-12(fp)
   44ed8:	e0fffd17 	ldw	r3,-12(fp)
   44edc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   44ee0:	e0bffd17 	ldw	r2,-12(fp)
   44ee4:	e0fffd17 	ldw	r3,-12(fp)
   44ee8:	10c00015 	stw	r3,0(r2)
} 
   44eec:	0001883a 	nop
   44ef0:	e0bfff17 	ldw	r2,-4(fp)
   44ef4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   44ef8:	e0bffe17 	ldw	r2,-8(fp)
   44efc:	1001703a 	wrctl	status,r2
}
   44f00:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   44f04:	0001883a 	nop
   44f08:	e037883a 	mov	sp,fp
   44f0c:	df000017 	ldw	fp,0(sp)
   44f10:	dec00104 	addi	sp,sp,4
   44f14:	f800283a 	ret

00044f18 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   44f18:	defff904 	addi	sp,sp,-28
   44f1c:	dfc00615 	stw	ra,24(sp)
   44f20:	df000515 	stw	fp,20(sp)
   44f24:	dc400415 	stw	r17,16(sp)
   44f28:	dc000315 	stw	r16,12(sp)
   44f2c:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   44f30:	d0a00c17 	ldw	r2,-32720(gp)
   44f34:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   44f38:	d126b217 	ldw	r4,-25912(gp)
   44f3c:	d166b317 	ldw	r5,-25908(gp)
   44f40:	01800044 	movi	r6,1
   44f44:	000f883a 	mov	r7,zero
   44f48:	2185883a 	add	r2,r4,r6
   44f4c:	1111803a 	cmpltu	r8,r2,r4
   44f50:	29c7883a 	add	r3,r5,r7
   44f54:	40c9883a 	add	r4,r8,r3
   44f58:	2007883a 	mov	r3,r4
   44f5c:	1009883a 	mov	r4,r2
   44f60:	180b883a 	mov	r5,r3
   44f64:	d126b215 	stw	r4,-25912(gp)
   44f68:	d166b315 	stw	r5,-25908(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   44f6c:	00002906 	br	45014 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   44f70:	e0bffd17 	ldw	r2,-12(fp)
   44f74:	10800017 	ldw	r2,0(r2)
   44f78:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   44f7c:	e13ffd17 	ldw	r4,-12(fp)
   44f80:	20800217 	ldw	r2,8(r4)
   44f84:	20c00317 	ldw	r3,12(r4)
   44f88:	d126b217 	ldw	r4,-25912(gp)
   44f8c:	d166b317 	ldw	r5,-25908(gp)
   44f90:	28c01e36 	bltu	r5,r3,4500c <alt_tick+0xf4>
   44f94:	1940011e 	bne	r3,r5,44f9c <alt_tick+0x84>
   44f98:	20801c36 	bltu	r4,r2,4500c <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   44f9c:	e0bffd17 	ldw	r2,-12(fp)
   44fa0:	10800417 	ldw	r2,16(r2)
   44fa4:	e0fffd17 	ldw	r3,-12(fp)
   44fa8:	18c00517 	ldw	r3,20(r3)
   44fac:	1809883a 	mov	r4,r3
   44fb0:	103ee83a 	callr	r2
   44fb4:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   44fb8:	e0bffb17 	ldw	r2,-20(fp)
   44fbc:	1000031e 	bne	r2,zero,44fcc <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   44fc0:	e13ffd17 	ldw	r4,-12(fp)
   44fc4:	0044e740 	call	44e74 <alt_alarm_stop>
   44fc8:	00001006 	br	4500c <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   44fcc:	e0bffd17 	ldw	r2,-12(fp)
   44fd0:	11000217 	ldw	r4,8(r2)
   44fd4:	11400317 	ldw	r5,12(r2)
   44fd8:	e0bffb17 	ldw	r2,-20(fp)
   44fdc:	1021883a 	mov	r16,r2
   44fe0:	0023883a 	mov	r17,zero
   44fe4:	2405883a 	add	r2,r4,r16
   44fe8:	110d803a 	cmpltu	r6,r2,r4
   44fec:	2c47883a 	add	r3,r5,r17
   44ff0:	30c9883a 	add	r4,r6,r3
   44ff4:	2007883a 	mov	r3,r4
   44ff8:	1009883a 	mov	r4,r2
   44ffc:	180b883a 	mov	r5,r3
   45000:	e0bffd17 	ldw	r2,-12(fp)
   45004:	11000215 	stw	r4,8(r2)
   45008:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   4500c:	e0bffc17 	ldw	r2,-16(fp)
   45010:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   45014:	e0fffd17 	ldw	r3,-12(fp)
   45018:	d0a00c04 	addi	r2,gp,-32720
   4501c:	18bfd41e 	bne	r3,r2,44f70 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   45020:	0001883a 	nop
}
   45024:	0001883a 	nop
   45028:	e6fffe04 	addi	sp,fp,-8
   4502c:	dfc00317 	ldw	ra,12(sp)
   45030:	df000217 	ldw	fp,8(sp)
   45034:	dc400117 	ldw	r17,4(sp)
   45038:	dc000017 	ldw	r16,0(sp)
   4503c:	dec00404 	addi	sp,sp,16
   45040:	f800283a 	ret

00045044 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   45044:	deffff04 	addi	sp,sp,-4
   45048:	df000015 	stw	fp,0(sp)
   4504c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   45050:	000170fa 	wrctl	ienable,zero
}
   45054:	0001883a 	nop
   45058:	e037883a 	mov	sp,fp
   4505c:	df000017 	ldw	fp,0(sp)
   45060:	dec00104 	addi	sp,sp,4
   45064:	f800283a 	ret

00045068 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   45068:	defffa04 	addi	sp,sp,-24
   4506c:	dfc00515 	stw	ra,20(sp)
   45070:	df000415 	stw	fp,16(sp)
   45074:	df000404 	addi	fp,sp,16
   45078:	e13ffd15 	stw	r4,-12(fp)
   4507c:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   45080:	e0bffc17 	ldw	r2,-16(fp)
   45084:	10800017 	ldw	r2,0(r2)
   45088:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4508c:	e13ffd17 	ldw	r4,-12(fp)
   45090:	00403c00 	call	403c0 <strlen>
   45094:	10800044 	addi	r2,r2,1
   45098:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4509c:	00000d06 	br	450d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   450a0:	e0bfff17 	ldw	r2,-4(fp)
   450a4:	10800217 	ldw	r2,8(r2)
   450a8:	e0fffe17 	ldw	r3,-8(fp)
   450ac:	180d883a 	mov	r6,r3
   450b0:	e17ffd17 	ldw	r5,-12(fp)
   450b4:	1009883a 	mov	r4,r2
   450b8:	00453ec0 	call	453ec <memcmp>
   450bc:	1000021e 	bne	r2,zero,450c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   450c0:	e0bfff17 	ldw	r2,-4(fp)
   450c4:	00000706 	br	450e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   450c8:	e0bfff17 	ldw	r2,-4(fp)
   450cc:	10800017 	ldw	r2,0(r2)
   450d0:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   450d4:	e0ffff17 	ldw	r3,-4(fp)
   450d8:	e0bffc17 	ldw	r2,-16(fp)
   450dc:	18bff01e 	bne	r3,r2,450a0 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   450e0:	0005883a 	mov	r2,zero
}
   450e4:	e037883a 	mov	sp,fp
   450e8:	dfc00117 	ldw	ra,4(sp)
   450ec:	df000017 	ldw	fp,0(sp)
   450f0:	dec00204 	addi	sp,sp,8
   450f4:	f800283a 	ret

000450f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   450f8:	defffb04 	addi	sp,sp,-20
   450fc:	dfc00415 	stw	ra,16(sp)
   45100:	df000315 	stw	fp,12(sp)
   45104:	df000304 	addi	fp,sp,12
   45108:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4510c:	d0a00417 	ldw	r2,-32752(gp)
   45110:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45114:	00003106 	br	451dc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   45118:	e0bfff17 	ldw	r2,-4(fp)
   4511c:	10800217 	ldw	r2,8(r2)
   45120:	1009883a 	mov	r4,r2
   45124:	00403c00 	call	403c0 <strlen>
   45128:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4512c:	e0bfff17 	ldw	r2,-4(fp)
   45130:	10c00217 	ldw	r3,8(r2)
   45134:	e0bffe17 	ldw	r2,-8(fp)
   45138:	10bfffc4 	addi	r2,r2,-1
   4513c:	1885883a 	add	r2,r3,r2
   45140:	10800003 	ldbu	r2,0(r2)
   45144:	10803fcc 	andi	r2,r2,255
   45148:	1080201c 	xori	r2,r2,128
   4514c:	10bfe004 	addi	r2,r2,-128
   45150:	10800bd8 	cmpnei	r2,r2,47
   45154:	1000031e 	bne	r2,zero,45164 <alt_find_file+0x6c>
    {
      len -= 1;
   45158:	e0bffe17 	ldw	r2,-8(fp)
   4515c:	10bfffc4 	addi	r2,r2,-1
   45160:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45164:	e0bffe17 	ldw	r2,-8(fp)
   45168:	e0fffd17 	ldw	r3,-12(fp)
   4516c:	1885883a 	add	r2,r3,r2
   45170:	10800003 	ldbu	r2,0(r2)
   45174:	10803fcc 	andi	r2,r2,255
   45178:	1080201c 	xori	r2,r2,128
   4517c:	10bfe004 	addi	r2,r2,-128
   45180:	10800be0 	cmpeqi	r2,r2,47
   45184:	1000081e 	bne	r2,zero,451a8 <alt_find_file+0xb0>
   45188:	e0bffe17 	ldw	r2,-8(fp)
   4518c:	e0fffd17 	ldw	r3,-12(fp)
   45190:	1885883a 	add	r2,r3,r2
   45194:	10800003 	ldbu	r2,0(r2)
   45198:	10803fcc 	andi	r2,r2,255
   4519c:	1080201c 	xori	r2,r2,128
   451a0:	10bfe004 	addi	r2,r2,-128
   451a4:	10000a1e 	bne	r2,zero,451d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   451a8:	e0bfff17 	ldw	r2,-4(fp)
   451ac:	10800217 	ldw	r2,8(r2)
   451b0:	e0fffe17 	ldw	r3,-8(fp)
   451b4:	180d883a 	mov	r6,r3
   451b8:	e17ffd17 	ldw	r5,-12(fp)
   451bc:	1009883a 	mov	r4,r2
   451c0:	00453ec0 	call	453ec <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   451c4:	1000021e 	bne	r2,zero,451d0 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   451c8:	e0bfff17 	ldw	r2,-4(fp)
   451cc:	00000706 	br	451ec <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   451d0:	e0bfff17 	ldw	r2,-4(fp)
   451d4:	10800017 	ldw	r2,0(r2)
   451d8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   451dc:	e0ffff17 	ldw	r3,-4(fp)
   451e0:	d0a00404 	addi	r2,gp,-32752
   451e4:	18bfcc1e 	bne	r3,r2,45118 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   451e8:	0005883a 	mov	r2,zero
}
   451ec:	e037883a 	mov	sp,fp
   451f0:	dfc00117 	ldw	ra,4(sp)
   451f4:	df000017 	ldw	fp,0(sp)
   451f8:	dec00204 	addi	sp,sp,8
   451fc:	f800283a 	ret

00045200 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   45200:	defffc04 	addi	sp,sp,-16
   45204:	df000315 	stw	fp,12(sp)
   45208:	df000304 	addi	fp,sp,12
   4520c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   45210:	00bffa04 	movi	r2,-24
   45214:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   45218:	e03fff15 	stw	zero,-4(fp)
   4521c:	00001706 	br	4527c <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
   45220:	e0bfff17 	ldw	r2,-4(fp)
   45224:	10c00324 	muli	r3,r2,12
   45228:	00800134 	movhi	r2,4
   4522c:	1885883a 	add	r2,r3,r2
   45230:	1097b917 	ldw	r2,24292(r2)
   45234:	10000e1e 	bne	r2,zero,45270 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
   45238:	e0bfff17 	ldw	r2,-4(fp)
   4523c:	11000324 	muli	r4,r2,12
   45240:	e0fffd17 	ldw	r3,-12(fp)
   45244:	00800134 	movhi	r2,4
   45248:	2085883a 	add	r2,r4,r2
   4524c:	10d7b915 	stw	r3,24292(r2)
      if (i > alt_max_fd)
   45250:	d0e00817 	ldw	r3,-32736(gp)
   45254:	e0bfff17 	ldw	r2,-4(fp)
   45258:	1880020e 	bge	r3,r2,45264 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
   4525c:	e0bfff17 	ldw	r2,-4(fp)
   45260:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   45264:	e0bfff17 	ldw	r2,-4(fp)
   45268:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   4526c:	00000706 	br	4528c <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
   45270:	e0bfff17 	ldw	r2,-4(fp)
   45274:	10800044 	addi	r2,r2,1
   45278:	e0bfff15 	stw	r2,-4(fp)
   4527c:	e0bfff17 	ldw	r2,-4(fp)
   45280:	10800810 	cmplti	r2,r2,32
   45284:	103fe61e 	bne	r2,zero,45220 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   45288:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4528c:	e0bffe17 	ldw	r2,-8(fp)
}
   45290:	e037883a 	mov	sp,fp
   45294:	df000017 	ldw	fp,0(sp)
   45298:	dec00104 	addi	sp,sp,4
   4529c:	f800283a 	ret

000452a0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   452a0:	defffb04 	addi	sp,sp,-20
   452a4:	df000415 	stw	fp,16(sp)
   452a8:	df000404 	addi	fp,sp,16
   452ac:	e13ffd15 	stw	r4,-12(fp)
   452b0:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   452b4:	e0bffc17 	ldw	r2,-16(fp)
   452b8:	10840070 	cmpltui	r2,r2,4097
   452bc:	1000021e 	bne	r2,zero,452c8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   452c0:	00840004 	movi	r2,4096
   452c4:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
   452c8:	e0fffd17 	ldw	r3,-12(fp)
   452cc:	e0bffc17 	ldw	r2,-16(fp)
   452d0:	1885883a 	add	r2,r3,r2
   452d4:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   452d8:	e0bffd17 	ldw	r2,-12(fp)
   452dc:	e0bfff15 	stw	r2,-4(fp)
   452e0:	00000506 	br	452f8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   452e4:	e0bfff17 	ldw	r2,-4(fp)
   452e8:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   452ec:	e0bfff17 	ldw	r2,-4(fp)
   452f0:	10800804 	addi	r2,r2,32
   452f4:	e0bfff15 	stw	r2,-4(fp)
   452f8:	e0ffff17 	ldw	r3,-4(fp)
   452fc:	e0bffe17 	ldw	r2,-8(fp)
   45300:	18bff836 	bltu	r3,r2,452e4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   45304:	e0bffd17 	ldw	r2,-12(fp)
   45308:	108007cc 	andi	r2,r2,31
   4530c:	10000226 	beq	r2,zero,45318 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   45310:	e0bfff17 	ldw	r2,-4(fp)
   45314:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   45318:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   4531c:	0001883a 	nop
   45320:	e037883a 	mov	sp,fp
   45324:	df000017 	ldw	fp,0(sp)
   45328:	dec00104 	addi	sp,sp,4
   4532c:	f800283a 	ret

00045330 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   45330:	defffe04 	addi	sp,sp,-8
   45334:	df000115 	stw	fp,4(sp)
   45338:	df000104 	addi	fp,sp,4
   4533c:	e13fff15 	stw	r4,-4(fp)
   45340:	e0bfff17 	ldw	r2,-4(fp)
   45344:	10bffe84 	addi	r2,r2,-6
   45348:	10c00428 	cmpgeui	r3,r2,16
   4534c:	18c03fcc 	andi	r3,r3,255
   45350:	18000f1e 	bne	r3,zero,45390 <alt_exception_cause_generated_bad_addr+0x60>
   45354:	00c00044 	movi	r3,1
   45358:	1884983a 	sll	r2,r3,r2
   4535c:	10e2c8cc 	andi	r3,r2,35619
   45360:	1806c03a 	cmpne	r3,r3,zero
   45364:	18c03fcc 	andi	r3,r3,255
   45368:	1800051e 	bne	r3,zero,45380 <alt_exception_cause_generated_bad_addr+0x50>
   4536c:	1084100c 	andi	r2,r2,4160
   45370:	1004c03a 	cmpne	r2,r2,zero
   45374:	10803fcc 	andi	r2,r2,255
   45378:	1000031e 	bne	r2,zero,45388 <alt_exception_cause_generated_bad_addr+0x58>
   4537c:	00000406 	br	45390 <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   45380:	00800044 	movi	r2,1
   45384:	00000306 	br	45394 <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   45388:	0005883a 	mov	r2,zero
   4538c:	00000106 	br	45394 <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
   45390:	0005883a 	mov	r2,zero
  }
}
   45394:	e037883a 	mov	sp,fp
   45398:	df000017 	ldw	fp,0(sp)
   4539c:	dec00104 	addi	sp,sp,4
   453a0:	f800283a 	ret

000453a4 <atexit>:
   453a4:	200b883a 	mov	r5,r4
   453a8:	000f883a 	mov	r7,zero
   453ac:	000d883a 	mov	r6,zero
   453b0:	0009883a 	mov	r4,zero
   453b4:	00454641 	jmpi	45464 <__register_exitproc>

000453b8 <exit>:
   453b8:	defffe04 	addi	sp,sp,-8
   453bc:	000b883a 	mov	r5,zero
   453c0:	dc000015 	stw	r16,0(sp)
   453c4:	dfc00115 	stw	ra,4(sp)
   453c8:	2021883a 	mov	r16,r4
   453cc:	00454f40 	call	454f4 <__call_exitprocs>
   453d0:	00800134 	movhi	r2,4
   453d4:	111c3117 	ldw	r4,28868(r2)
   453d8:	20800f17 	ldw	r2,60(r4)
   453dc:	10000126 	beq	r2,zero,453e4 <exit+0x2c>
   453e0:	103ee83a 	callr	r2
   453e4:	8009883a 	mov	r4,r16
   453e8:	00456140 	call	45614 <_exit>

000453ec <memcmp>:
   453ec:	30800130 	cmpltui	r2,r6,4
   453f0:	10000b1e 	bne	r2,zero,45420 <memcmp+0x34>
   453f4:	2144b03a 	or	r2,r4,r5
   453f8:	108000cc 	andi	r2,r2,3
   453fc:	1000171e 	bne	r2,zero,4545c <memcmp+0x70>
   45400:	20c00017 	ldw	r3,0(r4)
   45404:	28800017 	ldw	r2,0(r5)
   45408:	1880141e 	bne	r3,r2,4545c <memcmp+0x70>
   4540c:	31bfff04 	addi	r6,r6,-4
   45410:	30800128 	cmpgeui	r2,r6,4
   45414:	21000104 	addi	r4,r4,4
   45418:	29400104 	addi	r5,r5,4
   4541c:	103ff81e 	bne	r2,zero,45400 <memcmp+0x14>
   45420:	30bfffc4 	addi	r2,r6,-1
   45424:	30000b26 	beq	r6,zero,45454 <memcmp+0x68>
   45428:	11800044 	addi	r6,r2,1
   4542c:	218d883a 	add	r6,r4,r6
   45430:	00000106 	br	45438 <memcmp+0x4c>
   45434:	21800726 	beq	r4,r6,45454 <memcmp+0x68>
   45438:	20800003 	ldbu	r2,0(r4)
   4543c:	28c00003 	ldbu	r3,0(r5)
   45440:	21000044 	addi	r4,r4,1
   45444:	29400044 	addi	r5,r5,1
   45448:	10fffa26 	beq	r2,r3,45434 <memcmp+0x48>
   4544c:	10c5c83a 	sub	r2,r2,r3
   45450:	f800283a 	ret
   45454:	0005883a 	mov	r2,zero
   45458:	f800283a 	ret
   4545c:	30bfffc4 	addi	r2,r6,-1
   45460:	003ff106 	br	45428 <memcmp+0x3c>

00045464 <__register_exitproc>:
   45464:	00800134 	movhi	r2,4
   45468:	10dc3117 	ldw	r3,28868(r2)
   4546c:	18805217 	ldw	r2,328(r3)
   45470:	10001726 	beq	r2,zero,454d0 <__register_exitproc+0x6c>
   45474:	10c00117 	ldw	r3,4(r2)
   45478:	1a000808 	cmpgei	r8,r3,32
   4547c:	40001b1e 	bne	r8,zero,454ec <__register_exitproc+0x88>
   45480:	20000b26 	beq	r4,zero,454b0 <__register_exitproc+0x4c>
   45484:	181090ba 	slli	r8,r3,2
   45488:	02400044 	movi	r9,1
   4548c:	48d2983a 	sll	r9,r9,r3
   45490:	1211883a 	add	r8,r2,r8
   45494:	41802215 	stw	r6,136(r8)
   45498:	11806217 	ldw	r6,392(r2)
   4549c:	21000098 	cmpnei	r4,r4,2
   454a0:	324cb03a 	or	r6,r6,r9
   454a4:	11806215 	stw	r6,392(r2)
   454a8:	41c04215 	stw	r7,264(r8)
   454ac:	20000b26 	beq	r4,zero,454dc <__register_exitproc+0x78>
   454b0:	19000084 	addi	r4,r3,2
   454b4:	200890ba 	slli	r4,r4,2
   454b8:	18c00044 	addi	r3,r3,1
   454bc:	10c00115 	stw	r3,4(r2)
   454c0:	1105883a 	add	r2,r2,r4
   454c4:	11400015 	stw	r5,0(r2)
   454c8:	0005883a 	mov	r2,zero
   454cc:	f800283a 	ret
   454d0:	18805304 	addi	r2,r3,332
   454d4:	18805215 	stw	r2,328(r3)
   454d8:	003fe606 	br	45474 <__register_exitproc+0x10>
   454dc:	11006317 	ldw	r4,396(r2)
   454e0:	2248b03a 	or	r4,r4,r9
   454e4:	11006315 	stw	r4,396(r2)
   454e8:	003ff106 	br	454b0 <__register_exitproc+0x4c>
   454ec:	00bfffc4 	movi	r2,-1
   454f0:	f800283a 	ret

000454f4 <__call_exitprocs>:
   454f4:	defff704 	addi	sp,sp,-36
   454f8:	00800134 	movhi	r2,4
   454fc:	dcc00315 	stw	r19,12(sp)
   45500:	14dc3117 	ldw	r19,28868(r2)
   45504:	dc800215 	stw	r18,8(sp)
   45508:	dfc00815 	stw	ra,32(sp)
   4550c:	9c805217 	ldw	r18,328(r19)
   45510:	ddc00715 	stw	r23,28(sp)
   45514:	dd800615 	stw	r22,24(sp)
   45518:	dd400515 	stw	r21,20(sp)
   4551c:	dd000415 	stw	r20,16(sp)
   45520:	dc400115 	stw	r17,4(sp)
   45524:	dc000015 	stw	r16,0(sp)
   45528:	90001026 	beq	r18,zero,4556c <__call_exitprocs+0x78>
   4552c:	202b883a 	mov	r21,r4
   45530:	282d883a 	mov	r22,r5
   45534:	05000044 	movi	r20,1
   45538:	94000117 	ldw	r16,4(r18)
   4553c:	847fffc4 	addi	r17,r16,-1
   45540:	88000a16 	blt	r17,zero,4556c <__call_exitprocs+0x78>
   45544:	84000044 	addi	r16,r16,1
   45548:	802090ba 	slli	r16,r16,2
   4554c:	9421883a 	add	r16,r18,r16
   45550:	b0001126 	beq	r22,zero,45598 <__call_exitprocs+0xa4>
   45554:	80804017 	ldw	r2,256(r16)
   45558:	15800f26 	beq	r2,r22,45598 <__call_exitprocs+0xa4>
   4555c:	8c7fffc4 	addi	r17,r17,-1
   45560:	88bfffd8 	cmpnei	r2,r17,-1
   45564:	843fff04 	addi	r16,r16,-4
   45568:	103ff91e 	bne	r2,zero,45550 <__call_exitprocs+0x5c>
   4556c:	dfc00817 	ldw	ra,32(sp)
   45570:	ddc00717 	ldw	r23,28(sp)
   45574:	dd800617 	ldw	r22,24(sp)
   45578:	dd400517 	ldw	r21,20(sp)
   4557c:	dd000417 	ldw	r20,16(sp)
   45580:	dcc00317 	ldw	r19,12(sp)
   45584:	dc800217 	ldw	r18,8(sp)
   45588:	dc400117 	ldw	r17,4(sp)
   4558c:	dc000017 	ldw	r16,0(sp)
   45590:	dec00904 	addi	sp,sp,36
   45594:	f800283a 	ret
   45598:	90800117 	ldw	r2,4(r18)
   4559c:	81800017 	ldw	r6,0(r16)
   455a0:	10bfffc4 	addi	r2,r2,-1
   455a4:	14401726 	beq	r2,r17,45604 <__call_exitprocs+0x110>
   455a8:	80000015 	stw	zero,0(r16)
   455ac:	303feb26 	beq	r6,zero,4555c <__call_exitprocs+0x68>
   455b0:	a446983a 	sll	r3,r20,r17
   455b4:	90806217 	ldw	r2,392(r18)
   455b8:	95c00117 	ldw	r23,4(r18)
   455bc:	1884703a 	and	r2,r3,r2
   455c0:	1000081e 	bne	r2,zero,455e4 <__call_exitprocs+0xf0>
   455c4:	303ee83a 	callr	r6
   455c8:	90c00117 	ldw	r3,4(r18)
   455cc:	98805217 	ldw	r2,328(r19)
   455d0:	1dc0011e 	bne	r3,r23,455d8 <__call_exitprocs+0xe4>
   455d4:	14bfe126 	beq	r2,r18,4555c <__call_exitprocs+0x68>
   455d8:	103fe426 	beq	r2,zero,4556c <__call_exitprocs+0x78>
   455dc:	1025883a 	mov	r18,r2
   455e0:	003fd506 	br	45538 <__call_exitprocs+0x44>
   455e4:	90806317 	ldw	r2,396(r18)
   455e8:	81002017 	ldw	r4,128(r16)
   455ec:	1886703a 	and	r3,r3,r2
   455f0:	1800061e 	bne	r3,zero,4560c <__call_exitprocs+0x118>
   455f4:	200b883a 	mov	r5,r4
   455f8:	a809883a 	mov	r4,r21
   455fc:	303ee83a 	callr	r6
   45600:	003ff106 	br	455c8 <__call_exitprocs+0xd4>
   45604:	94400115 	stw	r17,4(r18)
   45608:	003fe806 	br	455ac <__call_exitprocs+0xb8>
   4560c:	303ee83a 	callr	r6
   45610:	003fed06 	br	455c8 <__call_exitprocs+0xd4>

00045614 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   45614:	defffd04 	addi	sp,sp,-12
   45618:	df000215 	stw	fp,8(sp)
   4561c:	df000204 	addi	fp,sp,8
   45620:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   45624:	0001883a 	nop
   45628:	e0bffe17 	ldw	r2,-8(fp)
   4562c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   45630:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45634:	10000226 	beq	r2,zero,45640 <_exit+0x2c>
    ALT_SIM_FAIL();
   45638:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   4563c:	00000106 	br	45644 <_exit+0x30>
    ALT_SIM_PASS();
   45640:	002af0b0 	cmpltui	zero,zero,43970
}
   45644:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   45648:	003fff06 	br	45648 <_exit+0x34>
