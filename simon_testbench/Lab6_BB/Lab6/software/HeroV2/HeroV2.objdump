
HeroV2.elf:     file format elf32-littlenios2
HeroV2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040238

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00005674 memsz 0x00005674 flags r-x
    LOAD off    0x00006694 vaddr 0x00045694 paddr 0x00047100 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00000b6c vaddr 0x00048b6c paddr 0x00048b6c align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000218  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005418  00040238  00040238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  00045650  00045650  00006650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00045694  00047100  00006694  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  00048b6c  00048b6c  00008b6c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00048cc4  00048cc4  00008100  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008100  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a10  00000000  00000000  00008130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000177d8  00000000  00000000  00008b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006eba  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00005f73  00000000  00000000  000271d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00001518  00000000  00000000  0002d148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001a7e  00000000  00000000  0002e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000030  00000000  00000000  000300e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00030110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 00001491  00000000  00000000  00030180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 00003fd8  00000000  00000000  00031611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000005ae  00000000  00000000  000355e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00038096  2**0
                  CONTENTS, READONLY
 20 .cpu          00000008  00000000  00000000  00038099  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000380a1  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000380a2  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000380a3  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000380ac  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000380b5  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000c  00000000  00000000  000380be  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000059  00000000  00000000  000380ca  2**0
                  CONTENTS, READONLY
 28 .jdi          00008f98  00000000  00000000  00038123  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00032481  00000000  00000000  000410bb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040238 l    d  .text	00000000 .text
00045650 l    d  .rodata	00000000 .rodata
00045694 l    d  .rwdata	00000000 .rwdata
00048b6c l    d  .bss	00000000 .bss
00048cc4 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
00040280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Main.cpp
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0004045c l     F .text	00000008 __fp_lock
00040470 l     F .text	00000008 __fp_unlock
00040478 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00045694 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00043074 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00043180 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000431ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00043298 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043378 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043464 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043638 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000470f0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00043880 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000439b4 l     F .text	00000034 alt_dev_reg
00046068 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00043c90 l     F .text	0000020c altera_avalon_jtag_uart_irq
00043e9c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004468c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00044b04 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00044c30 l     F .text	0000003c alt_get_errno
00044c6c l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00048b98 g     O .bss	00000004 alt_instruction_exception_handler
00042e68 g     F .text	00000058 _isatty_r
00043574 g     F .text	0000007c alt_main
000402e8 g     F .text	000000cc _puts_r
00048bc4 g     O .bss	00000100 alt_irq
00042b00 g     F .text	00000064 _lseek_r
00047100 g       *ABS*	00000000 __flash_rwdata_start
00048cc4 g       *ABS*	00000000 __alt_heap_start
00042050 g     F .text	0000005c __sseek
00040798 g     F .text	00000010 __sinit
000405e0 g     F .text	00000068 __sfmoreglue
00043614 g     F .text	00000024 __malloc_unlock
0004178c g     F .text	0000012c memmove
00040784 g     F .text	00000014 _cleanup
00045048 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042e08 g     F .text	00000060 _fstat_r
00048b78 g     O .bss	00000004 errno
00041fc8 g     F .text	00000008 __seofread
00048b80 g     O .bss	00000004 alt_argv
0004f0c8 g       *ABS*	00000000 _gp
00045ee8 g     O .rwdata	00000180 alt_fd_list
0004506c g     F .text	00000090 alt_find_dev
0004168c g     F .text	00000100 memcpy
00040464 g     F .text	0000000c _cleanup_r
00044bb4 g     F .text	0000007c alt_io_redirect
00045650 g       *ABS*	00000000 __DTOR_END__
000403b4 g     F .text	00000010 puts
00045334 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00044098 g     F .text	00000220 altera_avalon_jtag_uart_read
00042fb4 g     F .text	00000064 .hidden __udivsi3
000432d4 g     F .text	000000a4 isatty
000452a4 g     F .text	00000090 alt_icache_flush
00048b74 g     O .bss	00000004 __malloc_top_pad
000407e0 g     F .text	000004bc __sfvwrite_r
00041f1c g     F .text	00000058 _sbrk_r
00042da4 g     F .text	00000064 _read_r
000470e8 g     O .rwdata	00000004 alt_max_fd
000422d4 g     F .text	000000f8 _fclose_r
00042664 g     F .text	00000084 fflush
00048b70 g     O .bss	00000004 __malloc_max_sbrked_mem
000434a0 g     F .text	000000d4 lseek
000470c8 g     O .rwdata	00000004 _global_impure_ptr
000419ac g     F .text	00000570 _realloc_r
00048cc4 g       *ABS*	00000000 __bss_end
00044a1c g     F .text	000000e8 alt_iic_isr_register
00044f1c g     F .text	0000012c alt_tick
000407b8 g     F .text	00000014 __fp_lock_all
000449d0 g     F .text	0000004c alt_ic_irq_enabled
00044e78 g     F .text	000000a4 alt_alarm_stop
00048b88 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000c8 alt_irq_handler
00045ec0 g     O .rwdata	00000028 alt_dev_null
00044640 g     F .text	0000004c alt_dcache_flush_all
00047100 g       *ABS*	00000000 __ram_rwdata_end
000470e0 g     O .rwdata	00000008 alt_dev_list
000438bc g     F .text	000000f8 write
00045694 g       *ABS*	00000000 __ram_rodata_end
000431e8 g     F .text	000000b0 fstat
00043018 g     F .text	0000005c .hidden __umodsi3
00048cc4 g       *ABS*	00000000 end
00043bd0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000401c4 g     F .exceptions	00000074 alt_instruction_exception_entry
00045650 g       *ABS*	00000000 __CTOR_LIST__
00072000 g       *ABS*	00000000 __alt_stack_pointer
000442b8 g     F .text	00000228 altera_avalon_jtag_uart_write
000407a8 g     F .text	00000004 __sfp_lock_acquire
000415c0 g     F .text	000000cc memchr
00042804 g     F .text	000002fc _free_r
000454f8 g     F .text	00000120 __call_exitprocs
000470d0 g     O .rwdata	00000004 __malloc_sbrk_base
00040238 g     F .text	0000004c _start
00048b8c g     O .bss	00000004 _alt_tick_rate
00048b90 g     O .bss	00000008 _alt_nticks
00043674 g     F .text	000000fc read
00043a24 g     F .text	00000048 alt_sys_init
00045468 g     F .text	00000090 __register_exitproc
00043f3c g     F .text	00000068 altera_avalon_jtag_uart_close
00045694 g       *ABS*	00000000 __ram_rwdata_start
00045650 g       *ABS*	00000000 __ram_rodata_start
00048b9c g     O .bss	00000028 __malloc_current_mallinfo
00043a6c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00045204 g     F .text	000000a0 alt_get_fd
0004227c g     F .text	00000058 _close_r
000453f0 g     F .text	00000078 memcmp
00043b2c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00048cc4 g       *ABS*	00000000 __alt_stack_base
00043b7c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00042118 g     F .text	00000164 __swsetup_r
00040648 g     F .text	0000013c __sfp
00045ab8 g     O .rwdata	00000408 __malloc_av_
000407b4 g     F .text	00000004 __sinit_lock_release
00041f74 g     F .text	00000054 __sread
000450fc g     F .text	00000108 alt_find_file
000446c8 g     F .text	000000a8 alt_dev_llist_insert
000435f0 g     F .text	00000024 __malloc_lock
000437c8 g     F .text	000000b8 sbrk
00042604 g     F .text	00000060 _fflush_r
00048b6c g       *ABS*	00000000 __bss_start
000418b8 g     F .text	000000f4 memset
00040284 g     F .text	00000064 main
00048b84 g     O .bss	00000004 alt_envp
00048b6c g     O .bss	00000004 __malloc_max_total_mem
00043acc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000420ac g     F .text	00000008 __sclose
00072000 g       *ABS*	00000000 __alt_heap_limit
000423cc g     F .text	00000010 fclose
00040ddc g     F .text	000007e4 _malloc_r
000470ec g     O .rwdata	00000004 alt_errno
00040c9c g     F .text	00000098 _fwalk
00042ec0 g     F .text	00000080 .hidden __divsi3
000426e8 g     F .text	0000011c _malloc_trim_r
00045650 g       *ABS*	00000000 __CTOR_END__
00045650 g       *ABS*	00000000 __flash_rodata_start
00045650 g       *ABS*	00000000 __DTOR_LIST__
000439e8 g     F .text	0000003c alt_irq_init
00043770 g     F .text	00000058 alt_release_fd
000453a8 g     F .text	00000014 atexit
000420b4 g     F .text	00000064 _write_r
000470cc g     O .rwdata	00000004 _impure_ptr
00048b7c g     O .bss	00000004 alt_argc
000423dc g     F .text	00000228 __sflush_r
000447d4 g     F .text	00000064 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
000407cc g     F .text	00000014 __fp_unlock_all
000470d8 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00042d14 g     F .text	00000090 __swhatbuf_r
0004486c g     F .text	00000050 alt_ic_isr_register
00047100 g       *ABS*	00000000 _edata
00048cc4 g       *ABS*	00000000 _end
00040238 g       *ABS*	00000000 __ram_exceptions_end
00043fa4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00044944 g     F .text	0000008c alt_ic_irq_disable
00041fd0 g     F .text	00000080 __swrite
000470d4 g     O .rwdata	00000004 __malloc_trim_threshold
000453bc g     F .text	00000034 exit
00040d34 g     F .text	000000a8 _fwalk_reent
00042f40 g     F .text	00000074 .hidden __modsi3
00072000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000407ac g     F .text	00000004 __sfp_lock_release
00045618 g     F .text	00000038 _exit
000444e0 g     F .text	00000160 alt_alarm_start
00042b64 g     F .text	000001b0 __smakebuf_r
000403c4 g     F .text	00000098 strlen
00044d24 g     F .text	00000154 open
00044838 g     F .text	00000034 alt_icache_flush_all
000470f4 g     O .rwdata	00000004 alt_priority_mask
000448bc g     F .text	00000088 alt_ic_irq_enable
000470f8 g     O .rwdata	00000008 alt_alarm_list
00044770 g     F .text	00000064 _do_ctors
000430b0 g     F .text	000000d0 close
000433e0 g     F .text	00000084 alt_load
000407b0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08408e14 	ori	at,at,568
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
   40094:	e93fff04 	addi	r4,ea,-4
   40098:	00401c40 	call	401c4 <alt_instruction_exception_entry>
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>
   400a0:	ebffff04 	addi	r15,ea,-4
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0ffff17 	ldw	r3,-4(fp)
   40130:	e0bffe17 	ldw	r2,-8(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001126 	beq	r2,zero,40180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	e0bffd17 	ldw	r2,-12(fp)
   40140:	100690fa 	slli	r3,r2,3
   40144:	00800174 	movhi	r2,5
   40148:	1885883a 	add	r2,r3,r2
   4014c:	10e2f117 	ldw	r3,-29756(r2)
   40150:	e0bffd17 	ldw	r2,-12(fp)
   40154:	100890fa 	slli	r4,r2,3
   40158:	00800174 	movhi	r2,5
   4015c:	2085883a 	add	r2,r4,r2
   40160:	10a2f217 	ldw	r2,-29752(r2)
   40164:	1009883a 	mov	r4,r2
   40168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   4016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   40170:	0005313a 	rdctl	r2,ipending
   40174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   40178:	e0bffb17 	ldw	r2,-20(fp)
   4017c:	00000706 	br	4019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   40180:	e0bffe17 	ldw	r2,-8(fp)
   40184:	1085883a 	add	r2,r2,r2
   40188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   4018c:	e0bffd17 	ldw	r2,-12(fp)
   40190:	10800044 	addi	r2,r2,1
   40194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   40198:	003fe406 	br	4012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   4019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   401a0:	e0bfff17 	ldw	r2,-4(fp)
   401a4:	103fde1e 	bne	r2,zero,40120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401a8:	0001883a 	nop
}
   401ac:	0001883a 	nop
   401b0:	e037883a 	mov	sp,fp
   401b4:	dfc00117 	ldw	ra,4(sp)
   401b8:	df000017 	ldw	fp,0(sp)
   401bc:	dec00204 	addi	sp,sp,8
   401c0:	f800283a 	ret

000401c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401c4:	defffb04 	addi	sp,sp,-20
   401c8:	dfc00415 	stw	ra,16(sp)
   401cc:	df000315 	stw	fp,12(sp)
   401d0:	df000304 	addi	fp,sp,12
   401d4:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401d8:	000531fa 	rdctl	r2,exception
   401dc:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401e0:	e0bfff17 	ldw	r2,-4(fp)
   401e4:	1004d0ba 	srli	r2,r2,2
   401e8:	108007cc 	andi	r2,r2,31
   401ec:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401f0:	0005333a 	rdctl	r2,badaddr
   401f4:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f8:	d0a6b417 	ldw	r2,-25904(gp)
   401fc:	10000726 	beq	r2,zero,4021c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   40200:	d0a6b417 	ldw	r2,-25904(gp)
   40204:	e0ffff17 	ldw	r3,-4(fp)
   40208:	e1bffe17 	ldw	r6,-8(fp)
   4020c:	e17ffd17 	ldw	r5,-12(fp)
   40210:	1809883a 	mov	r4,r3
   40214:	103ee83a 	callr	r2
   40218:	00000206 	br	40224 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   4021c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40220:	0005883a 	mov	r2,zero
}
   40224:	e037883a 	mov	sp,fp
   40228:	dfc00117 	ldw	ra,4(sp)
   4022c:	df000017 	ldw	fp,0(sp)
   40230:	dec00204 	addi	sp,sp,8
   40234:	f800283a 	ret

Disassembly of section .text:

00040238 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40238:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   4023c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   40240:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40244:	00bffd16 	blt	zero,r2,4023c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40248:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   4024c:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
   40250:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40254:	d6bc3214 	ori	gp,gp,61640
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40258:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   4025c:	10a2db14 	ori	r2,r2,35692

    movhi r3, %hi(__bss_end)
   40260:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40264:	18e33114 	ori	r3,r3,36036

    beq r2, r3, 1f
   40268:	10c00326 	beq	r2,r3,40278 <_start+0x40>

0:
    stw zero, (r2)
   4026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40274:	10fffd36 	bltu	r2,r3,4026c <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40278:	00433e00 	call	433e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   4027c:	00435740 	call	43574 <alt_main>

00040280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40280:	003fff06 	br	40280 <alt_after_alt_main>

00040284 <main>:
#include <stdio.h>

#include "system.h"
#include "altera_avalon_pio_regs.h"
int main()
{
   40284:	defffc04 	addi	sp,sp,-16
   40288:	dfc00315 	stw	ra,12(sp)
   4028c:	df000215 	stw	fp,8(sp)
   40290:	df000204 	addi	fp,sp,8
printf("Hello from Nios II!\n");
   40294:	01000134 	movhi	r4,4
   40298:	21159404 	addi	r4,r4,22096
   4029c:	00403b40 	call	403b4 <puts>
int count = 0;
   402a0:	e03fff15 	stw	zero,-4(fp)
int delay;
while(1)
{
IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, count & 0x01);
   402a4:	e0bfff17 	ldw	r2,-4(fp)
   402a8:	10c0004c 	andi	r3,r2,1
   402ac:	00800234 	movhi	r2,8
   402b0:	10c40035 	stwio	r3,4096(r2)
delay = 0;
   402b4:	e03ffe15 	stw	zero,-8(fp)
while(delay < 2000000)
   402b8:	00000306 	br	402c8 <main+0x44>
{
delay++;
   402bc:	e0bffe17 	ldw	r2,-8(fp)
   402c0:	10800044 	addi	r2,r2,1
   402c4:	e0bffe15 	stw	r2,-8(fp)
while(delay < 2000000)
   402c8:	e0fffe17 	ldw	r3,-8(fp)
   402cc:	008007f4 	movhi	r2,31
   402d0:	10a11fc4 	addi	r2,r2,-31617
   402d4:	10fff90e 	bge	r2,r3,402bc <main+0x38>
}
count++;
   402d8:	e0bfff17 	ldw	r2,-4(fp)
   402dc:	10800044 	addi	r2,r2,1
   402e0:	e0bfff15 	stw	r2,-4(fp)
IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, count & 0x01);
   402e4:	003fef06 	br	402a4 <main+0x20>

000402e8 <_puts_r>:
   402e8:	defff504 	addi	sp,sp,-44
   402ec:	dc000815 	stw	r16,32(sp)
   402f0:	2021883a 	mov	r16,r4
   402f4:	2809883a 	mov	r4,r5
   402f8:	dc400915 	stw	r17,36(sp)
   402fc:	dfc00a15 	stw	ra,40(sp)
   40300:	2823883a 	mov	r17,r5
   40304:	00403c40 	call	403c4 <strlen>
   40308:	11000044 	addi	r4,r2,1
   4030c:	d8800515 	stw	r2,20(sp)
   40310:	00800044 	movi	r2,1
   40314:	00c00134 	movhi	r3,4
   40318:	d8800715 	stw	r2,28(sp)
   4031c:	d8800404 	addi	r2,sp,16
   40320:	18d59904 	addi	r3,r3,22116
   40324:	d8800115 	stw	r2,4(sp)
   40328:	00800084 	movi	r2,2
   4032c:	dc400415 	stw	r17,16(sp)
   40330:	d8c00615 	stw	r3,24(sp)
   40334:	d9000315 	stw	r4,12(sp)
   40338:	d8800215 	stw	r2,8(sp)
   4033c:	81400217 	ldw	r5,8(r16)
   40340:	80000226 	beq	r16,zero,4034c <_puts_r+0x64>
   40344:	80800e17 	ldw	r2,56(r16)
   40348:	10001326 	beq	r2,zero,40398 <_puts_r+0xb0>
   4034c:	2880030b 	ldhu	r2,12(r5)
   40350:	10c8000c 	andi	r3,r2,8192
   40354:	1800061e 	bne	r3,zero,40370 <_puts_r+0x88>
   40358:	28c01917 	ldw	r3,100(r5)
   4035c:	0137ffc4 	movi	r4,-8193
   40360:	10880014 	ori	r2,r2,8192
   40364:	1906703a 	and	r3,r3,r4
   40368:	2880030d 	sth	r2,12(r5)
   4036c:	28c01915 	stw	r3,100(r5)
   40370:	d9800104 	addi	r6,sp,4
   40374:	8009883a 	mov	r4,r16
   40378:	00407e00 	call	407e0 <__sfvwrite_r>
   4037c:	10000b1e 	bne	r2,zero,403ac <_puts_r+0xc4>
   40380:	00800284 	movi	r2,10
   40384:	dfc00a17 	ldw	ra,40(sp)
   40388:	dc400917 	ldw	r17,36(sp)
   4038c:	dc000817 	ldw	r16,32(sp)
   40390:	dec00b04 	addi	sp,sp,44
   40394:	f800283a 	ret
   40398:	8009883a 	mov	r4,r16
   4039c:	d9400015 	stw	r5,0(sp)
   403a0:	00407980 	call	40798 <__sinit>
   403a4:	d9400017 	ldw	r5,0(sp)
   403a8:	003fe806 	br	4034c <_puts_r+0x64>
   403ac:	00bfffc4 	movi	r2,-1
   403b0:	003ff406 	br	40384 <_puts_r+0x9c>

000403b4 <puts>:
   403b4:	00800134 	movhi	r2,4
   403b8:	200b883a 	mov	r5,r4
   403bc:	111c3317 	ldw	r4,28876(r2)
   403c0:	00402e81 	jmpi	402e8 <_puts_r>

000403c4 <strlen>:
   403c4:	208000cc 	andi	r2,r4,3
   403c8:	10000926 	beq	r2,zero,403f0 <strlen+0x2c>
   403cc:	2005883a 	mov	r2,r4
   403d0:	00000306 	br	403e0 <strlen+0x1c>
   403d4:	10800044 	addi	r2,r2,1
   403d8:	10c000cc 	andi	r3,r2,3
   403dc:	18000526 	beq	r3,zero,403f4 <strlen+0x30>
   403e0:	10c00007 	ldb	r3,0(r2)
   403e4:	183ffb1e 	bne	r3,zero,403d4 <strlen+0x10>
   403e8:	1105c83a 	sub	r2,r2,r4
   403ec:	f800283a 	ret
   403f0:	2005883a 	mov	r2,r4
   403f4:	11400017 	ldw	r5,0(r2)
   403f8:	01ffbff4 	movhi	r7,65279
   403fc:	39ffbfc4 	addi	r7,r7,-257
   40400:	29c7883a 	add	r3,r5,r7
   40404:	01a02074 	movhi	r6,32897
   40408:	014a303a 	nor	r5,zero,r5
   4040c:	1946703a 	and	r3,r3,r5
   40410:	31a02004 	addi	r6,r6,-32640
   40414:	1986703a 	and	r3,r3,r6
   40418:	1800071e 	bne	r3,zero,40438 <strlen+0x74>
   4041c:	11400117 	ldw	r5,4(r2)
   40420:	10800104 	addi	r2,r2,4
   40424:	29c7883a 	add	r3,r5,r7
   40428:	014a303a 	nor	r5,zero,r5
   4042c:	1946703a 	and	r3,r3,r5
   40430:	1986703a 	and	r3,r3,r6
   40434:	183ff926 	beq	r3,zero,4041c <strlen+0x58>
   40438:	10c00007 	ldb	r3,0(r2)
   4043c:	183fea26 	beq	r3,zero,403e8 <strlen+0x24>
   40440:	10c00047 	ldb	r3,1(r2)
   40444:	10800044 	addi	r2,r2,1
   40448:	183fe726 	beq	r3,zero,403e8 <strlen+0x24>
   4044c:	10c00047 	ldb	r3,1(r2)
   40450:	10800044 	addi	r2,r2,1
   40454:	183ffa1e 	bne	r3,zero,40440 <strlen+0x7c>
   40458:	003fe306 	br	403e8 <strlen+0x24>

0004045c <__fp_lock>:
   4045c:	0005883a 	mov	r2,zero
   40460:	f800283a 	ret

00040464 <_cleanup_r>:
   40464:	01400134 	movhi	r5,4
   40468:	2948b504 	addi	r5,r5,8916
   4046c:	0040d341 	jmpi	40d34 <_fwalk_reent>

00040470 <__fp_unlock>:
   40470:	0005883a 	mov	r2,zero
   40474:	f800283a 	ret

00040478 <__sinit.part.0>:
   40478:	00c00134 	movhi	r3,4
   4047c:	20800117 	ldw	r2,4(r4)
   40480:	18c11904 	addi	r3,r3,1124
   40484:	20c00f15 	stw	r3,60(r4)
   40488:	2140bb04 	addi	r5,r4,748
   4048c:	00c000c4 	movi	r3,3
   40490:	20c0b915 	stw	r3,740(r4)
   40494:	2140ba15 	stw	r5,744(r4)
   40498:	2000b815 	stw	zero,736(r4)
   4049c:	10001705 	stb	zero,92(r2)
   404a0:	10001745 	stb	zero,93(r2)
   404a4:	10001785 	stb	zero,94(r2)
   404a8:	100017c5 	stb	zero,95(r2)
   404ac:	10001805 	stb	zero,96(r2)
   404b0:	10001845 	stb	zero,97(r2)
   404b4:	10001885 	stb	zero,98(r2)
   404b8:	100018c5 	stb	zero,99(r2)
   404bc:	00c00104 	movi	r3,4
   404c0:	10c00315 	stw	r3,12(r2)
   404c4:	02000134 	movhi	r8,4
   404c8:	20c00217 	ldw	r3,8(r4)
   404cc:	01c00134 	movhi	r7,4
   404d0:	01800134 	movhi	r6,4
   404d4:	01400134 	movhi	r5,4
   404d8:	4207dd04 	addi	r8,r8,8052
   404dc:	39c7f404 	addi	r7,r7,8144
   404e0:	31881404 	addi	r6,r6,8272
   404e4:	29482b04 	addi	r5,r5,8364
   404e8:	02400074 	movhi	r9,1
   404ec:	10001915 	stw	zero,100(r2)
   404f0:	10000015 	stw	zero,0(r2)
   404f4:	10000115 	stw	zero,4(r2)
   404f8:	10000215 	stw	zero,8(r2)
   404fc:	10000415 	stw	zero,16(r2)
   40500:	10000515 	stw	zero,20(r2)
   40504:	10000615 	stw	zero,24(r2)
   40508:	10800715 	stw	r2,28(r2)
   4050c:	12000815 	stw	r8,32(r2)
   40510:	11c00915 	stw	r7,36(r2)
   40514:	11800a15 	stw	r6,40(r2)
   40518:	11400b15 	stw	r5,44(r2)
   4051c:	4a400284 	addi	r9,r9,10
   40520:	1a400315 	stw	r9,12(r3)
   40524:	18001915 	stw	zero,100(r3)
   40528:	18000015 	stw	zero,0(r3)
   4052c:	18000115 	stw	zero,4(r3)
   40530:	18000215 	stw	zero,8(r3)
   40534:	18000415 	stw	zero,16(r3)
   40538:	18001705 	stb	zero,92(r3)
   4053c:	18001745 	stb	zero,93(r3)
   40540:	18001785 	stb	zero,94(r3)
   40544:	180017c5 	stb	zero,95(r3)
   40548:	18001805 	stb	zero,96(r3)
   4054c:	18001845 	stb	zero,97(r3)
   40550:	18001885 	stb	zero,98(r3)
   40554:	180018c5 	stb	zero,99(r3)
   40558:	20800317 	ldw	r2,12(r4)
   4055c:	024000b4 	movhi	r9,2
   40560:	18000515 	stw	zero,20(r3)
   40564:	18000615 	stw	zero,24(r3)
   40568:	18c00715 	stw	r3,28(r3)
   4056c:	1a000815 	stw	r8,32(r3)
   40570:	19c00915 	stw	r7,36(r3)
   40574:	19800a15 	stw	r6,40(r3)
   40578:	19400b15 	stw	r5,44(r3)
   4057c:	4a400484 	addi	r9,r9,18
   40580:	10001915 	stw	zero,100(r2)
   40584:	10000015 	stw	zero,0(r2)
   40588:	10000115 	stw	zero,4(r2)
   4058c:	10000215 	stw	zero,8(r2)
   40590:	12400315 	stw	r9,12(r2)
   40594:	10000415 	stw	zero,16(r2)
   40598:	10000515 	stw	zero,20(r2)
   4059c:	10000615 	stw	zero,24(r2)
   405a0:	10001705 	stb	zero,92(r2)
   405a4:	10001745 	stb	zero,93(r2)
   405a8:	10001785 	stb	zero,94(r2)
   405ac:	100017c5 	stb	zero,95(r2)
   405b0:	10001805 	stb	zero,96(r2)
   405b4:	10001845 	stb	zero,97(r2)
   405b8:	10001885 	stb	zero,98(r2)
   405bc:	100018c5 	stb	zero,99(r2)
   405c0:	10800715 	stw	r2,28(r2)
   405c4:	12000815 	stw	r8,32(r2)
   405c8:	11c00915 	stw	r7,36(r2)
   405cc:	11800a15 	stw	r6,40(r2)
   405d0:	11400b15 	stw	r5,44(r2)
   405d4:	00800044 	movi	r2,1
   405d8:	20800e15 	stw	r2,56(r4)
   405dc:	f800283a 	ret

000405e0 <__sfmoreglue>:
   405e0:	defffc04 	addi	sp,sp,-16
   405e4:	dc400115 	stw	r17,4(sp)
   405e8:	2c7fffc4 	addi	r17,r5,-1
   405ec:	8c401a24 	muli	r17,r17,104
   405f0:	dc800215 	stw	r18,8(sp)
   405f4:	2825883a 	mov	r18,r5
   405f8:	89401d04 	addi	r5,r17,116
   405fc:	dc000015 	stw	r16,0(sp)
   40600:	dfc00315 	stw	ra,12(sp)
   40604:	0040ddc0 	call	40ddc <_malloc_r>
   40608:	1021883a 	mov	r16,r2
   4060c:	10000726 	beq	r2,zero,4062c <__sfmoreglue+0x4c>
   40610:	11000304 	addi	r4,r2,12
   40614:	10000015 	stw	zero,0(r2)
   40618:	14800115 	stw	r18,4(r2)
   4061c:	11000215 	stw	r4,8(r2)
   40620:	89801a04 	addi	r6,r17,104
   40624:	000b883a 	mov	r5,zero
   40628:	00418b80 	call	418b8 <memset>
   4062c:	8005883a 	mov	r2,r16
   40630:	dfc00317 	ldw	ra,12(sp)
   40634:	dc800217 	ldw	r18,8(sp)
   40638:	dc400117 	ldw	r17,4(sp)
   4063c:	dc000017 	ldw	r16,0(sp)
   40640:	dec00404 	addi	sp,sp,16
   40644:	f800283a 	ret

00040648 <__sfp>:
   40648:	defffb04 	addi	sp,sp,-20
   4064c:	00800134 	movhi	r2,4
   40650:	dc400115 	stw	r17,4(sp)
   40654:	145c3217 	ldw	r17,28872(r2)
   40658:	dc800215 	stw	r18,8(sp)
   4065c:	dfc00415 	stw	ra,16(sp)
   40660:	88800e17 	ldw	r2,56(r17)
   40664:	dcc00315 	stw	r19,12(sp)
   40668:	dc000015 	stw	r16,0(sp)
   4066c:	2025883a 	mov	r18,r4
   40670:	10002f26 	beq	r2,zero,40730 <__sfp+0xe8>
   40674:	8c40b804 	addi	r17,r17,736
   40678:	04c00104 	movi	r19,4
   4067c:	88800117 	ldw	r2,4(r17)
   40680:	8c000217 	ldw	r16,8(r17)
   40684:	10bfffc4 	addi	r2,r2,-1
   40688:	1000030e 	bge	r2,zero,40698 <__sfp+0x50>
   4068c:	00002406 	br	40720 <__sfp+0xd8>
   40690:	84001a04 	addi	r16,r16,104
   40694:	28002226 	beq	r5,zero,40720 <__sfp+0xd8>
   40698:	80c0030f 	ldh	r3,12(r16)
   4069c:	10bfffc4 	addi	r2,r2,-1
   406a0:	117fffd8 	cmpnei	r5,r2,-1
   406a4:	183ffa1e 	bne	r3,zero,40690 <__sfp+0x48>
   406a8:	00bffff4 	movhi	r2,65535
   406ac:	10800044 	addi	r2,r2,1
   406b0:	80001915 	stw	zero,100(r16)
   406b4:	80000015 	stw	zero,0(r16)
   406b8:	80000115 	stw	zero,4(r16)
   406bc:	80000215 	stw	zero,8(r16)
   406c0:	80800315 	stw	r2,12(r16)
   406c4:	80000415 	stw	zero,16(r16)
   406c8:	80000515 	stw	zero,20(r16)
   406cc:	80000615 	stw	zero,24(r16)
   406d0:	80001705 	stb	zero,92(r16)
   406d4:	80001745 	stb	zero,93(r16)
   406d8:	80001785 	stb	zero,94(r16)
   406dc:	800017c5 	stb	zero,95(r16)
   406e0:	80001805 	stb	zero,96(r16)
   406e4:	80001845 	stb	zero,97(r16)
   406e8:	80001885 	stb	zero,98(r16)
   406ec:	800018c5 	stb	zero,99(r16)
   406f0:	80000c15 	stw	zero,48(r16)
   406f4:	80000d15 	stw	zero,52(r16)
   406f8:	80001115 	stw	zero,68(r16)
   406fc:	80001215 	stw	zero,72(r16)
   40700:	8005883a 	mov	r2,r16
   40704:	dfc00417 	ldw	ra,16(sp)
   40708:	dcc00317 	ldw	r19,12(sp)
   4070c:	dc800217 	ldw	r18,8(sp)
   40710:	dc400117 	ldw	r17,4(sp)
   40714:	dc000017 	ldw	r16,0(sp)
   40718:	dec00504 	addi	sp,sp,20
   4071c:	f800283a 	ret
   40720:	8c000017 	ldw	r16,0(r17)
   40724:	80000526 	beq	r16,zero,4073c <__sfp+0xf4>
   40728:	8023883a 	mov	r17,r16
   4072c:	003fd306 	br	4067c <__sfp+0x34>
   40730:	8809883a 	mov	r4,r17
   40734:	00404780 	call	40478 <__sinit.part.0>
   40738:	003fce06 	br	40674 <__sfp+0x2c>
   4073c:	01406b04 	movi	r5,428
   40740:	9009883a 	mov	r4,r18
   40744:	0040ddc0 	call	40ddc <_malloc_r>
   40748:	1021883a 	mov	r16,r2
   4074c:	10000926 	beq	r2,zero,40774 <__sfp+0x12c>
   40750:	11000304 	addi	r4,r2,12
   40754:	10000015 	stw	zero,0(r2)
   40758:	14c00115 	stw	r19,4(r2)
   4075c:	11000215 	stw	r4,8(r2)
   40760:	01806804 	movi	r6,416
   40764:	000b883a 	mov	r5,zero
   40768:	00418b80 	call	418b8 <memset>
   4076c:	8c000015 	stw	r16,0(r17)
   40770:	003fed06 	br	40728 <__sfp+0xe0>
   40774:	88000015 	stw	zero,0(r17)
   40778:	00800304 	movi	r2,12
   4077c:	90800015 	stw	r2,0(r18)
   40780:	003fdf06 	br	40700 <__sfp+0xb8>

00040784 <_cleanup>:
   40784:	00800134 	movhi	r2,4
   40788:	111c3217 	ldw	r4,28872(r2)
   4078c:	01400134 	movhi	r5,4
   40790:	2948b504 	addi	r5,r5,8916
   40794:	0040d341 	jmpi	40d34 <_fwalk_reent>

00040798 <__sinit>:
   40798:	20800e17 	ldw	r2,56(r4)
   4079c:	10000126 	beq	r2,zero,407a4 <__sinit+0xc>
   407a0:	f800283a 	ret
   407a4:	00404781 	jmpi	40478 <__sinit.part.0>

000407a8 <__sfp_lock_acquire>:
   407a8:	f800283a 	ret

000407ac <__sfp_lock_release>:
   407ac:	f800283a 	ret

000407b0 <__sinit_lock_acquire>:
   407b0:	f800283a 	ret

000407b4 <__sinit_lock_release>:
   407b4:	f800283a 	ret

000407b8 <__fp_lock_all>:
   407b8:	00800134 	movhi	r2,4
   407bc:	111c3317 	ldw	r4,28876(r2)
   407c0:	01400134 	movhi	r5,4
   407c4:	29411704 	addi	r5,r5,1116
   407c8:	0040c9c1 	jmpi	40c9c <_fwalk>

000407cc <__fp_unlock_all>:
   407cc:	00800134 	movhi	r2,4
   407d0:	111c3317 	ldw	r4,28876(r2)
   407d4:	01400134 	movhi	r5,4
   407d8:	29411c04 	addi	r5,r5,1136
   407dc:	0040c9c1 	jmpi	40c9c <_fwalk>

000407e0 <__sfvwrite_r>:
   407e0:	30800217 	ldw	r2,8(r6)
   407e4:	1000c626 	beq	r2,zero,40b00 <__sfvwrite_r+0x320>
   407e8:	2a80030b 	ldhu	r10,12(r5)
   407ec:	defff404 	addi	sp,sp,-48
   407f0:	df000a15 	stw	fp,40(sp)
   407f4:	dc800415 	stw	r18,16(sp)
   407f8:	dc000215 	stw	r16,8(sp)
   407fc:	dfc00b15 	stw	ra,44(sp)
   40800:	ddc00915 	stw	r23,36(sp)
   40804:	dd800815 	stw	r22,32(sp)
   40808:	dd400715 	stw	r21,28(sp)
   4080c:	dd000615 	stw	r20,24(sp)
   40810:	dcc00515 	stw	r19,20(sp)
   40814:	dc400315 	stw	r17,12(sp)
   40818:	5080020c 	andi	r2,r10,8
   4081c:	3039883a 	mov	fp,r6
   40820:	2025883a 	mov	r18,r4
   40824:	2821883a 	mov	r16,r5
   40828:	10002226 	beq	r2,zero,408b4 <__sfvwrite_r+0xd4>
   4082c:	28800417 	ldw	r2,16(r5)
   40830:	10002026 	beq	r2,zero,408b4 <__sfvwrite_r+0xd4>
   40834:	5080008c 	andi	r2,r10,2
   40838:	e4400017 	ldw	r17,0(fp)
   4083c:	10002526 	beq	r2,zero,408d4 <__sfvwrite_r+0xf4>
   40840:	80800917 	ldw	r2,36(r16)
   40844:	81400717 	ldw	r5,28(r16)
   40848:	05600034 	movhi	r21,32768
   4084c:	0029883a 	mov	r20,zero
   40850:	0027883a 	mov	r19,zero
   40854:	ad7f0004 	addi	r21,r21,-1024
   40858:	a00d883a 	mov	r6,r20
   4085c:	9009883a 	mov	r4,r18
   40860:	98001026 	beq	r19,zero,408a4 <__sfvwrite_r+0xc4>
   40864:	980f883a 	mov	r7,r19
   40868:	acc0012e 	bgeu	r21,r19,40870 <__sfvwrite_r+0x90>
   4086c:	a80f883a 	mov	r7,r21
   40870:	103ee83a 	callr	r2
   40874:	00809d0e 	bge	zero,r2,40aec <__sfvwrite_r+0x30c>
   40878:	e0c00217 	ldw	r3,8(fp)
   4087c:	a0a9883a 	add	r20,r20,r2
   40880:	98a7c83a 	sub	r19,r19,r2
   40884:	1885c83a 	sub	r2,r3,r2
   40888:	e0800215 	stw	r2,8(fp)
   4088c:	10008626 	beq	r2,zero,40aa8 <__sfvwrite_r+0x2c8>
   40890:	80800917 	ldw	r2,36(r16)
   40894:	81400717 	ldw	r5,28(r16)
   40898:	a00d883a 	mov	r6,r20
   4089c:	9009883a 	mov	r4,r18
   408a0:	983ff01e 	bne	r19,zero,40864 <__sfvwrite_r+0x84>
   408a4:	8d000017 	ldw	r20,0(r17)
   408a8:	8cc00117 	ldw	r19,4(r17)
   408ac:	8c400204 	addi	r17,r17,8
   408b0:	003fe906 	br	40858 <__sfvwrite_r+0x78>
   408b4:	800b883a 	mov	r5,r16
   408b8:	9009883a 	mov	r4,r18
   408bc:	00421180 	call	42118 <__swsetup_r>
   408c0:	1000f41e 	bne	r2,zero,40c94 <__sfvwrite_r+0x4b4>
   408c4:	8280030b 	ldhu	r10,12(r16)
   408c8:	e4400017 	ldw	r17,0(fp)
   408cc:	5080008c 	andi	r2,r10,2
   408d0:	103fdb1e 	bne	r2,zero,40840 <__sfvwrite_r+0x60>
   408d4:	5080004c 	andi	r2,r10,1
   408d8:	1000511e 	bne	r2,zero,40a20 <__sfvwrite_r+0x240>
   408dc:	00a00034 	movhi	r2,32768
   408e0:	10bfff84 	addi	r2,r2,-2
   408e4:	01200034 	movhi	r4,32768
   408e8:	82000017 	ldw	r8,0(r16)
   408ec:	80c00217 	ldw	r3,8(r16)
   408f0:	d8800015 	stw	r2,0(sp)
   408f4:	20bfffc4 	addi	r2,r4,-1
   408f8:	002b883a 	mov	r21,zero
   408fc:	002d883a 	mov	r22,zero
   40900:	d8800115 	stw	r2,4(sp)
   40904:	4009883a 	mov	r4,r8
   40908:	1827883a 	mov	r19,r3
   4090c:	b0004026 	beq	r22,zero,40a10 <__sfvwrite_r+0x230>
   40910:	5080800c 	andi	r2,r10,512
   40914:	10009426 	beq	r2,zero,40b68 <__sfvwrite_r+0x388>
   40918:	1829883a 	mov	r20,r3
   4091c:	b0c0b836 	bltu	r22,r3,40c00 <__sfvwrite_r+0x420>
   40920:	5081200c 	andi	r2,r10,1152
   40924:	10002426 	beq	r2,zero,409b8 <__sfvwrite_r+0x1d8>
   40928:	80800517 	ldw	r2,20(r16)
   4092c:	81000417 	ldw	r4,16(r16)
   40930:	108000e4 	muli	r2,r2,3
   40934:	412fc83a 	sub	r23,r8,r4
   40938:	b8c00044 	addi	r3,r23,1
   4093c:	100ed7fa 	srli	r7,r2,31
   40940:	1d87883a 	add	r3,r3,r22
   40944:	388f883a 	add	r7,r7,r2
   40948:	3827d07a 	srai	r19,r7,1
   4094c:	980b883a 	mov	r5,r19
   40950:	98c0022e 	bgeu	r19,r3,4095c <__sfvwrite_r+0x17c>
   40954:	1827883a 	mov	r19,r3
   40958:	180b883a 	mov	r5,r3
   4095c:	5281000c 	andi	r10,r10,1024
   40960:	5000ba26 	beq	r10,zero,40c4c <__sfvwrite_r+0x46c>
   40964:	9009883a 	mov	r4,r18
   40968:	0040ddc0 	call	40ddc <_malloc_r>
   4096c:	1000c526 	beq	r2,zero,40c84 <__sfvwrite_r+0x4a4>
   40970:	81400417 	ldw	r5,16(r16)
   40974:	1009883a 	mov	r4,r2
   40978:	b80d883a 	mov	r6,r23
   4097c:	004168c0 	call	4168c <memcpy>
   40980:	1007883a 	mov	r3,r2
   40984:	8080030b 	ldhu	r2,12(r16)
   40988:	013edfc4 	movi	r4,-1153
   4098c:	1104703a 	and	r2,r2,r4
   40990:	10802014 	ori	r2,r2,128
   40994:	8080030d 	sth	r2,12(r16)
   40998:	9dd1c83a 	sub	r8,r19,r23
   4099c:	1dc9883a 	add	r4,r3,r23
   409a0:	84c00515 	stw	r19,20(r16)
   409a4:	80c00415 	stw	r3,16(r16)
   409a8:	81000015 	stw	r4,0(r16)
   409ac:	b027883a 	mov	r19,r22
   409b0:	82000215 	stw	r8,8(r16)
   409b4:	b029883a 	mov	r20,r22
   409b8:	a00d883a 	mov	r6,r20
   409bc:	a80b883a 	mov	r5,r21
   409c0:	004178c0 	call	4178c <memmove>
   409c4:	80c00217 	ldw	r3,8(r16)
   409c8:	82000017 	ldw	r8,0(r16)
   409cc:	b02f883a 	mov	r23,r22
   409d0:	1cc7c83a 	sub	r3,r3,r19
   409d4:	450d883a 	add	r6,r8,r20
   409d8:	80c00215 	stw	r3,8(r16)
   409dc:	81800015 	stw	r6,0(r16)
   409e0:	002d883a 	mov	r22,zero
   409e4:	e0800217 	ldw	r2,8(fp)
   409e8:	adeb883a 	add	r21,r21,r23
   409ec:	15c5c83a 	sub	r2,r2,r23
   409f0:	e0800215 	stw	r2,8(fp)
   409f4:	10002c26 	beq	r2,zero,40aa8 <__sfvwrite_r+0x2c8>
   409f8:	82000017 	ldw	r8,0(r16)
   409fc:	80c00217 	ldw	r3,8(r16)
   40a00:	8280030b 	ldhu	r10,12(r16)
   40a04:	4009883a 	mov	r4,r8
   40a08:	1827883a 	mov	r19,r3
   40a0c:	b03fc01e 	bne	r22,zero,40910 <__sfvwrite_r+0x130>
   40a10:	8d400017 	ldw	r21,0(r17)
   40a14:	8d800117 	ldw	r22,4(r17)
   40a18:	8c400204 	addi	r17,r17,8
   40a1c:	003fb906 	br	40904 <__sfvwrite_r+0x124>
   40a20:	002f883a 	mov	r23,zero
   40a24:	0005883a 	mov	r2,zero
   40a28:	002d883a 	mov	r22,zero
   40a2c:	0029883a 	mov	r20,zero
   40a30:	a0003526 	beq	r20,zero,40b08 <__sfvwrite_r+0x328>
   40a34:	10003926 	beq	r2,zero,40b1c <__sfvwrite_r+0x33c>
   40a38:	b805883a 	mov	r2,r23
   40a3c:	a02b883a 	mov	r21,r20
   40a40:	1500012e 	bgeu	r2,r20,40a48 <__sfvwrite_r+0x268>
   40a44:	102b883a 	mov	r21,r2
   40a48:	81000017 	ldw	r4,0(r16)
   40a4c:	80800417 	ldw	r2,16(r16)
   40a50:	84c00217 	ldw	r19,8(r16)
   40a54:	81c00517 	ldw	r7,20(r16)
   40a58:	1100022e 	bgeu	r2,r4,40a64 <__sfvwrite_r+0x284>
   40a5c:	99e7883a 	add	r19,r19,r7
   40a60:	9d403616 	blt	r19,r21,40b3c <__sfvwrite_r+0x35c>
   40a64:	a9c06916 	blt	r21,r7,40c0c <__sfvwrite_r+0x42c>
   40a68:	80800917 	ldw	r2,36(r16)
   40a6c:	81400717 	ldw	r5,28(r16)
   40a70:	b00d883a 	mov	r6,r22
   40a74:	9009883a 	mov	r4,r18
   40a78:	103ee83a 	callr	r2
   40a7c:	1027883a 	mov	r19,r2
   40a80:	00801a0e 	bge	zero,r2,40aec <__sfvwrite_r+0x30c>
   40a84:	bcefc83a 	sub	r23,r23,r19
   40a88:	b8001426 	beq	r23,zero,40adc <__sfvwrite_r+0x2fc>
   40a8c:	00800044 	movi	r2,1
   40a90:	e0c00217 	ldw	r3,8(fp)
   40a94:	b4ed883a 	add	r22,r22,r19
   40a98:	a4e9c83a 	sub	r20,r20,r19
   40a9c:	1cc7c83a 	sub	r3,r3,r19
   40aa0:	e0c00215 	stw	r3,8(fp)
   40aa4:	183fe21e 	bne	r3,zero,40a30 <__sfvwrite_r+0x250>
   40aa8:	0005883a 	mov	r2,zero
   40aac:	dfc00b17 	ldw	ra,44(sp)
   40ab0:	df000a17 	ldw	fp,40(sp)
   40ab4:	ddc00917 	ldw	r23,36(sp)
   40ab8:	dd800817 	ldw	r22,32(sp)
   40abc:	dd400717 	ldw	r21,28(sp)
   40ac0:	dd000617 	ldw	r20,24(sp)
   40ac4:	dcc00517 	ldw	r19,20(sp)
   40ac8:	dc800417 	ldw	r18,16(sp)
   40acc:	dc400317 	ldw	r17,12(sp)
   40ad0:	dc000217 	ldw	r16,8(sp)
   40ad4:	dec00c04 	addi	sp,sp,48
   40ad8:	f800283a 	ret
   40adc:	800b883a 	mov	r5,r16
   40ae0:	9009883a 	mov	r4,r18
   40ae4:	00426040 	call	42604 <_fflush_r>
   40ae8:	103fe926 	beq	r2,zero,40a90 <__sfvwrite_r+0x2b0>
   40aec:	8080030b 	ldhu	r2,12(r16)
   40af0:	10801014 	ori	r2,r2,64
   40af4:	8080030d 	sth	r2,12(r16)
   40af8:	00bfffc4 	movi	r2,-1
   40afc:	003feb06 	br	40aac <__sfvwrite_r+0x2cc>
   40b00:	0005883a 	mov	r2,zero
   40b04:	f800283a 	ret
   40b08:	8d000117 	ldw	r20,4(r17)
   40b0c:	8805883a 	mov	r2,r17
   40b10:	8c400204 	addi	r17,r17,8
   40b14:	a03ffc26 	beq	r20,zero,40b08 <__sfvwrite_r+0x328>
   40b18:	15800017 	ldw	r22,0(r2)
   40b1c:	a00d883a 	mov	r6,r20
   40b20:	01400284 	movi	r5,10
   40b24:	b009883a 	mov	r4,r22
   40b28:	00415c00 	call	415c0 <memchr>
   40b2c:	10004426 	beq	r2,zero,40c40 <__sfvwrite_r+0x460>
   40b30:	10800044 	addi	r2,r2,1
   40b34:	15afc83a 	sub	r23,r2,r22
   40b38:	003fbf06 	br	40a38 <__sfvwrite_r+0x258>
   40b3c:	b00b883a 	mov	r5,r22
   40b40:	980d883a 	mov	r6,r19
   40b44:	004178c0 	call	4178c <memmove>
   40b48:	80800017 	ldw	r2,0(r16)
   40b4c:	800b883a 	mov	r5,r16
   40b50:	9009883a 	mov	r4,r18
   40b54:	14c5883a 	add	r2,r2,r19
   40b58:	80800015 	stw	r2,0(r16)
   40b5c:	00426040 	call	42604 <_fflush_r>
   40b60:	103fc826 	beq	r2,zero,40a84 <__sfvwrite_r+0x2a4>
   40b64:	003fe106 	br	40aec <__sfvwrite_r+0x30c>
   40b68:	80800417 	ldw	r2,16(r16)
   40b6c:	12001136 	bltu	r2,r8,40bb4 <__sfvwrite_r+0x3d4>
   40b70:	85c00517 	ldw	r23,20(r16)
   40b74:	b5c00f36 	bltu	r22,r23,40bb4 <__sfvwrite_r+0x3d4>
   40b78:	d8800017 	ldw	r2,0(sp)
   40b7c:	15802e2e 	bgeu	r2,r22,40c38 <__sfvwrite_r+0x458>
   40b80:	d9000117 	ldw	r4,4(sp)
   40b84:	b80b883a 	mov	r5,r23
   40b88:	0042ec00 	call	42ec0 <__divsi3>
   40b8c:	15cf383a 	mul	r7,r2,r23
   40b90:	80c00917 	ldw	r3,36(r16)
   40b94:	81400717 	ldw	r5,28(r16)
   40b98:	a80d883a 	mov	r6,r21
   40b9c:	9009883a 	mov	r4,r18
   40ba0:	183ee83a 	callr	r3
   40ba4:	102f883a 	mov	r23,r2
   40ba8:	00bfd00e 	bge	zero,r2,40aec <__sfvwrite_r+0x30c>
   40bac:	b5edc83a 	sub	r22,r22,r23
   40bb0:	003f8c06 	br	409e4 <__sfvwrite_r+0x204>
   40bb4:	182f883a 	mov	r23,r3
   40bb8:	b0c0012e 	bgeu	r22,r3,40bc0 <__sfvwrite_r+0x3e0>
   40bbc:	b02f883a 	mov	r23,r22
   40bc0:	4009883a 	mov	r4,r8
   40bc4:	b80d883a 	mov	r6,r23
   40bc8:	a80b883a 	mov	r5,r21
   40bcc:	004178c0 	call	4178c <memmove>
   40bd0:	80c00217 	ldw	r3,8(r16)
   40bd4:	82000017 	ldw	r8,0(r16)
   40bd8:	1dc7c83a 	sub	r3,r3,r23
   40bdc:	45d1883a 	add	r8,r8,r23
   40be0:	80c00215 	stw	r3,8(r16)
   40be4:	82000015 	stw	r8,0(r16)
   40be8:	183ff01e 	bne	r3,zero,40bac <__sfvwrite_r+0x3cc>
   40bec:	800b883a 	mov	r5,r16
   40bf0:	9009883a 	mov	r4,r18
   40bf4:	00426040 	call	42604 <_fflush_r>
   40bf8:	103fec26 	beq	r2,zero,40bac <__sfvwrite_r+0x3cc>
   40bfc:	003fbb06 	br	40aec <__sfvwrite_r+0x30c>
   40c00:	b027883a 	mov	r19,r22
   40c04:	b029883a 	mov	r20,r22
   40c08:	003f6b06 	br	409b8 <__sfvwrite_r+0x1d8>
   40c0c:	a80d883a 	mov	r6,r21
   40c10:	b00b883a 	mov	r5,r22
   40c14:	004178c0 	call	4178c <memmove>
   40c18:	80c00217 	ldw	r3,8(r16)
   40c1c:	80800017 	ldw	r2,0(r16)
   40c20:	a827883a 	mov	r19,r21
   40c24:	1d47c83a 	sub	r3,r3,r21
   40c28:	1545883a 	add	r2,r2,r21
   40c2c:	80c00215 	stw	r3,8(r16)
   40c30:	80800015 	stw	r2,0(r16)
   40c34:	003f9306 	br	40a84 <__sfvwrite_r+0x2a4>
   40c38:	b009883a 	mov	r4,r22
   40c3c:	003fd106 	br	40b84 <__sfvwrite_r+0x3a4>
   40c40:	a0800044 	addi	r2,r20,1
   40c44:	102f883a 	mov	r23,r2
   40c48:	003f7c06 	br	40a3c <__sfvwrite_r+0x25c>
   40c4c:	280d883a 	mov	r6,r5
   40c50:	200b883a 	mov	r5,r4
   40c54:	9009883a 	mov	r4,r18
   40c58:	00419ac0 	call	419ac <_realloc_r>
   40c5c:	1007883a 	mov	r3,r2
   40c60:	103f4d1e 	bne	r2,zero,40998 <__sfvwrite_r+0x1b8>
   40c64:	81400417 	ldw	r5,16(r16)
   40c68:	9009883a 	mov	r4,r18
   40c6c:	00428040 	call	42804 <_free_r>
   40c70:	8080030b 	ldhu	r2,12(r16)
   40c74:	00c00304 	movi	r3,12
   40c78:	90c00015 	stw	r3,0(r18)
   40c7c:	10bfdfcc 	andi	r2,r2,65407
   40c80:	003f9b06 	br	40af0 <__sfvwrite_r+0x310>
   40c84:	00c00304 	movi	r3,12
   40c88:	8080030b 	ldhu	r2,12(r16)
   40c8c:	90c00015 	stw	r3,0(r18)
   40c90:	003f9706 	br	40af0 <__sfvwrite_r+0x310>
   40c94:	00bfffc4 	movi	r2,-1
   40c98:	003f8406 	br	40aac <__sfvwrite_r+0x2cc>

00040c9c <_fwalk>:
   40c9c:	defffa04 	addi	sp,sp,-24
   40ca0:	dd000415 	stw	r20,16(sp)
   40ca4:	dcc00315 	stw	r19,12(sp)
   40ca8:	dc800215 	stw	r18,8(sp)
   40cac:	dfc00515 	stw	ra,20(sp)
   40cb0:	dc400115 	stw	r17,4(sp)
   40cb4:	dc000015 	stw	r16,0(sp)
   40cb8:	2827883a 	mov	r19,r5
   40cbc:	2480b804 	addi	r18,r4,736
   40cc0:	0029883a 	mov	r20,zero
   40cc4:	94400117 	ldw	r17,4(r18)
   40cc8:	94000217 	ldw	r16,8(r18)
   40ccc:	8c7fffc4 	addi	r17,r17,-1
   40cd0:	88000d16 	blt	r17,zero,40d08 <_fwalk+0x6c>
   40cd4:	8080030b 	ldhu	r2,12(r16)
   40cd8:	8c7fffc4 	addi	r17,r17,-1
   40cdc:	108000b0 	cmpltui	r2,r2,2
   40ce0:	1000061e 	bne	r2,zero,40cfc <_fwalk+0x60>
   40ce4:	8080038f 	ldh	r2,14(r16)
   40ce8:	8009883a 	mov	r4,r16
   40cec:	10bfffe0 	cmpeqi	r2,r2,-1
   40cf0:	1000021e 	bne	r2,zero,40cfc <_fwalk+0x60>
   40cf4:	983ee83a 	callr	r19
   40cf8:	a0a8b03a 	or	r20,r20,r2
   40cfc:	88bfffd8 	cmpnei	r2,r17,-1
   40d00:	84001a04 	addi	r16,r16,104
   40d04:	103ff31e 	bne	r2,zero,40cd4 <_fwalk+0x38>
   40d08:	94800017 	ldw	r18,0(r18)
   40d0c:	903fed1e 	bne	r18,zero,40cc4 <_fwalk+0x28>
   40d10:	a005883a 	mov	r2,r20
   40d14:	dfc00517 	ldw	ra,20(sp)
   40d18:	dd000417 	ldw	r20,16(sp)
   40d1c:	dcc00317 	ldw	r19,12(sp)
   40d20:	dc800217 	ldw	r18,8(sp)
   40d24:	dc400117 	ldw	r17,4(sp)
   40d28:	dc000017 	ldw	r16,0(sp)
   40d2c:	dec00604 	addi	sp,sp,24
   40d30:	f800283a 	ret

00040d34 <_fwalk_reent>:
   40d34:	defff904 	addi	sp,sp,-28
   40d38:	dd400515 	stw	r21,20(sp)
   40d3c:	dd000415 	stw	r20,16(sp)
   40d40:	dcc00315 	stw	r19,12(sp)
   40d44:	dc800215 	stw	r18,8(sp)
   40d48:	dfc00615 	stw	ra,24(sp)
   40d4c:	dc400115 	stw	r17,4(sp)
   40d50:	dc000015 	stw	r16,0(sp)
   40d54:	202b883a 	mov	r21,r4
   40d58:	2827883a 	mov	r19,r5
   40d5c:	2480b804 	addi	r18,r4,736
   40d60:	0029883a 	mov	r20,zero
   40d64:	94400117 	ldw	r17,4(r18)
   40d68:	94000217 	ldw	r16,8(r18)
   40d6c:	8c7fffc4 	addi	r17,r17,-1
   40d70:	88000e16 	blt	r17,zero,40dac <_fwalk_reent+0x78>
   40d74:	8080030b 	ldhu	r2,12(r16)
   40d78:	8c7fffc4 	addi	r17,r17,-1
   40d7c:	108000b0 	cmpltui	r2,r2,2
   40d80:	1000071e 	bne	r2,zero,40da0 <_fwalk_reent+0x6c>
   40d84:	8080038f 	ldh	r2,14(r16)
   40d88:	800b883a 	mov	r5,r16
   40d8c:	a809883a 	mov	r4,r21
   40d90:	10bfffe0 	cmpeqi	r2,r2,-1
   40d94:	1000021e 	bne	r2,zero,40da0 <_fwalk_reent+0x6c>
   40d98:	983ee83a 	callr	r19
   40d9c:	a0a8b03a 	or	r20,r20,r2
   40da0:	88bfffd8 	cmpnei	r2,r17,-1
   40da4:	84001a04 	addi	r16,r16,104
   40da8:	103ff21e 	bne	r2,zero,40d74 <_fwalk_reent+0x40>
   40dac:	94800017 	ldw	r18,0(r18)
   40db0:	903fec1e 	bne	r18,zero,40d64 <_fwalk_reent+0x30>
   40db4:	a005883a 	mov	r2,r20
   40db8:	dfc00617 	ldw	ra,24(sp)
   40dbc:	dd400517 	ldw	r21,20(sp)
   40dc0:	dd000417 	ldw	r20,16(sp)
   40dc4:	dcc00317 	ldw	r19,12(sp)
   40dc8:	dc800217 	ldw	r18,8(sp)
   40dcc:	dc400117 	ldw	r17,4(sp)
   40dd0:	dc000017 	ldw	r16,0(sp)
   40dd4:	dec00704 	addi	sp,sp,28
   40dd8:	f800283a 	ret

00040ddc <_malloc_r>:
   40ddc:	defff604 	addi	sp,sp,-40
   40de0:	dc400115 	stw	r17,4(sp)
   40de4:	2c4002c4 	addi	r17,r5,11
   40de8:	dc800215 	stw	r18,8(sp)
   40dec:	dfc00915 	stw	ra,36(sp)
   40df0:	df000815 	stw	fp,32(sp)
   40df4:	ddc00715 	stw	r23,28(sp)
   40df8:	dd800615 	stw	r22,24(sp)
   40dfc:	dd400515 	stw	r21,20(sp)
   40e00:	dd000415 	stw	r20,16(sp)
   40e04:	dcc00315 	stw	r19,12(sp)
   40e08:	dc000015 	stw	r16,0(sp)
   40e0c:	888005e8 	cmpgeui	r2,r17,23
   40e10:	2025883a 	mov	r18,r4
   40e14:	10001b1e 	bne	r2,zero,40e84 <_malloc_r+0xa8>
   40e18:	29400468 	cmpgeui	r5,r5,17
   40e1c:	2800821e 	bne	r5,zero,41028 <_malloc_r+0x24c>
   40e20:	00435f00 	call	435f0 <__malloc_lock>
   40e24:	04400404 	movi	r17,16
   40e28:	00800604 	movi	r2,24
   40e2c:	01c00084 	movi	r7,2
   40e30:	04c00134 	movhi	r19,4
   40e34:	9cd6ae04 	addi	r19,r19,23224
   40e38:	9885883a 	add	r2,r19,r2
   40e3c:	14000117 	ldw	r16,4(r2)
   40e40:	10fffe04 	addi	r3,r2,-8
   40e44:	80c08b26 	beq	r16,r3,41074 <_malloc_r+0x298>
   40e48:	80800117 	ldw	r2,4(r16)
   40e4c:	81000317 	ldw	r4,12(r16)
   40e50:	00ffff04 	movi	r3,-4
   40e54:	10c4703a 	and	r2,r2,r3
   40e58:	81400217 	ldw	r5,8(r16)
   40e5c:	8085883a 	add	r2,r16,r2
   40e60:	10c00117 	ldw	r3,4(r2)
   40e64:	29000315 	stw	r4,12(r5)
   40e68:	21400215 	stw	r5,8(r4)
   40e6c:	18c00054 	ori	r3,r3,1
   40e70:	10c00115 	stw	r3,4(r2)
   40e74:	9009883a 	mov	r4,r18
   40e78:	00436140 	call	43614 <__malloc_unlock>
   40e7c:	80800204 	addi	r2,r16,8
   40e80:	00006c06 	br	41034 <_malloc_r+0x258>
   40e84:	00bffe04 	movi	r2,-8
   40e88:	88a2703a 	and	r17,r17,r2
   40e8c:	88006616 	blt	r17,zero,41028 <_malloc_r+0x24c>
   40e90:	89406536 	bltu	r17,r5,41028 <_malloc_r+0x24c>
   40e94:	00435f00 	call	435f0 <__malloc_lock>
   40e98:	88807e28 	cmpgeui	r2,r17,504
   40e9c:	10012326 	beq	r2,zero,4132c <_malloc_r+0x550>
   40ea0:	8804d27a 	srli	r2,r17,9
   40ea4:	10006f26 	beq	r2,zero,41064 <_malloc_r+0x288>
   40ea8:	10c00168 	cmpgeui	r3,r2,5
   40eac:	1800ff1e 	bne	r3,zero,412ac <_malloc_r+0x4d0>
   40eb0:	8804d1ba 	srli	r2,r17,6
   40eb4:	11c00e44 	addi	r7,r2,57
   40eb8:	380890fa 	slli	r4,r7,3
   40ebc:	12000e04 	addi	r8,r2,56
   40ec0:	04c00134 	movhi	r19,4
   40ec4:	9cd6ae04 	addi	r19,r19,23224
   40ec8:	9909883a 	add	r4,r19,r4
   40ecc:	24000117 	ldw	r16,4(r4)
   40ed0:	213ffe04 	addi	r4,r4,-8
   40ed4:	24000b26 	beq	r4,r16,40f04 <_malloc_r+0x128>
   40ed8:	01bfff04 	movi	r6,-4
   40edc:	00000306 	br	40eec <_malloc_r+0x110>
   40ee0:	1800d70e 	bge	r3,zero,41240 <_malloc_r+0x464>
   40ee4:	84000317 	ldw	r16,12(r16)
   40ee8:	24000626 	beq	r4,r16,40f04 <_malloc_r+0x128>
   40eec:	80800117 	ldw	r2,4(r16)
   40ef0:	1184703a 	and	r2,r2,r6
   40ef4:	1447c83a 	sub	r3,r2,r17
   40ef8:	19400408 	cmpgei	r5,r3,16
   40efc:	283ff826 	beq	r5,zero,40ee0 <_malloc_r+0x104>
   40f00:	400f883a 	mov	r7,r8
   40f04:	9c000417 	ldw	r16,16(r19)
   40f08:	02400134 	movhi	r9,4
   40f0c:	4a56b004 	addi	r9,r9,23232
   40f10:	82405f26 	beq	r16,r9,41090 <_malloc_r+0x2b4>
   40f14:	80800117 	ldw	r2,4(r16)
   40f18:	00ffff04 	movi	r3,-4
   40f1c:	10c4703a 	and	r2,r2,r3
   40f20:	1447c83a 	sub	r3,r2,r17
   40f24:	19000410 	cmplti	r4,r3,16
   40f28:	20010b26 	beq	r4,zero,41358 <_malloc_r+0x57c>
   40f2c:	9a400515 	stw	r9,20(r19)
   40f30:	9a400415 	stw	r9,16(r19)
   40f34:	1801000e 	bge	r3,zero,41338 <_malloc_r+0x55c>
   40f38:	10c08028 	cmpgeui	r3,r2,512
   40f3c:	1800c21e 	bne	r3,zero,41248 <_malloc_r+0x46c>
   40f40:	1006d0fa 	srli	r3,r2,3
   40f44:	1008d17a 	srli	r4,r2,5
   40f48:	00800044 	movi	r2,1
   40f4c:	18c00044 	addi	r3,r3,1
   40f50:	180690fa 	slli	r3,r3,3
   40f54:	99400117 	ldw	r5,4(r19)
   40f58:	1104983a 	sll	r2,r2,r4
   40f5c:	98c7883a 	add	r3,r19,r3
   40f60:	19000017 	ldw	r4,0(r3)
   40f64:	1144b03a 	or	r2,r2,r5
   40f68:	197ffe04 	addi	r5,r3,-8
   40f6c:	81400315 	stw	r5,12(r16)
   40f70:	81000215 	stw	r4,8(r16)
   40f74:	98800115 	stw	r2,4(r19)
   40f78:	1c000015 	stw	r16,0(r3)
   40f7c:	24000315 	stw	r16,12(r4)
   40f80:	3807d0ba 	srai	r3,r7,2
   40f84:	01000044 	movi	r4,1
   40f88:	20c8983a 	sll	r4,r4,r3
   40f8c:	11004536 	bltu	r2,r4,410a4 <_malloc_r+0x2c8>
   40f90:	2086703a 	and	r3,r4,r2
   40f94:	18000a1e 	bne	r3,zero,40fc0 <_malloc_r+0x1e4>
   40f98:	2109883a 	add	r4,r4,r4
   40f9c:	00ffff04 	movi	r3,-4
   40fa0:	38c6703a 	and	r3,r7,r3
   40fa4:	208a703a 	and	r5,r4,r2
   40fa8:	19c00104 	addi	r7,r3,4
   40fac:	2800041e 	bne	r5,zero,40fc0 <_malloc_r+0x1e4>
   40fb0:	2109883a 	add	r4,r4,r4
   40fb4:	2086703a 	and	r3,r4,r2
   40fb8:	39c00104 	addi	r7,r7,4
   40fbc:	183ffc26 	beq	r3,zero,40fb0 <_malloc_r+0x1d4>
   40fc0:	02bfff04 	movi	r10,-4
   40fc4:	381690fa 	slli	r11,r7,3
   40fc8:	3819883a 	mov	r12,r7
   40fcc:	9ad7883a 	add	r11,r19,r11
   40fd0:	5811883a 	mov	r8,r11
   40fd4:	40800317 	ldw	r2,12(r8)
   40fd8:	4080bd26 	beq	r8,r2,412d0 <_malloc_r+0x4f4>
   40fdc:	10c00117 	ldw	r3,4(r2)
   40fe0:	1021883a 	mov	r16,r2
   40fe4:	10800317 	ldw	r2,12(r2)
   40fe8:	1a86703a 	and	r3,r3,r10
   40fec:	1c4bc83a 	sub	r5,r3,r17
   40ff0:	29800410 	cmplti	r6,r5,16
   40ff4:	3000bb26 	beq	r6,zero,412e4 <_malloc_r+0x508>
   40ff8:	283ff716 	blt	r5,zero,40fd8 <_malloc_r+0x1fc>
   40ffc:	80c7883a 	add	r3,r16,r3
   41000:	19400117 	ldw	r5,4(r3)
   41004:	81800217 	ldw	r6,8(r16)
   41008:	9009883a 	mov	r4,r18
   4100c:	29400054 	ori	r5,r5,1
   41010:	19400115 	stw	r5,4(r3)
   41014:	30800315 	stw	r2,12(r6)
   41018:	11800215 	stw	r6,8(r2)
   4101c:	00436140 	call	43614 <__malloc_unlock>
   41020:	80800204 	addi	r2,r16,8
   41024:	00000306 	br	41034 <_malloc_r+0x258>
   41028:	00800304 	movi	r2,12
   4102c:	90800015 	stw	r2,0(r18)
   41030:	0005883a 	mov	r2,zero
   41034:	dfc00917 	ldw	ra,36(sp)
   41038:	df000817 	ldw	fp,32(sp)
   4103c:	ddc00717 	ldw	r23,28(sp)
   41040:	dd800617 	ldw	r22,24(sp)
   41044:	dd400517 	ldw	r21,20(sp)
   41048:	dd000417 	ldw	r20,16(sp)
   4104c:	dcc00317 	ldw	r19,12(sp)
   41050:	dc800217 	ldw	r18,8(sp)
   41054:	dc400117 	ldw	r17,4(sp)
   41058:	dc000017 	ldw	r16,0(sp)
   4105c:	dec00a04 	addi	sp,sp,40
   41060:	f800283a 	ret
   41064:	01008004 	movi	r4,512
   41068:	01c01004 	movi	r7,64
   4106c:	02000fc4 	movi	r8,63
   41070:	003f9306 	br	40ec0 <_malloc_r+0xe4>
   41074:	14000317 	ldw	r16,12(r2)
   41078:	39c00084 	addi	r7,r7,2
   4107c:	143f721e 	bne	r2,r16,40e48 <_malloc_r+0x6c>
   41080:	9c000417 	ldw	r16,16(r19)
   41084:	02400134 	movhi	r9,4
   41088:	4a56b004 	addi	r9,r9,23232
   4108c:	827fa11e 	bne	r16,r9,40f14 <_malloc_r+0x138>
   41090:	3807d0ba 	srai	r3,r7,2
   41094:	01000044 	movi	r4,1
   41098:	98800117 	ldw	r2,4(r19)
   4109c:	20c8983a 	sll	r4,r4,r3
   410a0:	113fbb2e 	bgeu	r2,r4,40f90 <_malloc_r+0x1b4>
   410a4:	9c000217 	ldw	r16,8(r19)
   410a8:	00bfff04 	movi	r2,-4
   410ac:	85800117 	ldw	r22,4(r16)
   410b0:	b0ac703a 	and	r22,r22,r2
   410b4:	b4400336 	bltu	r22,r17,410c4 <_malloc_r+0x2e8>
   410b8:	b445c83a 	sub	r2,r22,r17
   410bc:	10c00408 	cmpgei	r3,r2,16
   410c0:	1800551e 	bne	r3,zero,41218 <_malloc_r+0x43c>
   410c4:	00800134 	movhi	r2,4
   410c8:	109c3417 	ldw	r2,28880(r2)
   410cc:	00c00174 	movhi	r3,5
   410d0:	1d62dd17 	ldw	r21,-29836(r3)
   410d4:	10bfffd8 	cmpnei	r2,r2,-1
   410d8:	85b9883a 	add	fp,r16,r22
   410dc:	8d6b883a 	add	r21,r17,r21
   410e0:	1000d726 	beq	r2,zero,41440 <_malloc_r+0x664>
   410e4:	ad4403c4 	addi	r21,r21,4111
   410e8:	00bc0004 	movi	r2,-4096
   410ec:	a8aa703a 	and	r21,r21,r2
   410f0:	a80b883a 	mov	r5,r21
   410f4:	9009883a 	mov	r4,r18
   410f8:	0041f1c0 	call	41f1c <_sbrk_r>
   410fc:	102f883a 	mov	r23,r2
   41100:	10bfffd8 	cmpnei	r2,r2,-1
   41104:	1000a926 	beq	r2,zero,413ac <_malloc_r+0x5d0>
   41108:	bf00a736 	bltu	r23,fp,413a8 <_malloc_r+0x5cc>
   4110c:	00800174 	movhi	r2,5
   41110:	1522e717 	ldw	r20,-29796(r2)
   41114:	ad29883a 	add	r20,r21,r20
   41118:	1522e715 	stw	r20,-29796(r2)
   4111c:	a007883a 	mov	r3,r20
   41120:	e5c0ed26 	beq	fp,r23,414d8 <_malloc_r+0x6fc>
   41124:	00800134 	movhi	r2,4
   41128:	109c3417 	ldw	r2,28880(r2)
   4112c:	10bfffd8 	cmpnei	r2,r2,-1
   41130:	1000f026 	beq	r2,zero,414f4 <_malloc_r+0x718>
   41134:	bf05c83a 	sub	r2,r23,fp
   41138:	10c5883a 	add	r2,r2,r3
   4113c:	00c00174 	movhi	r3,5
   41140:	18a2e715 	stw	r2,-29796(r3)
   41144:	bf0001cc 	andi	fp,r23,7
   41148:	e000c626 	beq	fp,zero,41464 <_malloc_r+0x688>
   4114c:	bf2fc83a 	sub	r23,r23,fp
   41150:	bdc00204 	addi	r23,r23,8
   41154:	05040204 	movi	r20,4104
   41158:	a729c83a 	sub	r20,r20,fp
   4115c:	bd6b883a 	add	r21,r23,r21
   41160:	a569c83a 	sub	r20,r20,r21
   41164:	a503ffcc 	andi	r20,r20,4095
   41168:	a00b883a 	mov	r5,r20
   4116c:	9009883a 	mov	r4,r18
   41170:	0041f1c0 	call	41f1c <_sbrk_r>
   41174:	10ffffe0 	cmpeqi	r3,r2,-1
   41178:	1800f41e 	bne	r3,zero,4154c <_malloc_r+0x770>
   4117c:	15c5c83a 	sub	r2,r2,r23
   41180:	152b883a 	add	r21,r2,r20
   41184:	00800174 	movhi	r2,5
   41188:	10a2e717 	ldw	r2,-29796(r2)
   4118c:	9dc00215 	stw	r23,8(r19)
   41190:	ad400054 	ori	r21,r21,1
   41194:	a0a9883a 	add	r20,r20,r2
   41198:	00800174 	movhi	r2,5
   4119c:	1522e715 	stw	r20,-29796(r2)
   411a0:	bd400115 	stw	r21,4(r23)
   411a4:	84c0d626 	beq	r16,r19,41500 <_malloc_r+0x724>
   411a8:	b0800428 	cmpgeui	r2,r22,16
   411ac:	1000d626 	beq	r2,zero,41508 <_malloc_r+0x72c>
   411b0:	80c00117 	ldw	r3,4(r16)
   411b4:	013ffe04 	movi	r4,-8
   411b8:	b0bffd04 	addi	r2,r22,-12
   411bc:	1104703a 	and	r2,r2,r4
   411c0:	18c0004c 	andi	r3,r3,1
   411c4:	1886b03a 	or	r3,r3,r2
   411c8:	80c00115 	stw	r3,4(r16)
   411cc:	01000144 	movi	r4,5
   411d0:	8087883a 	add	r3,r16,r2
   411d4:	19000115 	stw	r4,4(r3)
   411d8:	19000215 	stw	r4,8(r3)
   411dc:	10800428 	cmpgeui	r2,r2,16
   411e0:	1000df1e 	bne	r2,zero,41560 <_malloc_r+0x784>
   411e4:	bd400117 	ldw	r21,4(r23)
   411e8:	b821883a 	mov	r16,r23
   411ec:	00800174 	movhi	r2,5
   411f0:	10a2dc17 	ldw	r2,-29840(r2)
   411f4:	1500022e 	bgeu	r2,r20,41200 <_malloc_r+0x424>
   411f8:	00800174 	movhi	r2,5
   411fc:	1522dc15 	stw	r20,-29840(r2)
   41200:	00800174 	movhi	r2,5
   41204:	10a2db17 	ldw	r2,-29844(r2)
   41208:	15006a2e 	bgeu	r2,r20,413b4 <_malloc_r+0x5d8>
   4120c:	00800174 	movhi	r2,5
   41210:	1522db15 	stw	r20,-29844(r2)
   41214:	00006706 	br	413b4 <_malloc_r+0x5d8>
   41218:	88c00054 	ori	r3,r17,1
   4121c:	80c00115 	stw	r3,4(r16)
   41220:	8463883a 	add	r17,r16,r17
   41224:	10800054 	ori	r2,r2,1
   41228:	9c400215 	stw	r17,8(r19)
   4122c:	88800115 	stw	r2,4(r17)
   41230:	9009883a 	mov	r4,r18
   41234:	00436140 	call	43614 <__malloc_unlock>
   41238:	80800204 	addi	r2,r16,8
   4123c:	003f7d06 	br	41034 <_malloc_r+0x258>
   41240:	81000317 	ldw	r4,12(r16)
   41244:	003f0406 	br	40e58 <_malloc_r+0x7c>
   41248:	1006d27a 	srli	r3,r2,9
   4124c:	19000168 	cmpgeui	r4,r3,5
   41250:	20005026 	beq	r4,zero,41394 <_malloc_r+0x5b8>
   41254:	19000568 	cmpgeui	r4,r3,21
   41258:	20008c1e 	bne	r4,zero,4148c <_malloc_r+0x6b0>
   4125c:	19401704 	addi	r5,r3,92
   41260:	280a90fa 	slli	r5,r5,3
   41264:	190016c4 	addi	r4,r3,91
   41268:	994b883a 	add	r5,r19,r5
   4126c:	28c00017 	ldw	r3,0(r5)
   41270:	297ffe04 	addi	r5,r5,-8
   41274:	28c07426 	beq	r5,r3,41448 <_malloc_r+0x66c>
   41278:	01bfff04 	movi	r6,-4
   4127c:	19000117 	ldw	r4,4(r3)
   41280:	2188703a 	and	r4,r4,r6
   41284:	1100022e 	bgeu	r2,r4,41290 <_malloc_r+0x4b4>
   41288:	18c00217 	ldw	r3,8(r3)
   4128c:	28fffb1e 	bne	r5,r3,4127c <_malloc_r+0x4a0>
   41290:	19400317 	ldw	r5,12(r3)
   41294:	98800117 	ldw	r2,4(r19)
   41298:	81400315 	stw	r5,12(r16)
   4129c:	80c00215 	stw	r3,8(r16)
   412a0:	2c000215 	stw	r16,8(r5)
   412a4:	1c000315 	stw	r16,12(r3)
   412a8:	003f3506 	br	40f80 <_malloc_r+0x1a4>
   412ac:	10c00568 	cmpgeui	r3,r2,21
   412b0:	18004a26 	beq	r3,zero,413dc <_malloc_r+0x600>
   412b4:	10c01568 	cmpgeui	r3,r2,85
   412b8:	18007b1e 	bne	r3,zero,414a8 <_malloc_r+0x6cc>
   412bc:	8804d33a 	srli	r2,r17,12
   412c0:	11c01bc4 	addi	r7,r2,111
   412c4:	380890fa 	slli	r4,r7,3
   412c8:	12001b84 	addi	r8,r2,110
   412cc:	003efc06 	br	40ec0 <_malloc_r+0xe4>
   412d0:	63000044 	addi	r12,r12,1
   412d4:	608000cc 	andi	r2,r12,3
   412d8:	42000204 	addi	r8,r8,8
   412dc:	103f3d1e 	bne	r2,zero,40fd4 <_malloc_r+0x1f8>
   412e0:	00004506 	br	413f8 <_malloc_r+0x61c>
   412e4:	81000217 	ldw	r4,8(r16)
   412e8:	89800054 	ori	r6,r17,1
   412ec:	81800115 	stw	r6,4(r16)
   412f0:	20800315 	stw	r2,12(r4)
   412f4:	11000215 	stw	r4,8(r2)
   412f8:	8463883a 	add	r17,r16,r17
   412fc:	9c400515 	stw	r17,20(r19)
   41300:	9c400415 	stw	r17,16(r19)
   41304:	28800054 	ori	r2,r5,1
   41308:	88800115 	stw	r2,4(r17)
   4130c:	8a400315 	stw	r9,12(r17)
   41310:	8a400215 	stw	r9,8(r17)
   41314:	80c7883a 	add	r3,r16,r3
   41318:	19400015 	stw	r5,0(r3)
   4131c:	9009883a 	mov	r4,r18
   41320:	00436140 	call	43614 <__malloc_unlock>
   41324:	80800204 	addi	r2,r16,8
   41328:	003f4206 	br	41034 <_malloc_r+0x258>
   4132c:	880ed0fa 	srli	r7,r17,3
   41330:	88800204 	addi	r2,r17,8
   41334:	003ebe06 	br	40e30 <_malloc_r+0x54>
   41338:	8085883a 	add	r2,r16,r2
   4133c:	10c00117 	ldw	r3,4(r2)
   41340:	9009883a 	mov	r4,r18
   41344:	18c00054 	ori	r3,r3,1
   41348:	10c00115 	stw	r3,4(r2)
   4134c:	00436140 	call	43614 <__malloc_unlock>
   41350:	80800204 	addi	r2,r16,8
   41354:	003f3706 	br	41034 <_malloc_r+0x258>
   41358:	89000054 	ori	r4,r17,1
   4135c:	81000115 	stw	r4,4(r16)
   41360:	8463883a 	add	r17,r16,r17
   41364:	9c400515 	stw	r17,20(r19)
   41368:	9c400415 	stw	r17,16(r19)
   4136c:	19000054 	ori	r4,r3,1
   41370:	89000115 	stw	r4,4(r17)
   41374:	8085883a 	add	r2,r16,r2
   41378:	8a400315 	stw	r9,12(r17)
   4137c:	8a400215 	stw	r9,8(r17)
   41380:	10c00015 	stw	r3,0(r2)
   41384:	9009883a 	mov	r4,r18
   41388:	00436140 	call	43614 <__malloc_unlock>
   4138c:	80800204 	addi	r2,r16,8
   41390:	003f2806 	br	41034 <_malloc_r+0x258>
   41394:	1006d1ba 	srli	r3,r2,6
   41398:	19400e44 	addi	r5,r3,57
   4139c:	280a90fa 	slli	r5,r5,3
   413a0:	19000e04 	addi	r4,r3,56
   413a4:	003fb006 	br	41268 <_malloc_r+0x48c>
   413a8:	84c04626 	beq	r16,r19,414c4 <_malloc_r+0x6e8>
   413ac:	9c000217 	ldw	r16,8(r19)
   413b0:	85400117 	ldw	r21,4(r16)
   413b4:	00bfff04 	movi	r2,-4
   413b8:	a8aa703a 	and	r21,r21,r2
   413bc:	ac45c83a 	sub	r2,r21,r17
   413c0:	ac400236 	bltu	r21,r17,413cc <_malloc_r+0x5f0>
   413c4:	10c00408 	cmpgei	r3,r2,16
   413c8:	183f931e 	bne	r3,zero,41218 <_malloc_r+0x43c>
   413cc:	9009883a 	mov	r4,r18
   413d0:	00436140 	call	43614 <__malloc_unlock>
   413d4:	0005883a 	mov	r2,zero
   413d8:	003f1606 	br	41034 <_malloc_r+0x258>
   413dc:	11c01704 	addi	r7,r2,92
   413e0:	380890fa 	slli	r4,r7,3
   413e4:	120016c4 	addi	r8,r2,91
   413e8:	003eb506 	br	40ec0 <_malloc_r+0xe4>
   413ec:	58800217 	ldw	r2,8(r11)
   413f0:	39ffffc4 	addi	r7,r7,-1
   413f4:	12c0701e 	bne	r2,r11,415b8 <_malloc_r+0x7dc>
   413f8:	388000cc 	andi	r2,r7,3
   413fc:	5afffe04 	addi	r11,r11,-8
   41400:	103ffa1e 	bne	r2,zero,413ec <_malloc_r+0x610>
   41404:	98c00117 	ldw	r3,4(r19)
   41408:	0104303a 	nor	r2,zero,r4
   4140c:	10c4703a 	and	r2,r2,r3
   41410:	98800115 	stw	r2,4(r19)
   41414:	2109883a 	add	r4,r4,r4
   41418:	113f2236 	bltu	r2,r4,410a4 <_malloc_r+0x2c8>
   4141c:	203f2126 	beq	r4,zero,410a4 <_malloc_r+0x2c8>
   41420:	2086703a 	and	r3,r4,r2
   41424:	1800041e 	bne	r3,zero,41438 <_malloc_r+0x65c>
   41428:	2109883a 	add	r4,r4,r4
   4142c:	2086703a 	and	r3,r4,r2
   41430:	63000104 	addi	r12,r12,4
   41434:	183ffc26 	beq	r3,zero,41428 <_malloc_r+0x64c>
   41438:	600f883a 	mov	r7,r12
   4143c:	003ee106 	br	40fc4 <_malloc_r+0x1e8>
   41440:	ad400404 	addi	r21,r21,16
   41444:	003f2a06 	br	410f0 <_malloc_r+0x314>
   41448:	2009d0ba 	srai	r4,r4,2
   4144c:	00800044 	movi	r2,1
   41450:	99800117 	ldw	r6,4(r19)
   41454:	1104983a 	sll	r2,r2,r4
   41458:	1184b03a 	or	r2,r2,r6
   4145c:	98800115 	stw	r2,4(r19)
   41460:	003f8d06 	br	41298 <_malloc_r+0x4bc>
   41464:	bd69883a 	add	r20,r23,r21
   41468:	0529c83a 	sub	r20,zero,r20
   4146c:	a503ffcc 	andi	r20,r20,4095
   41470:	a00b883a 	mov	r5,r20
   41474:	9009883a 	mov	r4,r18
   41478:	0041f1c0 	call	41f1c <_sbrk_r>
   4147c:	10ffffe0 	cmpeqi	r3,r2,-1
   41480:	183f3e26 	beq	r3,zero,4117c <_malloc_r+0x3a0>
   41484:	0029883a 	mov	r20,zero
   41488:	003f3e06 	br	41184 <_malloc_r+0x3a8>
   4148c:	19001568 	cmpgeui	r4,r3,85
   41490:	2000201e 	bne	r4,zero,41514 <_malloc_r+0x738>
   41494:	1006d33a 	srli	r3,r2,12
   41498:	19401bc4 	addi	r5,r3,111
   4149c:	280a90fa 	slli	r5,r5,3
   414a0:	19001b84 	addi	r4,r3,110
   414a4:	003f7006 	br	41268 <_malloc_r+0x48c>
   414a8:	10c05568 	cmpgeui	r3,r2,341
   414ac:	1800201e 	bne	r3,zero,41530 <_malloc_r+0x754>
   414b0:	8804d3fa 	srli	r2,r17,15
   414b4:	11c01e04 	addi	r7,r2,120
   414b8:	380890fa 	slli	r4,r7,3
   414bc:	12001dc4 	addi	r8,r2,119
   414c0:	003e7f06 	br	40ec0 <_malloc_r+0xe4>
   414c4:	00800174 	movhi	r2,5
   414c8:	10e2e717 	ldw	r3,-29796(r2)
   414cc:	a8c7883a 	add	r3,r21,r3
   414d0:	10e2e715 	stw	r3,-29796(r2)
   414d4:	003f1306 	br	41124 <_malloc_r+0x348>
   414d8:	e083ffcc 	andi	r2,fp,4095
   414dc:	103f111e 	bne	r2,zero,41124 <_malloc_r+0x348>
   414e0:	9c000217 	ldw	r16,8(r19)
   414e4:	b56b883a 	add	r21,r22,r21
   414e8:	ad400054 	ori	r21,r21,1
   414ec:	85400115 	stw	r21,4(r16)
   414f0:	003f3e06 	br	411ec <_malloc_r+0x410>
   414f4:	00800134 	movhi	r2,4
   414f8:	15dc3415 	stw	r23,28880(r2)
   414fc:	003f1106 	br	41144 <_malloc_r+0x368>
   41500:	b821883a 	mov	r16,r23
   41504:	003f3906 	br	411ec <_malloc_r+0x410>
   41508:	00800044 	movi	r2,1
   4150c:	b8800115 	stw	r2,4(r23)
   41510:	003fae06 	br	413cc <_malloc_r+0x5f0>
   41514:	19005568 	cmpgeui	r4,r3,341
   41518:	2000191e 	bne	r4,zero,41580 <_malloc_r+0x7a4>
   4151c:	1006d3fa 	srli	r3,r2,15
   41520:	19401e04 	addi	r5,r3,120
   41524:	280a90fa 	slli	r5,r5,3
   41528:	19001dc4 	addi	r4,r3,119
   4152c:	003f4e06 	br	41268 <_malloc_r+0x48c>
   41530:	10815568 	cmpgeui	r2,r2,1365
   41534:	1000191e 	bne	r2,zero,4159c <_malloc_r+0x7c0>
   41538:	8804d4ba 	srli	r2,r17,18
   4153c:	11c01f44 	addi	r7,r2,125
   41540:	380890fa 	slli	r4,r7,3
   41544:	12001f04 	addi	r8,r2,124
   41548:	003e5d06 	br	40ec0 <_malloc_r+0xe4>
   4154c:	e73ffe04 	addi	fp,fp,-8
   41550:	af2b883a 	add	r21,r21,fp
   41554:	adebc83a 	sub	r21,r21,r23
   41558:	0029883a 	mov	r20,zero
   4155c:	003f0906 	br	41184 <_malloc_r+0x3a8>
   41560:	81400204 	addi	r5,r16,8
   41564:	9009883a 	mov	r4,r18
   41568:	00428040 	call	42804 <_free_r>
   4156c:	9c000217 	ldw	r16,8(r19)
   41570:	00800174 	movhi	r2,5
   41574:	1522e717 	ldw	r20,-29796(r2)
   41578:	85400117 	ldw	r21,4(r16)
   4157c:	003f1b06 	br	411ec <_malloc_r+0x410>
   41580:	18c15568 	cmpgeui	r3,r3,1365
   41584:	1800091e 	bne	r3,zero,415ac <_malloc_r+0x7d0>
   41588:	1006d4ba 	srli	r3,r2,18
   4158c:	19401f44 	addi	r5,r3,125
   41590:	280a90fa 	slli	r5,r5,3
   41594:	19001f04 	addi	r4,r3,124
   41598:	003f3306 	br	41268 <_malloc_r+0x48c>
   4159c:	0100fe04 	movi	r4,1016
   415a0:	01c01fc4 	movi	r7,127
   415a4:	02001f84 	movi	r8,126
   415a8:	003e4506 	br	40ec0 <_malloc_r+0xe4>
   415ac:	0140fe04 	movi	r5,1016
   415b0:	01001f84 	movi	r4,126
   415b4:	003f2c06 	br	41268 <_malloc_r+0x48c>
   415b8:	98800117 	ldw	r2,4(r19)
   415bc:	003f9506 	br	41414 <_malloc_r+0x638>

000415c0 <memchr>:
   415c0:	208000cc 	andi	r2,r4,3
   415c4:	280f883a 	mov	r7,r5
   415c8:	10000e26 	beq	r2,zero,41604 <memchr+0x44>
   415cc:	30bfffc4 	addi	r2,r6,-1
   415d0:	30001726 	beq	r6,zero,41630 <memchr+0x70>
   415d4:	29803fcc 	andi	r6,r5,255
   415d8:	00000606 	br	415f4 <memchr+0x34>
   415dc:	21000044 	addi	r4,r4,1
   415e0:	20c000cc 	andi	r3,r4,3
   415e4:	18000826 	beq	r3,zero,41608 <memchr+0x48>
   415e8:	10bfffc4 	addi	r2,r2,-1
   415ec:	10ffffe0 	cmpeqi	r3,r2,-1
   415f0:	18000f1e 	bne	r3,zero,41630 <memchr+0x70>
   415f4:	20c00003 	ldbu	r3,0(r4)
   415f8:	19bff81e 	bne	r3,r6,415dc <memchr+0x1c>
   415fc:	2005883a 	mov	r2,r4
   41600:	f800283a 	ret
   41604:	3005883a 	mov	r2,r6
   41608:	10c00130 	cmpltui	r3,r2,4
   4160c:	18000a26 	beq	r3,zero,41638 <memchr+0x78>
   41610:	10000726 	beq	r2,zero,41630 <memchr+0x70>
   41614:	2087883a 	add	r3,r4,r2
   41618:	39803fcc 	andi	r6,r7,255
   4161c:	2005883a 	mov	r2,r4
   41620:	11000003 	ldbu	r4,0(r2)
   41624:	21800326 	beq	r4,r6,41634 <memchr+0x74>
   41628:	10800044 	addi	r2,r2,1
   4162c:	18bffc1e 	bne	r3,r2,41620 <memchr+0x60>
   41630:	0005883a 	mov	r2,zero
   41634:	f800283a 	ret
   41638:	29403fcc 	andi	r5,r5,255
   4163c:	2806923a 	slli	r3,r5,8
   41640:	027fbff4 	movhi	r9,65279
   41644:	02202074 	movhi	r8,32897
   41648:	1946b03a 	or	r3,r3,r5
   4164c:	180c943a 	slli	r6,r3,16
   41650:	4a7fbfc4 	addi	r9,r9,-257
   41654:	42202004 	addi	r8,r8,-32640
   41658:	30ccb03a 	or	r6,r6,r3
   4165c:	20c00017 	ldw	r3,0(r4)
   41660:	30c6f03a 	xor	r3,r6,r3
   41664:	1a4b883a 	add	r5,r3,r9
   41668:	00c6303a 	nor	r3,zero,r3
   4166c:	28c6703a 	and	r3,r5,r3
   41670:	1a06703a 	and	r3,r3,r8
   41674:	183fe71e 	bne	r3,zero,41614 <memchr+0x54>
   41678:	10bfff04 	addi	r2,r2,-4
   4167c:	10c00128 	cmpgeui	r3,r2,4
   41680:	21000104 	addi	r4,r4,4
   41684:	183ff51e 	bne	r3,zero,4165c <memchr+0x9c>
   41688:	003fe106 	br	41610 <memchr+0x50>

0004168c <memcpy>:
   4168c:	30c00430 	cmpltui	r3,r6,16
   41690:	2005883a 	mov	r2,r4
   41694:	18002d1e 	bne	r3,zero,4174c <memcpy+0xc0>
   41698:	2146b03a 	or	r3,r4,r5
   4169c:	18c000cc 	andi	r3,r3,3
   416a0:	1800351e 	bne	r3,zero,41778 <memcpy+0xec>
   416a4:	32fffc04 	addi	r11,r6,-16
   416a8:	5816d13a 	srli	r11,r11,4
   416ac:	280f883a 	mov	r7,r5
   416b0:	2007883a 	mov	r3,r4
   416b4:	5ac00044 	addi	r11,r11,1
   416b8:	5816913a 	slli	r11,r11,4
   416bc:	22d5883a 	add	r10,r4,r11
   416c0:	39000117 	ldw	r4,4(r7)
   416c4:	3a400017 	ldw	r9,0(r7)
   416c8:	3a000217 	ldw	r8,8(r7)
   416cc:	19000115 	stw	r4,4(r3)
   416d0:	39000317 	ldw	r4,12(r7)
   416d4:	1a400015 	stw	r9,0(r3)
   416d8:	1a000215 	stw	r8,8(r3)
   416dc:	19000315 	stw	r4,12(r3)
   416e0:	18c00404 	addi	r3,r3,16
   416e4:	39c00404 	addi	r7,r7,16
   416e8:	50fff51e 	bne	r10,r3,416c0 <memcpy+0x34>
   416ec:	3100030c 	andi	r4,r6,12
   416f0:	2acb883a 	add	r5,r5,r11
   416f4:	320003cc 	andi	r8,r6,15
   416f8:	20002226 	beq	r4,zero,41784 <memcpy+0xf8>
   416fc:	280f883a 	mov	r7,r5
   41700:	1813883a 	mov	r9,r3
   41704:	39c00104 	addi	r7,r7,4
   41708:	3abfff17 	ldw	r10,-4(r7)
   4170c:	41c9c83a 	sub	r4,r8,r7
   41710:	2909883a 	add	r4,r5,r4
   41714:	4a800015 	stw	r10,0(r9)
   41718:	21000128 	cmpgeui	r4,r4,4
   4171c:	4a400104 	addi	r9,r9,4
   41720:	203ff81e 	bne	r4,zero,41704 <memcpy+0x78>
   41724:	413fff04 	addi	r4,r8,-4
   41728:	2008d0ba 	srli	r4,r4,2
   4172c:	318000cc 	andi	r6,r6,3
   41730:	31ffffc4 	addi	r7,r6,-1
   41734:	21000044 	addi	r4,r4,1
   41738:	200890ba 	slli	r4,r4,2
   4173c:	1907883a 	add	r3,r3,r4
   41740:	290b883a 	add	r5,r5,r4
   41744:	3000041e 	bne	r6,zero,41758 <memcpy+0xcc>
   41748:	f800283a 	ret
   4174c:	2007883a 	mov	r3,r4
   41750:	31ffffc4 	addi	r7,r6,-1
   41754:	303ffc26 	beq	r6,zero,41748 <memcpy+0xbc>
   41758:	39c00044 	addi	r7,r7,1
   4175c:	19cf883a 	add	r7,r3,r7
   41760:	29800003 	ldbu	r6,0(r5)
   41764:	18c00044 	addi	r3,r3,1
   41768:	29400044 	addi	r5,r5,1
   4176c:	19bfffc5 	stb	r6,-1(r3)
   41770:	38fffb1e 	bne	r7,r3,41760 <memcpy+0xd4>
   41774:	f800283a 	ret
   41778:	31ffffc4 	addi	r7,r6,-1
   4177c:	2007883a 	mov	r3,r4
   41780:	003ff506 	br	41758 <memcpy+0xcc>
   41784:	400d883a 	mov	r6,r8
   41788:	003ff106 	br	41750 <memcpy+0xc4>

0004178c <memmove>:
   4178c:	2005883a 	mov	r2,r4
   41790:	29000a2e 	bgeu	r5,r4,417bc <memmove+0x30>
   41794:	2989883a 	add	r4,r5,r6
   41798:	1100082e 	bgeu	r2,r4,417bc <memmove+0x30>
   4179c:	1187883a 	add	r3,r2,r6
   417a0:	30003e26 	beq	r6,zero,4189c <memmove+0x110>
   417a4:	217fffc3 	ldbu	r5,-1(r4)
   417a8:	18ffffc4 	addi	r3,r3,-1
   417ac:	213fffc4 	addi	r4,r4,-1
   417b0:	19400005 	stb	r5,0(r3)
   417b4:	10fffb1e 	bne	r2,r3,417a4 <memmove+0x18>
   417b8:	f800283a 	ret
   417bc:	30c00430 	cmpltui	r3,r6,16
   417c0:	18000b26 	beq	r3,zero,417f0 <memmove+0x64>
   417c4:	1007883a 	mov	r3,r2
   417c8:	31ffffc4 	addi	r7,r6,-1
   417cc:	30003726 	beq	r6,zero,418ac <memmove+0x120>
   417d0:	39c00044 	addi	r7,r7,1
   417d4:	29cf883a 	add	r7,r5,r7
   417d8:	29800003 	ldbu	r6,0(r5)
   417dc:	29400044 	addi	r5,r5,1
   417e0:	18c00044 	addi	r3,r3,1
   417e4:	19bfffc5 	stb	r6,-1(r3)
   417e8:	29fffb1e 	bne	r5,r7,417d8 <memmove+0x4c>
   417ec:	f800283a 	ret
   417f0:	1146b03a 	or	r3,r2,r5
   417f4:	18c000cc 	andi	r3,r3,3
   417f8:	1800291e 	bne	r3,zero,418a0 <memmove+0x114>
   417fc:	327ffc04 	addi	r9,r6,-16
   41800:	4812d13a 	srli	r9,r9,4
   41804:	280f883a 	mov	r7,r5
   41808:	1007883a 	mov	r3,r2
   4180c:	4a400044 	addi	r9,r9,1
   41810:	4812913a 	slli	r9,r9,4
   41814:	1251883a 	add	r8,r2,r9
   41818:	39000017 	ldw	r4,0(r7)
   4181c:	39c00404 	addi	r7,r7,16
   41820:	18c00404 	addi	r3,r3,16
   41824:	193ffc15 	stw	r4,-16(r3)
   41828:	393ffd17 	ldw	r4,-12(r7)
   4182c:	193ffd15 	stw	r4,-12(r3)
   41830:	393ffe17 	ldw	r4,-8(r7)
   41834:	193ffe15 	stw	r4,-8(r3)
   41838:	393fff17 	ldw	r4,-4(r7)
   4183c:	193fff15 	stw	r4,-4(r3)
   41840:	40fff51e 	bne	r8,r3,41818 <memmove+0x8c>
   41844:	3100030c 	andi	r4,r6,12
   41848:	2a4b883a 	add	r5,r5,r9
   4184c:	320003cc 	andi	r8,r6,15
   41850:	20001726 	beq	r4,zero,418b0 <memmove+0x124>
   41854:	2813883a 	mov	r9,r5
   41858:	180f883a 	mov	r7,r3
   4185c:	4a800017 	ldw	r10,0(r9)
   41860:	39c00104 	addi	r7,r7,4
   41864:	41c9c83a 	sub	r4,r8,r7
   41868:	1909883a 	add	r4,r3,r4
   4186c:	21000128 	cmpgeui	r4,r4,4
   41870:	3abfff15 	stw	r10,-4(r7)
   41874:	4a400104 	addi	r9,r9,4
   41878:	203ff81e 	bne	r4,zero,4185c <memmove+0xd0>
   4187c:	413fff04 	addi	r4,r8,-4
   41880:	2008d0ba 	srli	r4,r4,2
   41884:	318000cc 	andi	r6,r6,3
   41888:	21000044 	addi	r4,r4,1
   4188c:	200890ba 	slli	r4,r4,2
   41890:	1907883a 	add	r3,r3,r4
   41894:	290b883a 	add	r5,r5,r4
   41898:	003fcb06 	br	417c8 <memmove+0x3c>
   4189c:	f800283a 	ret
   418a0:	31ffffc4 	addi	r7,r6,-1
   418a4:	1007883a 	mov	r3,r2
   418a8:	003fc906 	br	417d0 <memmove+0x44>
   418ac:	f800283a 	ret
   418b0:	400d883a 	mov	r6,r8
   418b4:	003fc406 	br	417c8 <memmove+0x3c>

000418b8 <memset>:
   418b8:	20c000cc 	andi	r3,r4,3
   418bc:	2005883a 	mov	r2,r4
   418c0:	18003726 	beq	r3,zero,419a0 <memset+0xe8>
   418c4:	31ffffc4 	addi	r7,r6,-1
   418c8:	30003326 	beq	r6,zero,41998 <memset+0xe0>
   418cc:	2811883a 	mov	r8,r5
   418d0:	2007883a 	mov	r3,r4
   418d4:	00000306 	br	418e4 <memset+0x2c>
   418d8:	39ffffc4 	addi	r7,r7,-1
   418dc:	39bfffe0 	cmpeqi	r6,r7,-1
   418e0:	30002d1e 	bne	r6,zero,41998 <memset+0xe0>
   418e4:	18c00044 	addi	r3,r3,1
   418e8:	198000cc 	andi	r6,r3,3
   418ec:	1a3fffc5 	stb	r8,-1(r3)
   418f0:	303ff91e 	bne	r6,zero,418d8 <memset+0x20>
   418f4:	39000128 	cmpgeui	r4,r7,4
   418f8:	20002226 	beq	r4,zero,41984 <memset+0xcc>
   418fc:	29803fcc 	andi	r6,r5,255
   41900:	3008923a 	slli	r4,r6,8
   41904:	3a000430 	cmpltui	r8,r7,16
   41908:	2188b03a 	or	r4,r4,r6
   4190c:	200c943a 	slli	r6,r4,16
   41910:	310cb03a 	or	r6,r6,r4
   41914:	40000e1e 	bne	r8,zero,41950 <memset+0x98>
   41918:	393ffc04 	addi	r4,r7,-16
   4191c:	2008d13a 	srli	r4,r4,4
   41920:	21000044 	addi	r4,r4,1
   41924:	2008913a 	slli	r4,r4,4
   41928:	1909883a 	add	r4,r3,r4
   4192c:	19800015 	stw	r6,0(r3)
   41930:	19800115 	stw	r6,4(r3)
   41934:	19800215 	stw	r6,8(r3)
   41938:	19800315 	stw	r6,12(r3)
   4193c:	18c00404 	addi	r3,r3,16
   41940:	20fffa1e 	bne	r4,r3,4192c <memset+0x74>
   41944:	3900030c 	andi	r4,r7,12
   41948:	39c003cc 	andi	r7,r7,15
   4194c:	20000d26 	beq	r4,zero,41984 <memset+0xcc>
   41950:	1811883a 	mov	r8,r3
   41954:	42000104 	addi	r8,r8,4
   41958:	3a09c83a 	sub	r4,r7,r8
   4195c:	1909883a 	add	r4,r3,r4
   41960:	21000128 	cmpgeui	r4,r4,4
   41964:	41bfff15 	stw	r6,-4(r8)
   41968:	203ffa1e 	bne	r4,zero,41954 <memset+0x9c>
   4196c:	393fff04 	addi	r4,r7,-4
   41970:	2008d0ba 	srli	r4,r4,2
   41974:	39c000cc 	andi	r7,r7,3
   41978:	21000044 	addi	r4,r4,1
   4197c:	200890ba 	slli	r4,r4,2
   41980:	1907883a 	add	r3,r3,r4
   41984:	38000526 	beq	r7,zero,4199c <memset+0xe4>
   41988:	19cf883a 	add	r7,r3,r7
   4198c:	18c00044 	addi	r3,r3,1
   41990:	197fffc5 	stb	r5,-1(r3)
   41994:	38fffd1e 	bne	r7,r3,4198c <memset+0xd4>
   41998:	f800283a 	ret
   4199c:	f800283a 	ret
   419a0:	2007883a 	mov	r3,r4
   419a4:	300f883a 	mov	r7,r6
   419a8:	003fd206 	br	418f4 <memset+0x3c>

000419ac <_realloc_r>:
   419ac:	defff504 	addi	sp,sp,-44
   419b0:	dcc00415 	stw	r19,16(sp)
   419b4:	dfc00a15 	stw	ra,40(sp)
   419b8:	df000915 	stw	fp,36(sp)
   419bc:	ddc00815 	stw	r23,32(sp)
   419c0:	dd800715 	stw	r22,28(sp)
   419c4:	dd400615 	stw	r21,24(sp)
   419c8:	dd000515 	stw	r20,20(sp)
   419cc:	dc800315 	stw	r18,12(sp)
   419d0:	dc400215 	stw	r17,8(sp)
   419d4:	dc000115 	stw	r16,4(sp)
   419d8:	3027883a 	mov	r19,r6
   419dc:	28008b26 	beq	r5,zero,41c0c <_realloc_r+0x260>
   419e0:	2821883a 	mov	r16,r5
   419e4:	202b883a 	mov	r21,r4
   419e8:	9c4002c4 	addi	r17,r19,11
   419ec:	00435f00 	call	435f0 <__malloc_lock>
   419f0:	888005f0 	cmpltui	r2,r17,23
   419f4:	84bfff17 	ldw	r18,-4(r16)
   419f8:	1000511e 	bne	r2,zero,41b40 <_realloc_r+0x194>
   419fc:	00bffe04 	movi	r2,-8
   41a00:	88a2703a 	and	r17,r17,r2
   41a04:	880b883a 	mov	r5,r17
   41a08:	88005016 	blt	r17,zero,41b4c <_realloc_r+0x1a0>
   41a0c:	8cc04f36 	bltu	r17,r19,41b4c <_realloc_r+0x1a0>
   41a10:	00ffff04 	movi	r3,-4
   41a14:	90e8703a 	and	r20,r18,r3
   41a18:	85bffe04 	addi	r22,r16,-8
   41a1c:	a1403a0e 	bge	r20,r5,41b08 <_realloc_r+0x15c>
   41a20:	07000134 	movhi	fp,4
   41a24:	e716ae04 	addi	fp,fp,23224
   41a28:	e2000217 	ldw	r8,8(fp)
   41a2c:	b50d883a 	add	r6,r22,r20
   41a30:	30800117 	ldw	r2,4(r6)
   41a34:	41808e26 	beq	r8,r6,41c70 <_realloc_r+0x2c4>
   41a38:	013fff84 	movi	r4,-2
   41a3c:	1108703a 	and	r4,r2,r4
   41a40:	3109883a 	add	r4,r6,r4
   41a44:	21000117 	ldw	r4,4(r4)
   41a48:	2100004c 	andi	r4,r4,1
   41a4c:	20004f1e 	bne	r4,zero,41b8c <_realloc_r+0x1e0>
   41a50:	10c4703a 	and	r2,r2,r3
   41a54:	a087883a 	add	r3,r20,r2
   41a58:	1940bd0e 	bge	r3,r5,41d50 <_realloc_r+0x3a4>
   41a5c:	9480004c 	andi	r18,r18,1
   41a60:	90004c1e 	bne	r18,zero,41b94 <_realloc_r+0x1e8>
   41a64:	81fffe17 	ldw	r7,-8(r16)
   41a68:	00ffff04 	movi	r3,-4
   41a6c:	b1cfc83a 	sub	r7,r22,r7
   41a70:	3c800117 	ldw	r18,4(r7)
   41a74:	90c6703a 	and	r3,r18,r3
   41a78:	30000426 	beq	r6,zero,41a8c <_realloc_r+0xe0>
   41a7c:	a0c9883a 	add	r4,r20,r3
   41a80:	20af883a 	add	r23,r4,r2
   41a84:	4180bc26 	beq	r8,r6,41d78 <_realloc_r+0x3cc>
   41a88:	b940930e 	bge	r23,r5,41cd8 <_realloc_r+0x32c>
   41a8c:	38004126 	beq	r7,zero,41b94 <_realloc_r+0x1e8>
   41a90:	a0ef883a 	add	r23,r20,r3
   41a94:	b9403f16 	blt	r23,r5,41b94 <_realloc_r+0x1e8>
   41a98:	38800317 	ldw	r2,12(r7)
   41a9c:	38c00217 	ldw	r3,8(r7)
   41aa0:	a1bfff04 	addi	r6,r20,-4
   41aa4:	31400968 	cmpgeui	r5,r6,37
   41aa8:	18800315 	stw	r2,12(r3)
   41aac:	10c00215 	stw	r3,8(r2)
   41ab0:	39000204 	addi	r4,r7,8
   41ab4:	2800e11e 	bne	r5,zero,41e3c <_realloc_r+0x490>
   41ab8:	30800530 	cmpltui	r2,r6,20
   41abc:	1000dd1e 	bne	r2,zero,41e34 <_realloc_r+0x488>
   41ac0:	80c00017 	ldw	r3,0(r16)
   41ac4:	30800728 	cmpgeui	r2,r6,28
   41ac8:	38c00215 	stw	r3,8(r7)
   41acc:	80c00117 	ldw	r3,4(r16)
   41ad0:	38c00315 	stw	r3,12(r7)
   41ad4:	1000e21e 	bne	r2,zero,41e60 <_realloc_r+0x4b4>
   41ad8:	84000204 	addi	r16,r16,8
   41adc:	38800404 	addi	r2,r7,16
   41ae0:	80c00017 	ldw	r3,0(r16)
   41ae4:	b829883a 	mov	r20,r23
   41ae8:	382d883a 	mov	r22,r7
   41aec:	10c00015 	stw	r3,0(r2)
   41af0:	80c00117 	ldw	r3,4(r16)
   41af4:	10c00115 	stw	r3,4(r2)
   41af8:	80c00217 	ldw	r3,8(r16)
   41afc:	2021883a 	mov	r16,r4
   41b00:	10c00215 	stw	r3,8(r2)
   41b04:	3c800117 	ldw	r18,4(r7)
   41b08:	a447c83a 	sub	r3,r20,r17
   41b0c:	19000430 	cmpltui	r4,r3,16
   41b10:	9480004c 	andi	r18,r18,1
   41b14:	b505883a 	add	r2,r22,r20
   41b18:	20004926 	beq	r4,zero,41c40 <_realloc_r+0x294>
   41b1c:	a4a4b03a 	or	r18,r20,r18
   41b20:	b4800115 	stw	r18,4(r22)
   41b24:	10c00117 	ldw	r3,4(r2)
   41b28:	18c00054 	ori	r3,r3,1
   41b2c:	10c00115 	stw	r3,4(r2)
   41b30:	a809883a 	mov	r4,r21
   41b34:	00436140 	call	43614 <__malloc_unlock>
   41b38:	8027883a 	mov	r19,r16
   41b3c:	00000606 	br	41b58 <_realloc_r+0x1ac>
   41b40:	04400404 	movi	r17,16
   41b44:	01400404 	movi	r5,16
   41b48:	8cffb12e 	bgeu	r17,r19,41a10 <_realloc_r+0x64>
   41b4c:	00800304 	movi	r2,12
   41b50:	a8800015 	stw	r2,0(r21)
   41b54:	0027883a 	mov	r19,zero
   41b58:	9805883a 	mov	r2,r19
   41b5c:	dfc00a17 	ldw	ra,40(sp)
   41b60:	df000917 	ldw	fp,36(sp)
   41b64:	ddc00817 	ldw	r23,32(sp)
   41b68:	dd800717 	ldw	r22,28(sp)
   41b6c:	dd400617 	ldw	r21,24(sp)
   41b70:	dd000517 	ldw	r20,20(sp)
   41b74:	dcc00417 	ldw	r19,16(sp)
   41b78:	dc800317 	ldw	r18,12(sp)
   41b7c:	dc400217 	ldw	r17,8(sp)
   41b80:	dc000117 	ldw	r16,4(sp)
   41b84:	dec00b04 	addi	sp,sp,44
   41b88:	f800283a 	ret
   41b8c:	9480004c 	andi	r18,r18,1
   41b90:	90006a26 	beq	r18,zero,41d3c <_realloc_r+0x390>
   41b94:	980b883a 	mov	r5,r19
   41b98:	a809883a 	mov	r4,r21
   41b9c:	0040ddc0 	call	40ddc <_malloc_r>
   41ba0:	1027883a 	mov	r19,r2
   41ba4:	10001626 	beq	r2,zero,41c00 <_realloc_r+0x254>
   41ba8:	84bfff17 	ldw	r18,-4(r16)
   41bac:	10fffe04 	addi	r3,r2,-8
   41bb0:	00bfff84 	movi	r2,-2
   41bb4:	9084703a 	and	r2,r18,r2
   41bb8:	b085883a 	add	r2,r22,r2
   41bbc:	10c05a26 	beq	r2,r3,41d28 <_realloc_r+0x37c>
   41bc0:	a1bfff04 	addi	r6,r20,-4
   41bc4:	30800968 	cmpgeui	r2,r6,37
   41bc8:	1000671e 	bne	r2,zero,41d68 <_realloc_r+0x3bc>
   41bcc:	30800530 	cmpltui	r2,r6,20
   41bd0:	10003826 	beq	r2,zero,41cb4 <_realloc_r+0x308>
   41bd4:	9805883a 	mov	r2,r19
   41bd8:	8007883a 	mov	r3,r16
   41bdc:	19000017 	ldw	r4,0(r3)
   41be0:	11000015 	stw	r4,0(r2)
   41be4:	19000117 	ldw	r4,4(r3)
   41be8:	11000115 	stw	r4,4(r2)
   41bec:	18c00217 	ldw	r3,8(r3)
   41bf0:	10c00215 	stw	r3,8(r2)
   41bf4:	800b883a 	mov	r5,r16
   41bf8:	a809883a 	mov	r4,r21
   41bfc:	00428040 	call	42804 <_free_r>
   41c00:	a809883a 	mov	r4,r21
   41c04:	00436140 	call	43614 <__malloc_unlock>
   41c08:	003fd306 	br	41b58 <_realloc_r+0x1ac>
   41c0c:	300b883a 	mov	r5,r6
   41c10:	dfc00a17 	ldw	ra,40(sp)
   41c14:	df000917 	ldw	fp,36(sp)
   41c18:	ddc00817 	ldw	r23,32(sp)
   41c1c:	dd800717 	ldw	r22,28(sp)
   41c20:	dd400617 	ldw	r21,24(sp)
   41c24:	dd000517 	ldw	r20,20(sp)
   41c28:	dcc00417 	ldw	r19,16(sp)
   41c2c:	dc800317 	ldw	r18,12(sp)
   41c30:	dc400217 	ldw	r17,8(sp)
   41c34:	dc000117 	ldw	r16,4(sp)
   41c38:	dec00b04 	addi	sp,sp,44
   41c3c:	0040ddc1 	jmpi	40ddc <_malloc_r>
   41c40:	9464b03a 	or	r18,r18,r17
   41c44:	b4800115 	stw	r18,4(r22)
   41c48:	b44b883a 	add	r5,r22,r17
   41c4c:	18c00054 	ori	r3,r3,1
   41c50:	28c00115 	stw	r3,4(r5)
   41c54:	10c00117 	ldw	r3,4(r2)
   41c58:	29400204 	addi	r5,r5,8
   41c5c:	a809883a 	mov	r4,r21
   41c60:	18c00054 	ori	r3,r3,1
   41c64:	10c00115 	stw	r3,4(r2)
   41c68:	00428040 	call	42804 <_free_r>
   41c6c:	003fb006 	br	41b30 <_realloc_r+0x184>
   41c70:	10c4703a 	and	r2,r2,r3
   41c74:	a087883a 	add	r3,r20,r2
   41c78:	89000404 	addi	r4,r17,16
   41c7c:	193f7716 	blt	r3,r4,41a5c <_realloc_r+0xb0>
   41c80:	b46d883a 	add	r22,r22,r17
   41c84:	1c45c83a 	sub	r2,r3,r17
   41c88:	e5800215 	stw	r22,8(fp)
   41c8c:	10800054 	ori	r2,r2,1
   41c90:	b0800115 	stw	r2,4(r22)
   41c94:	80bfff17 	ldw	r2,-4(r16)
   41c98:	a809883a 	mov	r4,r21
   41c9c:	8027883a 	mov	r19,r16
   41ca0:	1080004c 	andi	r2,r2,1
   41ca4:	1444b03a 	or	r2,r2,r17
   41ca8:	80bfff15 	stw	r2,-4(r16)
   41cac:	00436140 	call	43614 <__malloc_unlock>
   41cb0:	003fa906 	br	41b58 <_realloc_r+0x1ac>
   41cb4:	80c00017 	ldw	r3,0(r16)
   41cb8:	30800728 	cmpgeui	r2,r6,28
   41cbc:	98c00015 	stw	r3,0(r19)
   41cc0:	80c00117 	ldw	r3,4(r16)
   41cc4:	98c00115 	stw	r3,4(r19)
   41cc8:	1000511e 	bne	r2,zero,41e10 <_realloc_r+0x464>
   41ccc:	80c00204 	addi	r3,r16,8
   41cd0:	98800204 	addi	r2,r19,8
   41cd4:	003fc106 	br	41bdc <_realloc_r+0x230>
   41cd8:	30800317 	ldw	r2,12(r6)
   41cdc:	30c00217 	ldw	r3,8(r6)
   41ce0:	a1bfff04 	addi	r6,r20,-4
   41ce4:	31400968 	cmpgeui	r5,r6,37
   41ce8:	18800315 	stw	r2,12(r3)
   41cec:	10c00215 	stw	r3,8(r2)
   41cf0:	38c00217 	ldw	r3,8(r7)
   41cf4:	38800317 	ldw	r2,12(r7)
   41cf8:	39000204 	addi	r4,r7,8
   41cfc:	18800315 	stw	r2,12(r3)
   41d00:	10c00215 	stw	r3,8(r2)
   41d04:	283f6c26 	beq	r5,zero,41ab8 <_realloc_r+0x10c>
   41d08:	800b883a 	mov	r5,r16
   41d0c:	d9c00015 	stw	r7,0(sp)
   41d10:	004178c0 	call	4178c <memmove>
   41d14:	d9c00017 	ldw	r7,0(sp)
   41d18:	1021883a 	mov	r16,r2
   41d1c:	b829883a 	mov	r20,r23
   41d20:	382d883a 	mov	r22,r7
   41d24:	003f7806 	br	41b08 <_realloc_r+0x15c>
   41d28:	98bfff17 	ldw	r2,-4(r19)
   41d2c:	00ffff04 	movi	r3,-4
   41d30:	10c4703a 	and	r2,r2,r3
   41d34:	a0a9883a 	add	r20,r20,r2
   41d38:	003f7306 	br	41b08 <_realloc_r+0x15c>
   41d3c:	81fffe17 	ldw	r7,-8(r16)
   41d40:	b1cfc83a 	sub	r7,r22,r7
   41d44:	38800117 	ldw	r2,4(r7)
   41d48:	10c6703a 	and	r3,r2,r3
   41d4c:	003f4f06 	br	41a8c <_realloc_r+0xe0>
   41d50:	30800317 	ldw	r2,12(r6)
   41d54:	31000217 	ldw	r4,8(r6)
   41d58:	1829883a 	mov	r20,r3
   41d5c:	20800315 	stw	r2,12(r4)
   41d60:	11000215 	stw	r4,8(r2)
   41d64:	003f6806 	br	41b08 <_realloc_r+0x15c>
   41d68:	800b883a 	mov	r5,r16
   41d6c:	9809883a 	mov	r4,r19
   41d70:	004178c0 	call	4178c <memmove>
   41d74:	003f9f06 	br	41bf4 <_realloc_r+0x248>
   41d78:	88800404 	addi	r2,r17,16
   41d7c:	b8bf4316 	blt	r23,r2,41a8c <_realloc_r+0xe0>
   41d80:	38800317 	ldw	r2,12(r7)
   41d84:	38c00217 	ldw	r3,8(r7)
   41d88:	a1bfff04 	addi	r6,r20,-4
   41d8c:	31000968 	cmpgeui	r4,r6,37
   41d90:	18800315 	stw	r2,12(r3)
   41d94:	10c00215 	stw	r3,8(r2)
   41d98:	3cc00204 	addi	r19,r7,8
   41d9c:	2000421e 	bne	r4,zero,41ea8 <_realloc_r+0x4fc>
   41da0:	30800530 	cmpltui	r2,r6,20
   41da4:	10003e1e 	bne	r2,zero,41ea0 <_realloc_r+0x4f4>
   41da8:	80c00017 	ldw	r3,0(r16)
   41dac:	30800728 	cmpgeui	r2,r6,28
   41db0:	38c00215 	stw	r3,8(r7)
   41db4:	80c00117 	ldw	r3,4(r16)
   41db8:	38c00315 	stw	r3,12(r7)
   41dbc:	1000471e 	bne	r2,zero,41edc <_realloc_r+0x530>
   41dc0:	84000204 	addi	r16,r16,8
   41dc4:	38800404 	addi	r2,r7,16
   41dc8:	80c00017 	ldw	r3,0(r16)
   41dcc:	10c00015 	stw	r3,0(r2)
   41dd0:	80c00117 	ldw	r3,4(r16)
   41dd4:	10c00115 	stw	r3,4(r2)
   41dd8:	80c00217 	ldw	r3,8(r16)
   41ddc:	10c00215 	stw	r3,8(r2)
   41de0:	3c47883a 	add	r3,r7,r17
   41de4:	bc45c83a 	sub	r2,r23,r17
   41de8:	e0c00215 	stw	r3,8(fp)
   41dec:	10800054 	ori	r2,r2,1
   41df0:	18800115 	stw	r2,4(r3)
   41df4:	38800117 	ldw	r2,4(r7)
   41df8:	a809883a 	mov	r4,r21
   41dfc:	1080004c 	andi	r2,r2,1
   41e00:	1444b03a 	or	r2,r2,r17
   41e04:	38800115 	stw	r2,4(r7)
   41e08:	00436140 	call	43614 <__malloc_unlock>
   41e0c:	003f5206 	br	41b58 <_realloc_r+0x1ac>
   41e10:	80800217 	ldw	r2,8(r16)
   41e14:	31800920 	cmpeqi	r6,r6,36
   41e18:	98800215 	stw	r2,8(r19)
   41e1c:	80800317 	ldw	r2,12(r16)
   41e20:	98800315 	stw	r2,12(r19)
   41e24:	3000171e 	bne	r6,zero,41e84 <_realloc_r+0x4d8>
   41e28:	80c00404 	addi	r3,r16,16
   41e2c:	98800404 	addi	r2,r19,16
   41e30:	003f6a06 	br	41bdc <_realloc_r+0x230>
   41e34:	2005883a 	mov	r2,r4
   41e38:	003f2906 	br	41ae0 <_realloc_r+0x134>
   41e3c:	800b883a 	mov	r5,r16
   41e40:	d9c00015 	stw	r7,0(sp)
   41e44:	004178c0 	call	4178c <memmove>
   41e48:	d9c00017 	ldw	r7,0(sp)
   41e4c:	1021883a 	mov	r16,r2
   41e50:	b829883a 	mov	r20,r23
   41e54:	3c800117 	ldw	r18,4(r7)
   41e58:	382d883a 	mov	r22,r7
   41e5c:	003f2a06 	br	41b08 <_realloc_r+0x15c>
   41e60:	80800217 	ldw	r2,8(r16)
   41e64:	31800920 	cmpeqi	r6,r6,36
   41e68:	38800415 	stw	r2,16(r7)
   41e6c:	80800317 	ldw	r2,12(r16)
   41e70:	38800515 	stw	r2,20(r7)
   41e74:	3000121e 	bne	r6,zero,41ec0 <_realloc_r+0x514>
   41e78:	84000404 	addi	r16,r16,16
   41e7c:	38800604 	addi	r2,r7,24
   41e80:	003f1706 	br	41ae0 <_realloc_r+0x134>
   41e84:	81000417 	ldw	r4,16(r16)
   41e88:	80c00604 	addi	r3,r16,24
   41e8c:	98800604 	addi	r2,r19,24
   41e90:	99000415 	stw	r4,16(r19)
   41e94:	81000517 	ldw	r4,20(r16)
   41e98:	99000515 	stw	r4,20(r19)
   41e9c:	003f4f06 	br	41bdc <_realloc_r+0x230>
   41ea0:	9805883a 	mov	r2,r19
   41ea4:	003fc806 	br	41dc8 <_realloc_r+0x41c>
   41ea8:	800b883a 	mov	r5,r16
   41eac:	9809883a 	mov	r4,r19
   41eb0:	d9c00015 	stw	r7,0(sp)
   41eb4:	004178c0 	call	4178c <memmove>
   41eb8:	d9c00017 	ldw	r7,0(sp)
   41ebc:	003fc806 	br	41de0 <_realloc_r+0x434>
   41ec0:	80c00417 	ldw	r3,16(r16)
   41ec4:	84000604 	addi	r16,r16,24
   41ec8:	38800804 	addi	r2,r7,32
   41ecc:	38c00615 	stw	r3,24(r7)
   41ed0:	80ffff17 	ldw	r3,-4(r16)
   41ed4:	38c00715 	stw	r3,28(r7)
   41ed8:	003f0106 	br	41ae0 <_realloc_r+0x134>
   41edc:	80800217 	ldw	r2,8(r16)
   41ee0:	31800920 	cmpeqi	r6,r6,36
   41ee4:	38800415 	stw	r2,16(r7)
   41ee8:	80800317 	ldw	r2,12(r16)
   41eec:	38800515 	stw	r2,20(r7)
   41ef0:	3000031e 	bne	r6,zero,41f00 <_realloc_r+0x554>
   41ef4:	84000404 	addi	r16,r16,16
   41ef8:	38800604 	addi	r2,r7,24
   41efc:	003fb206 	br	41dc8 <_realloc_r+0x41c>
   41f00:	80c00417 	ldw	r3,16(r16)
   41f04:	84000604 	addi	r16,r16,24
   41f08:	38800804 	addi	r2,r7,32
   41f0c:	38c00615 	stw	r3,24(r7)
   41f10:	80ffff17 	ldw	r3,-4(r16)
   41f14:	38c00715 	stw	r3,28(r7)
   41f18:	003fab06 	br	41dc8 <_realloc_r+0x41c>

00041f1c <_sbrk_r>:
   41f1c:	defffe04 	addi	sp,sp,-8
   41f20:	dc000015 	stw	r16,0(sp)
   41f24:	00800174 	movhi	r2,5
   41f28:	2021883a 	mov	r16,r4
   41f2c:	2809883a 	mov	r4,r5
   41f30:	dfc00115 	stw	ra,4(sp)
   41f34:	1022de15 	stw	zero,-29832(r2)
   41f38:	00437c80 	call	437c8 <sbrk>
   41f3c:	10ffffd8 	cmpnei	r3,r2,-1
   41f40:	18000426 	beq	r3,zero,41f54 <_sbrk_r+0x38>
   41f44:	dfc00117 	ldw	ra,4(sp)
   41f48:	dc000017 	ldw	r16,0(sp)
   41f4c:	dec00204 	addi	sp,sp,8
   41f50:	f800283a 	ret
   41f54:	00c00174 	movhi	r3,5
   41f58:	18e2de17 	ldw	r3,-29832(r3)
   41f5c:	183ff926 	beq	r3,zero,41f44 <_sbrk_r+0x28>
   41f60:	80c00015 	stw	r3,0(r16)
   41f64:	dfc00117 	ldw	ra,4(sp)
   41f68:	dc000017 	ldw	r16,0(sp)
   41f6c:	dec00204 	addi	sp,sp,8
   41f70:	f800283a 	ret

00041f74 <__sread>:
   41f74:	defffe04 	addi	sp,sp,-8
   41f78:	dc000015 	stw	r16,0(sp)
   41f7c:	2821883a 	mov	r16,r5
   41f80:	2940038f 	ldh	r5,14(r5)
   41f84:	dfc00115 	stw	ra,4(sp)
   41f88:	0042da40 	call	42da4 <_read_r>
   41f8c:	10000716 	blt	r2,zero,41fac <__sread+0x38>
   41f90:	80c01417 	ldw	r3,80(r16)
   41f94:	1887883a 	add	r3,r3,r2
   41f98:	80c01415 	stw	r3,80(r16)
   41f9c:	dfc00117 	ldw	ra,4(sp)
   41fa0:	dc000017 	ldw	r16,0(sp)
   41fa4:	dec00204 	addi	sp,sp,8
   41fa8:	f800283a 	ret
   41fac:	80c0030b 	ldhu	r3,12(r16)
   41fb0:	18fbffcc 	andi	r3,r3,61439
   41fb4:	80c0030d 	sth	r3,12(r16)
   41fb8:	dfc00117 	ldw	ra,4(sp)
   41fbc:	dc000017 	ldw	r16,0(sp)
   41fc0:	dec00204 	addi	sp,sp,8
   41fc4:	f800283a 	ret

00041fc8 <__seofread>:
   41fc8:	0005883a 	mov	r2,zero
   41fcc:	f800283a 	ret

00041fd0 <__swrite>:
   41fd0:	2880030b 	ldhu	r2,12(r5)
   41fd4:	defffb04 	addi	sp,sp,-20
   41fd8:	dcc00315 	stw	r19,12(sp)
   41fdc:	dc800215 	stw	r18,8(sp)
   41fe0:	dc400115 	stw	r17,4(sp)
   41fe4:	dc000015 	stw	r16,0(sp)
   41fe8:	dfc00415 	stw	ra,16(sp)
   41fec:	10c0400c 	andi	r3,r2,256
   41ff0:	2821883a 	mov	r16,r5
   41ff4:	2023883a 	mov	r17,r4
   41ff8:	3025883a 	mov	r18,r6
   41ffc:	3827883a 	mov	r19,r7
   42000:	18000d1e 	bne	r3,zero,42038 <__swrite+0x68>
   42004:	8140038f 	ldh	r5,14(r16)
   42008:	10bbffcc 	andi	r2,r2,61439
   4200c:	980f883a 	mov	r7,r19
   42010:	900d883a 	mov	r6,r18
   42014:	8809883a 	mov	r4,r17
   42018:	8080030d 	sth	r2,12(r16)
   4201c:	dfc00417 	ldw	ra,16(sp)
   42020:	dcc00317 	ldw	r19,12(sp)
   42024:	dc800217 	ldw	r18,8(sp)
   42028:	dc400117 	ldw	r17,4(sp)
   4202c:	dc000017 	ldw	r16,0(sp)
   42030:	dec00504 	addi	sp,sp,20
   42034:	00420b41 	jmpi	420b4 <_write_r>
   42038:	2940038f 	ldh	r5,14(r5)
   4203c:	01c00084 	movi	r7,2
   42040:	000d883a 	mov	r6,zero
   42044:	0042b000 	call	42b00 <_lseek_r>
   42048:	8080030b 	ldhu	r2,12(r16)
   4204c:	003fed06 	br	42004 <__swrite+0x34>

00042050 <__sseek>:
   42050:	defffe04 	addi	sp,sp,-8
   42054:	dc000015 	stw	r16,0(sp)
   42058:	2821883a 	mov	r16,r5
   4205c:	2940038f 	ldh	r5,14(r5)
   42060:	dfc00115 	stw	ra,4(sp)
   42064:	0042b000 	call	42b00 <_lseek_r>
   42068:	10ffffd8 	cmpnei	r3,r2,-1
   4206c:	18000826 	beq	r3,zero,42090 <__sseek+0x40>
   42070:	80c0030b 	ldhu	r3,12(r16)
   42074:	80801415 	stw	r2,80(r16)
   42078:	18c40014 	ori	r3,r3,4096
   4207c:	80c0030d 	sth	r3,12(r16)
   42080:	dfc00117 	ldw	ra,4(sp)
   42084:	dc000017 	ldw	r16,0(sp)
   42088:	dec00204 	addi	sp,sp,8
   4208c:	f800283a 	ret
   42090:	80c0030b 	ldhu	r3,12(r16)
   42094:	18fbffcc 	andi	r3,r3,61439
   42098:	80c0030d 	sth	r3,12(r16)
   4209c:	dfc00117 	ldw	ra,4(sp)
   420a0:	dc000017 	ldw	r16,0(sp)
   420a4:	dec00204 	addi	sp,sp,8
   420a8:	f800283a 	ret

000420ac <__sclose>:
   420ac:	2940038f 	ldh	r5,14(r5)
   420b0:	004227c1 	jmpi	4227c <_close_r>

000420b4 <_write_r>:
   420b4:	2807883a 	mov	r3,r5
   420b8:	defffe04 	addi	sp,sp,-8
   420bc:	dc000015 	stw	r16,0(sp)
   420c0:	300b883a 	mov	r5,r6
   420c4:	00800174 	movhi	r2,5
   420c8:	380d883a 	mov	r6,r7
   420cc:	2021883a 	mov	r16,r4
   420d0:	1809883a 	mov	r4,r3
   420d4:	dfc00115 	stw	ra,4(sp)
   420d8:	1022de15 	stw	zero,-29832(r2)
   420dc:	00438bc0 	call	438bc <write>
   420e0:	10ffffd8 	cmpnei	r3,r2,-1
   420e4:	18000426 	beq	r3,zero,420f8 <_write_r+0x44>
   420e8:	dfc00117 	ldw	ra,4(sp)
   420ec:	dc000017 	ldw	r16,0(sp)
   420f0:	dec00204 	addi	sp,sp,8
   420f4:	f800283a 	ret
   420f8:	00c00174 	movhi	r3,5
   420fc:	18e2de17 	ldw	r3,-29832(r3)
   42100:	183ff926 	beq	r3,zero,420e8 <_write_r+0x34>
   42104:	80c00015 	stw	r3,0(r16)
   42108:	dfc00117 	ldw	ra,4(sp)
   4210c:	dc000017 	ldw	r16,0(sp)
   42110:	dec00204 	addi	sp,sp,8
   42114:	f800283a 	ret

00042118 <__swsetup_r>:
   42118:	00800134 	movhi	r2,4
   4211c:	109c3317 	ldw	r2,28876(r2)
   42120:	defffd04 	addi	sp,sp,-12
   42124:	dc400115 	stw	r17,4(sp)
   42128:	dc000015 	stw	r16,0(sp)
   4212c:	dfc00215 	stw	ra,8(sp)
   42130:	2023883a 	mov	r17,r4
   42134:	2821883a 	mov	r16,r5
   42138:	10000226 	beq	r2,zero,42144 <__swsetup_r+0x2c>
   4213c:	10c00e17 	ldw	r3,56(r2)
   42140:	18001f26 	beq	r3,zero,421c0 <__swsetup_r+0xa8>
   42144:	8180030b 	ldhu	r6,12(r16)
   42148:	30c0020c 	andi	r3,r6,8
   4214c:	3005883a 	mov	r2,r6
   42150:	18002126 	beq	r3,zero,421d8 <__swsetup_r+0xc0>
   42154:	80c00417 	ldw	r3,16(r16)
   42158:	18002826 	beq	r3,zero,421fc <__swsetup_r+0xe4>
   4215c:	1100004c 	andi	r4,r2,1
   42160:	20000b1e 	bne	r4,zero,42190 <__swsetup_r+0x78>
   42164:	1100008c 	andi	r4,r2,2
   42168:	20002e1e 	bne	r4,zero,42224 <__swsetup_r+0x10c>
   4216c:	81000517 	ldw	r4,20(r16)
   42170:	81000215 	stw	r4,8(r16)
   42174:	18000b26 	beq	r3,zero,421a4 <__swsetup_r+0x8c>
   42178:	0005883a 	mov	r2,zero
   4217c:	dfc00217 	ldw	ra,8(sp)
   42180:	dc400117 	ldw	r17,4(sp)
   42184:	dc000017 	ldw	r16,0(sp)
   42188:	dec00304 	addi	sp,sp,12
   4218c:	f800283a 	ret
   42190:	81000517 	ldw	r4,20(r16)
   42194:	80000215 	stw	zero,8(r16)
   42198:	0109c83a 	sub	r4,zero,r4
   4219c:	81000615 	stw	r4,24(r16)
   421a0:	183ff51e 	bne	r3,zero,42178 <__swsetup_r+0x60>
   421a4:	10c0200c 	andi	r3,r2,128
   421a8:	0005883a 	mov	r2,zero
   421ac:	183ff326 	beq	r3,zero,4217c <__swsetup_r+0x64>
   421b0:	31801014 	ori	r6,r6,64
   421b4:	8180030d 	sth	r6,12(r16)
   421b8:	00bfffc4 	movi	r2,-1
   421bc:	003fef06 	br	4217c <__swsetup_r+0x64>
   421c0:	1009883a 	mov	r4,r2
   421c4:	00407980 	call	40798 <__sinit>
   421c8:	8180030b 	ldhu	r6,12(r16)
   421cc:	30c0020c 	andi	r3,r6,8
   421d0:	3005883a 	mov	r2,r6
   421d4:	183fdf1e 	bne	r3,zero,42154 <__swsetup_r+0x3c>
   421d8:	3080040c 	andi	r2,r6,16
   421dc:	10002126 	beq	r2,zero,42264 <__swsetup_r+0x14c>
   421e0:	3080010c 	andi	r2,r6,4
   421e4:	1000111e 	bne	r2,zero,4222c <__swsetup_r+0x114>
   421e8:	80c00417 	ldw	r3,16(r16)
   421ec:	30800214 	ori	r2,r6,8
   421f0:	8080030d 	sth	r2,12(r16)
   421f4:	100d883a 	mov	r6,r2
   421f8:	183fd81e 	bne	r3,zero,4215c <__swsetup_r+0x44>
   421fc:	1100a00c 	andi	r4,r2,640
   42200:	21008020 	cmpeqi	r4,r4,512
   42204:	203fd51e 	bne	r4,zero,4215c <__swsetup_r+0x44>
   42208:	800b883a 	mov	r5,r16
   4220c:	8809883a 	mov	r4,r17
   42210:	0042b640 	call	42b64 <__smakebuf_r>
   42214:	8180030b 	ldhu	r6,12(r16)
   42218:	80c00417 	ldw	r3,16(r16)
   4221c:	3005883a 	mov	r2,r6
   42220:	003fce06 	br	4215c <__swsetup_r+0x44>
   42224:	0009883a 	mov	r4,zero
   42228:	003fd106 	br	42170 <__swsetup_r+0x58>
   4222c:	81400c17 	ldw	r5,48(r16)
   42230:	28000626 	beq	r5,zero,4224c <__swsetup_r+0x134>
   42234:	80801004 	addi	r2,r16,64
   42238:	28800326 	beq	r5,r2,42248 <__swsetup_r+0x130>
   4223c:	8809883a 	mov	r4,r17
   42240:	00428040 	call	42804 <_free_r>
   42244:	8180030b 	ldhu	r6,12(r16)
   42248:	80000c15 	stw	zero,48(r16)
   4224c:	80c00417 	ldw	r3,16(r16)
   42250:	00bff6c4 	movi	r2,-37
   42254:	118c703a 	and	r6,r2,r6
   42258:	80000115 	stw	zero,4(r16)
   4225c:	80c00015 	stw	r3,0(r16)
   42260:	003fe206 	br	421ec <__swsetup_r+0xd4>
   42264:	00800244 	movi	r2,9
   42268:	88800015 	stw	r2,0(r17)
   4226c:	31801014 	ori	r6,r6,64
   42270:	8180030d 	sth	r6,12(r16)
   42274:	00bfffc4 	movi	r2,-1
   42278:	003fc006 	br	4217c <__swsetup_r+0x64>

0004227c <_close_r>:
   4227c:	defffe04 	addi	sp,sp,-8
   42280:	dc000015 	stw	r16,0(sp)
   42284:	00800174 	movhi	r2,5
   42288:	2021883a 	mov	r16,r4
   4228c:	2809883a 	mov	r4,r5
   42290:	dfc00115 	stw	ra,4(sp)
   42294:	1022de15 	stw	zero,-29832(r2)
   42298:	00430b00 	call	430b0 <close>
   4229c:	10ffffd8 	cmpnei	r3,r2,-1
   422a0:	18000426 	beq	r3,zero,422b4 <_close_r+0x38>
   422a4:	dfc00117 	ldw	ra,4(sp)
   422a8:	dc000017 	ldw	r16,0(sp)
   422ac:	dec00204 	addi	sp,sp,8
   422b0:	f800283a 	ret
   422b4:	00c00174 	movhi	r3,5
   422b8:	18e2de17 	ldw	r3,-29832(r3)
   422bc:	183ff926 	beq	r3,zero,422a4 <_close_r+0x28>
   422c0:	80c00015 	stw	r3,0(r16)
   422c4:	dfc00117 	ldw	ra,4(sp)
   422c8:	dc000017 	ldw	r16,0(sp)
   422cc:	dec00204 	addi	sp,sp,8
   422d0:	f800283a 	ret

000422d4 <_fclose_r>:
   422d4:	defffc04 	addi	sp,sp,-16
   422d8:	dfc00315 	stw	ra,12(sp)
   422dc:	dc800215 	stw	r18,8(sp)
   422e0:	dc400115 	stw	r17,4(sp)
   422e4:	dc000015 	stw	r16,0(sp)
   422e8:	28000726 	beq	r5,zero,42308 <_fclose_r+0x34>
   422ec:	2821883a 	mov	r16,r5
   422f0:	2023883a 	mov	r17,r4
   422f4:	20000226 	beq	r4,zero,42300 <_fclose_r+0x2c>
   422f8:	20800e17 	ldw	r2,56(r4)
   422fc:	10002726 	beq	r2,zero,4239c <_fclose_r+0xc8>
   42300:	8080030f 	ldh	r2,12(r16)
   42304:	1000081e 	bne	r2,zero,42328 <_fclose_r+0x54>
   42308:	0025883a 	mov	r18,zero
   4230c:	9005883a 	mov	r2,r18
   42310:	dfc00317 	ldw	ra,12(sp)
   42314:	dc800217 	ldw	r18,8(sp)
   42318:	dc400117 	ldw	r17,4(sp)
   4231c:	dc000017 	ldw	r16,0(sp)
   42320:	dec00404 	addi	sp,sp,16
   42324:	f800283a 	ret
   42328:	800b883a 	mov	r5,r16
   4232c:	8809883a 	mov	r4,r17
   42330:	00423dc0 	call	423dc <__sflush_r>
   42334:	80c00b17 	ldw	r3,44(r16)
   42338:	1025883a 	mov	r18,r2
   4233c:	18000426 	beq	r3,zero,42350 <_fclose_r+0x7c>
   42340:	81400717 	ldw	r5,28(r16)
   42344:	8809883a 	mov	r4,r17
   42348:	183ee83a 	callr	r3
   4234c:	10001716 	blt	r2,zero,423ac <_fclose_r+0xd8>
   42350:	8080030b 	ldhu	r2,12(r16)
   42354:	1080200c 	andi	r2,r2,128
   42358:	1000181e 	bne	r2,zero,423bc <_fclose_r+0xe8>
   4235c:	81400c17 	ldw	r5,48(r16)
   42360:	28000526 	beq	r5,zero,42378 <_fclose_r+0xa4>
   42364:	80801004 	addi	r2,r16,64
   42368:	28800226 	beq	r5,r2,42374 <_fclose_r+0xa0>
   4236c:	8809883a 	mov	r4,r17
   42370:	00428040 	call	42804 <_free_r>
   42374:	80000c15 	stw	zero,48(r16)
   42378:	81401117 	ldw	r5,68(r16)
   4237c:	28000326 	beq	r5,zero,4238c <_fclose_r+0xb8>
   42380:	8809883a 	mov	r4,r17
   42384:	00428040 	call	42804 <_free_r>
   42388:	80001115 	stw	zero,68(r16)
   4238c:	00407a80 	call	407a8 <__sfp_lock_acquire>
   42390:	8000030d 	sth	zero,12(r16)
   42394:	00407ac0 	call	407ac <__sfp_lock_release>
   42398:	003fdc06 	br	4230c <_fclose_r+0x38>
   4239c:	00407980 	call	40798 <__sinit>
   423a0:	8080030f 	ldh	r2,12(r16)
   423a4:	103fd826 	beq	r2,zero,42308 <_fclose_r+0x34>
   423a8:	003fdf06 	br	42328 <_fclose_r+0x54>
   423ac:	8080030b 	ldhu	r2,12(r16)
   423b0:	04bfffc4 	movi	r18,-1
   423b4:	1080200c 	andi	r2,r2,128
   423b8:	103fe826 	beq	r2,zero,4235c <_fclose_r+0x88>
   423bc:	81400417 	ldw	r5,16(r16)
   423c0:	8809883a 	mov	r4,r17
   423c4:	00428040 	call	42804 <_free_r>
   423c8:	003fe406 	br	4235c <_fclose_r+0x88>

000423cc <fclose>:
   423cc:	00800134 	movhi	r2,4
   423d0:	200b883a 	mov	r5,r4
   423d4:	111c3317 	ldw	r4,28876(r2)
   423d8:	00422d41 	jmpi	422d4 <_fclose_r>

000423dc <__sflush_r>:
   423dc:	2880030b 	ldhu	r2,12(r5)
   423e0:	defffb04 	addi	sp,sp,-20
   423e4:	dcc00315 	stw	r19,12(sp)
   423e8:	dc000015 	stw	r16,0(sp)
   423ec:	dfc00415 	stw	ra,16(sp)
   423f0:	dc800215 	stw	r18,8(sp)
   423f4:	dc400115 	stw	r17,4(sp)
   423f8:	10c0020c 	andi	r3,r2,8
   423fc:	2821883a 	mov	r16,r5
   42400:	2027883a 	mov	r19,r4
   42404:	18003f1e 	bne	r3,zero,42504 <__sflush_r+0x128>
   42408:	28c00117 	ldw	r3,4(r5)
   4240c:	10820014 	ori	r2,r2,2048
   42410:	2880030d 	sth	r2,12(r5)
   42414:	00c0550e 	bge	zero,r3,4256c <__sflush_r+0x190>
   42418:	82000a17 	ldw	r8,40(r16)
   4241c:	40003126 	beq	r8,zero,424e4 <__sflush_r+0x108>
   42420:	9c400017 	ldw	r17,0(r19)
   42424:	1104000c 	andi	r4,r2,4096
   42428:	98000015 	stw	zero,0(r19)
   4242c:	81400717 	ldw	r5,28(r16)
   42430:	1007883a 	mov	r3,r2
   42434:	2000521e 	bne	r4,zero,42580 <__sflush_r+0x1a4>
   42438:	01c00044 	movi	r7,1
   4243c:	000d883a 	mov	r6,zero
   42440:	9809883a 	mov	r4,r19
   42444:	403ee83a 	callr	r8
   42448:	10ffffd8 	cmpnei	r3,r2,-1
   4244c:	18005826 	beq	r3,zero,425b0 <__sflush_r+0x1d4>
   42450:	80c0030b 	ldhu	r3,12(r16)
   42454:	82000a17 	ldw	r8,40(r16)
   42458:	18c0010c 	andi	r3,r3,4
   4245c:	18000626 	beq	r3,zero,42478 <__sflush_r+0x9c>
   42460:	81000117 	ldw	r4,4(r16)
   42464:	80c00c17 	ldw	r3,48(r16)
   42468:	1105c83a 	sub	r2,r2,r4
   4246c:	18000226 	beq	r3,zero,42478 <__sflush_r+0x9c>
   42470:	80c00f17 	ldw	r3,60(r16)
   42474:	10c5c83a 	sub	r2,r2,r3
   42478:	81400717 	ldw	r5,28(r16)
   4247c:	100d883a 	mov	r6,r2
   42480:	000f883a 	mov	r7,zero
   42484:	9809883a 	mov	r4,r19
   42488:	403ee83a 	callr	r8
   4248c:	10ffffd8 	cmpnei	r3,r2,-1
   42490:	18003d1e 	bne	r3,zero,42588 <__sflush_r+0x1ac>
   42494:	99000017 	ldw	r4,0(r19)
   42498:	80c0030b 	ldhu	r3,12(r16)
   4249c:	20004e26 	beq	r4,zero,425d8 <__sflush_r+0x1fc>
   424a0:	21400760 	cmpeqi	r5,r4,29
   424a4:	2800021e 	bne	r5,zero,424b0 <__sflush_r+0xd4>
   424a8:	210005a0 	cmpeqi	r4,r4,22
   424ac:	20002c26 	beq	r4,zero,42560 <__sflush_r+0x184>
   424b0:	80800417 	ldw	r2,16(r16)
   424b4:	18fdffcc 	andi	r3,r3,63487
   424b8:	80c0030d 	sth	r3,12(r16)
   424bc:	80000115 	stw	zero,4(r16)
   424c0:	80800015 	stw	r2,0(r16)
   424c4:	81400c17 	ldw	r5,48(r16)
   424c8:	9c400015 	stw	r17,0(r19)
   424cc:	28000526 	beq	r5,zero,424e4 <__sflush_r+0x108>
   424d0:	80801004 	addi	r2,r16,64
   424d4:	28800226 	beq	r5,r2,424e0 <__sflush_r+0x104>
   424d8:	9809883a 	mov	r4,r19
   424dc:	00428040 	call	42804 <_free_r>
   424e0:	80000c15 	stw	zero,48(r16)
   424e4:	0005883a 	mov	r2,zero
   424e8:	dfc00417 	ldw	ra,16(sp)
   424ec:	dcc00317 	ldw	r19,12(sp)
   424f0:	dc800217 	ldw	r18,8(sp)
   424f4:	dc400117 	ldw	r17,4(sp)
   424f8:	dc000017 	ldw	r16,0(sp)
   424fc:	dec00504 	addi	sp,sp,20
   42500:	f800283a 	ret
   42504:	2c800417 	ldw	r18,16(r5)
   42508:	903ff626 	beq	r18,zero,424e4 <__sflush_r+0x108>
   4250c:	2c400017 	ldw	r17,0(r5)
   42510:	108000cc 	andi	r2,r2,3
   42514:	2c800015 	stw	r18,0(r5)
   42518:	8ca3c83a 	sub	r17,r17,r18
   4251c:	1000161e 	bne	r2,zero,42578 <__sflush_r+0x19c>
   42520:	28800517 	ldw	r2,20(r5)
   42524:	80800215 	stw	r2,8(r16)
   42528:	04400316 	blt	zero,r17,42538 <__sflush_r+0x15c>
   4252c:	003fed06 	br	424e4 <__sflush_r+0x108>
   42530:	90a5883a 	add	r18,r18,r2
   42534:	047feb0e 	bge	zero,r17,424e4 <__sflush_r+0x108>
   42538:	80800917 	ldw	r2,36(r16)
   4253c:	81400717 	ldw	r5,28(r16)
   42540:	880f883a 	mov	r7,r17
   42544:	900d883a 	mov	r6,r18
   42548:	9809883a 	mov	r4,r19
   4254c:	103ee83a 	callr	r2
   42550:	88a3c83a 	sub	r17,r17,r2
   42554:	00bff616 	blt	zero,r2,42530 <__sflush_r+0x154>
   42558:	80c0030b 	ldhu	r3,12(r16)
   4255c:	00bfffc4 	movi	r2,-1
   42560:	18c01014 	ori	r3,r3,64
   42564:	80c0030d 	sth	r3,12(r16)
   42568:	003fdf06 	br	424e8 <__sflush_r+0x10c>
   4256c:	28c00f17 	ldw	r3,60(r5)
   42570:	00ffa916 	blt	zero,r3,42418 <__sflush_r+0x3c>
   42574:	003fdb06 	br	424e4 <__sflush_r+0x108>
   42578:	0005883a 	mov	r2,zero
   4257c:	003fe906 	br	42524 <__sflush_r+0x148>
   42580:	80801417 	ldw	r2,80(r16)
   42584:	003fb406 	br	42458 <__sflush_r+0x7c>
   42588:	80c0030b 	ldhu	r3,12(r16)
   4258c:	81000417 	ldw	r4,16(r16)
   42590:	80000115 	stw	zero,4(r16)
   42594:	197dffcc 	andi	r5,r3,63487
   42598:	8140030d 	sth	r5,12(r16)
   4259c:	81000015 	stw	r4,0(r16)
   425a0:	18c4000c 	andi	r3,r3,4096
   425a4:	183fc726 	beq	r3,zero,424c4 <__sflush_r+0xe8>
   425a8:	80801415 	stw	r2,80(r16)
   425ac:	003fc506 	br	424c4 <__sflush_r+0xe8>
   425b0:	98c00017 	ldw	r3,0(r19)
   425b4:	183fa626 	beq	r3,zero,42450 <__sflush_r+0x74>
   425b8:	19000760 	cmpeqi	r4,r3,29
   425bc:	20000e1e 	bne	r4,zero,425f8 <__sflush_r+0x21c>
   425c0:	18c00598 	cmpnei	r3,r3,22
   425c4:	18000c26 	beq	r3,zero,425f8 <__sflush_r+0x21c>
   425c8:	80c0030b 	ldhu	r3,12(r16)
   425cc:	18c01014 	ori	r3,r3,64
   425d0:	80c0030d 	sth	r3,12(r16)
   425d4:	003fc406 	br	424e8 <__sflush_r+0x10c>
   425d8:	81000417 	ldw	r4,16(r16)
   425dc:	197dffcc 	andi	r5,r3,63487
   425e0:	8140030d 	sth	r5,12(r16)
   425e4:	80000115 	stw	zero,4(r16)
   425e8:	81000015 	stw	r4,0(r16)
   425ec:	18c4000c 	andi	r3,r3,4096
   425f0:	183fb426 	beq	r3,zero,424c4 <__sflush_r+0xe8>
   425f4:	003fec06 	br	425a8 <__sflush_r+0x1cc>
   425f8:	9c400015 	stw	r17,0(r19)
   425fc:	0005883a 	mov	r2,zero
   42600:	003fb906 	br	424e8 <__sflush_r+0x10c>

00042604 <_fflush_r>:
   42604:	defffd04 	addi	sp,sp,-12
   42608:	dc000115 	stw	r16,4(sp)
   4260c:	dfc00215 	stw	ra,8(sp)
   42610:	2021883a 	mov	r16,r4
   42614:	20000226 	beq	r4,zero,42620 <_fflush_r+0x1c>
   42618:	20800e17 	ldw	r2,56(r4)
   4261c:	10000726 	beq	r2,zero,4263c <_fflush_r+0x38>
   42620:	2880030f 	ldh	r2,12(r5)
   42624:	10000a1e 	bne	r2,zero,42650 <_fflush_r+0x4c>
   42628:	0005883a 	mov	r2,zero
   4262c:	dfc00217 	ldw	ra,8(sp)
   42630:	dc000117 	ldw	r16,4(sp)
   42634:	dec00304 	addi	sp,sp,12
   42638:	f800283a 	ret
   4263c:	d9400015 	stw	r5,0(sp)
   42640:	00407980 	call	40798 <__sinit>
   42644:	d9400017 	ldw	r5,0(sp)
   42648:	2880030f 	ldh	r2,12(r5)
   4264c:	103ff626 	beq	r2,zero,42628 <_fflush_r+0x24>
   42650:	8009883a 	mov	r4,r16
   42654:	dfc00217 	ldw	ra,8(sp)
   42658:	dc000117 	ldw	r16,4(sp)
   4265c:	dec00304 	addi	sp,sp,12
   42660:	00423dc1 	jmpi	423dc <__sflush_r>

00042664 <fflush>:
   42664:	20001726 	beq	r4,zero,426c4 <fflush+0x60>
   42668:	00800134 	movhi	r2,4
   4266c:	200b883a 	mov	r5,r4
   42670:	111c3317 	ldw	r4,28876(r2)
   42674:	20000226 	beq	r4,zero,42680 <fflush+0x1c>
   42678:	20800e17 	ldw	r2,56(r4)
   4267c:	10000526 	beq	r2,zero,42694 <fflush+0x30>
   42680:	2880030f 	ldh	r2,12(r5)
   42684:	1000021e 	bne	r2,zero,42690 <fflush+0x2c>
   42688:	0005883a 	mov	r2,zero
   4268c:	f800283a 	ret
   42690:	00423dc1 	jmpi	423dc <__sflush_r>
   42694:	defffd04 	addi	sp,sp,-12
   42698:	d9400115 	stw	r5,4(sp)
   4269c:	d9000015 	stw	r4,0(sp)
   426a0:	dfc00215 	stw	ra,8(sp)
   426a4:	00407980 	call	40798 <__sinit>
   426a8:	d9400117 	ldw	r5,4(sp)
   426ac:	d9000017 	ldw	r4,0(sp)
   426b0:	2880030f 	ldh	r2,12(r5)
   426b4:	10000826 	beq	r2,zero,426d8 <fflush+0x74>
   426b8:	dfc00217 	ldw	ra,8(sp)
   426bc:	dec00304 	addi	sp,sp,12
   426c0:	00423dc1 	jmpi	423dc <__sflush_r>
   426c4:	00800134 	movhi	r2,4
   426c8:	111c3217 	ldw	r4,28872(r2)
   426cc:	01400134 	movhi	r5,4
   426d0:	29498104 	addi	r5,r5,9732
   426d4:	0040d341 	jmpi	40d34 <_fwalk_reent>
   426d8:	0005883a 	mov	r2,zero
   426dc:	dfc00217 	ldw	ra,8(sp)
   426e0:	dec00304 	addi	sp,sp,12
   426e4:	f800283a 	ret

000426e8 <_malloc_trim_r>:
   426e8:	defffb04 	addi	sp,sp,-20
   426ec:	dcc00315 	stw	r19,12(sp)
   426f0:	04c00134 	movhi	r19,4
   426f4:	dc800215 	stw	r18,8(sp)
   426f8:	dc400115 	stw	r17,4(sp)
   426fc:	dc000015 	stw	r16,0(sp)
   42700:	dfc00415 	stw	ra,16(sp)
   42704:	2821883a 	mov	r16,r5
   42708:	9cd6ae04 	addi	r19,r19,23224
   4270c:	2025883a 	mov	r18,r4
   42710:	00435f00 	call	435f0 <__malloc_lock>
   42714:	98800217 	ldw	r2,8(r19)
   42718:	14400117 	ldw	r17,4(r2)
   4271c:	00bfff04 	movi	r2,-4
   42720:	88a2703a 	and	r17,r17,r2
   42724:	8c21c83a 	sub	r16,r17,r16
   42728:	8403fbc4 	addi	r16,r16,4079
   4272c:	8020d33a 	srli	r16,r16,12
   42730:	843fffc4 	addi	r16,r16,-1
   42734:	8020933a 	slli	r16,r16,12
   42738:	80840008 	cmpgei	r2,r16,4096
   4273c:	10000626 	beq	r2,zero,42758 <_malloc_trim_r+0x70>
   42740:	000b883a 	mov	r5,zero
   42744:	9009883a 	mov	r4,r18
   42748:	0041f1c0 	call	41f1c <_sbrk_r>
   4274c:	98c00217 	ldw	r3,8(r19)
   42750:	1c47883a 	add	r3,r3,r17
   42754:	10c00a26 	beq	r2,r3,42780 <_malloc_trim_r+0x98>
   42758:	9009883a 	mov	r4,r18
   4275c:	00436140 	call	43614 <__malloc_unlock>
   42760:	0005883a 	mov	r2,zero
   42764:	dfc00417 	ldw	ra,16(sp)
   42768:	dcc00317 	ldw	r19,12(sp)
   4276c:	dc800217 	ldw	r18,8(sp)
   42770:	dc400117 	ldw	r17,4(sp)
   42774:	dc000017 	ldw	r16,0(sp)
   42778:	dec00504 	addi	sp,sp,20
   4277c:	f800283a 	ret
   42780:	040bc83a 	sub	r5,zero,r16
   42784:	9009883a 	mov	r4,r18
   42788:	0041f1c0 	call	41f1c <_sbrk_r>
   4278c:	10bfffd8 	cmpnei	r2,r2,-1
   42790:	10000d26 	beq	r2,zero,427c8 <_malloc_trim_r+0xe0>
   42794:	00800174 	movhi	r2,5
   42798:	10a2e717 	ldw	r2,-29796(r2)
   4279c:	98c00217 	ldw	r3,8(r19)
   427a0:	8c23c83a 	sub	r17,r17,r16
   427a4:	8c400054 	ori	r17,r17,1
   427a8:	1405c83a 	sub	r2,r2,r16
   427ac:	1c400115 	stw	r17,4(r3)
   427b0:	9009883a 	mov	r4,r18
   427b4:	00c00174 	movhi	r3,5
   427b8:	18a2e715 	stw	r2,-29796(r3)
   427bc:	00436140 	call	43614 <__malloc_unlock>
   427c0:	00800044 	movi	r2,1
   427c4:	003fe706 	br	42764 <_malloc_trim_r+0x7c>
   427c8:	000b883a 	mov	r5,zero
   427cc:	9009883a 	mov	r4,r18
   427d0:	0041f1c0 	call	41f1c <_sbrk_r>
   427d4:	99000217 	ldw	r4,8(r19)
   427d8:	1107c83a 	sub	r3,r2,r4
   427dc:	19400410 	cmplti	r5,r3,16
   427e0:	283fdd1e 	bne	r5,zero,42758 <_malloc_trim_r+0x70>
   427e4:	01400134 	movhi	r5,4
   427e8:	295c3417 	ldw	r5,28880(r5)
   427ec:	18c00054 	ori	r3,r3,1
   427f0:	20c00115 	stw	r3,4(r4)
   427f4:	1145c83a 	sub	r2,r2,r5
   427f8:	01400174 	movhi	r5,5
   427fc:	28a2e715 	stw	r2,-29796(r5)
   42800:	003fd506 	br	42758 <_malloc_trim_r+0x70>

00042804 <_free_r>:
   42804:	28004f26 	beq	r5,zero,42944 <_free_r+0x140>
   42808:	defffd04 	addi	sp,sp,-12
   4280c:	dc400115 	stw	r17,4(sp)
   42810:	dc000015 	stw	r16,0(sp)
   42814:	2023883a 	mov	r17,r4
   42818:	2821883a 	mov	r16,r5
   4281c:	dfc00215 	stw	ra,8(sp)
   42820:	00435f00 	call	435f0 <__malloc_lock>
   42824:	81ffff17 	ldw	r7,-4(r16)
   42828:	00bfff84 	movi	r2,-2
   4282c:	80fffe04 	addi	r3,r16,-8
   42830:	3884703a 	and	r2,r7,r2
   42834:	01000134 	movhi	r4,4
   42838:	188d883a 	add	r6,r3,r2
   4283c:	2116ae04 	addi	r4,r4,23224
   42840:	31400117 	ldw	r5,4(r6)
   42844:	22000217 	ldw	r8,8(r4)
   42848:	027fff04 	movi	r9,-4
   4284c:	2a4a703a 	and	r5,r5,r9
   42850:	41806426 	beq	r8,r6,429e4 <_free_r+0x1e0>
   42854:	31400115 	stw	r5,4(r6)
   42858:	39c0004c 	andi	r7,r7,1
   4285c:	3151883a 	add	r8,r6,r5
   42860:	3800281e 	bne	r7,zero,42904 <_free_r+0x100>
   42864:	82bffe17 	ldw	r10,-8(r16)
   42868:	42000117 	ldw	r8,4(r8)
   4286c:	01c00134 	movhi	r7,4
   42870:	1a87c83a 	sub	r3,r3,r10
   42874:	1a400217 	ldw	r9,8(r3)
   42878:	39d6b004 	addi	r7,r7,23232
   4287c:	1285883a 	add	r2,r2,r10
   42880:	4200004c 	andi	r8,r8,1
   42884:	49c04c26 	beq	r9,r7,429b8 <_free_r+0x1b4>
   42888:	1a800317 	ldw	r10,12(r3)
   4288c:	4a800315 	stw	r10,12(r9)
   42890:	52400215 	stw	r9,8(r10)
   42894:	40007126 	beq	r8,zero,42a5c <_free_r+0x258>
   42898:	11400054 	ori	r5,r2,1
   4289c:	19400115 	stw	r5,4(r3)
   428a0:	30800015 	stw	r2,0(r6)
   428a4:	11408028 	cmpgeui	r5,r2,512
   428a8:	28002c1e 	bne	r5,zero,4295c <_free_r+0x158>
   428ac:	100ad0fa 	srli	r5,r2,3
   428b0:	100cd17a 	srli	r6,r2,5
   428b4:	21c00117 	ldw	r7,4(r4)
   428b8:	28800044 	addi	r2,r5,1
   428bc:	100490fa 	slli	r2,r2,3
   428c0:	01400044 	movi	r5,1
   428c4:	298a983a 	sll	r5,r5,r6
   428c8:	2085883a 	add	r2,r4,r2
   428cc:	11800017 	ldw	r6,0(r2)
   428d0:	29cab03a 	or	r5,r5,r7
   428d4:	11fffe04 	addi	r7,r2,-8
   428d8:	19c00315 	stw	r7,12(r3)
   428dc:	19800215 	stw	r6,8(r3)
   428e0:	21400115 	stw	r5,4(r4)
   428e4:	10c00015 	stw	r3,0(r2)
   428e8:	30c00315 	stw	r3,12(r6)
   428ec:	8809883a 	mov	r4,r17
   428f0:	dfc00217 	ldw	ra,8(sp)
   428f4:	dc400117 	ldw	r17,4(sp)
   428f8:	dc000017 	ldw	r16,0(sp)
   428fc:	dec00304 	addi	sp,sp,12
   42900:	00436141 	jmpi	43614 <__malloc_unlock>
   42904:	41c00117 	ldw	r7,4(r8)
   42908:	39c0004c 	andi	r7,r7,1
   4290c:	38000e1e 	bne	r7,zero,42948 <_free_r+0x144>
   42910:	01c00134 	movhi	r7,4
   42914:	1145883a 	add	r2,r2,r5
   42918:	39d6b004 	addi	r7,r7,23232
   4291c:	31400217 	ldw	r5,8(r6)
   42920:	12400054 	ori	r9,r2,1
   42924:	1891883a 	add	r8,r3,r2
   42928:	29c05226 	beq	r5,r7,42a74 <_free_r+0x270>
   4292c:	31800317 	ldw	r6,12(r6)
   42930:	29800315 	stw	r6,12(r5)
   42934:	31400215 	stw	r5,8(r6)
   42938:	1a400115 	stw	r9,4(r3)
   4293c:	40800015 	stw	r2,0(r8)
   42940:	003fd806 	br	428a4 <_free_r+0xa0>
   42944:	f800283a 	ret
   42948:	11400054 	ori	r5,r2,1
   4294c:	817fff15 	stw	r5,-4(r16)
   42950:	30800015 	stw	r2,0(r6)
   42954:	11408028 	cmpgeui	r5,r2,512
   42958:	283fd426 	beq	r5,zero,428ac <_free_r+0xa8>
   4295c:	100ad27a 	srli	r5,r2,9
   42960:	29800168 	cmpgeui	r6,r5,5
   42964:	3000341e 	bne	r6,zero,42a38 <_free_r+0x234>
   42968:	100ad1ba 	srli	r5,r2,6
   4296c:	29800e44 	addi	r6,r5,57
   42970:	300c90fa 	slli	r6,r6,3
   42974:	29c00e04 	addi	r7,r5,56
   42978:	218d883a 	add	r6,r4,r6
   4297c:	31400017 	ldw	r5,0(r6)
   42980:	31bffe04 	addi	r6,r6,-8
   42984:	31404226 	beq	r6,r5,42a90 <_free_r+0x28c>
   42988:	01ffff04 	movi	r7,-4
   4298c:	29000117 	ldw	r4,4(r5)
   42990:	21c8703a 	and	r4,r4,r7
   42994:	1100022e 	bgeu	r2,r4,429a0 <_free_r+0x19c>
   42998:	29400217 	ldw	r5,8(r5)
   4299c:	317ffb1e 	bne	r6,r5,4298c <_free_r+0x188>
   429a0:	29800317 	ldw	r6,12(r5)
   429a4:	19800315 	stw	r6,12(r3)
   429a8:	19400215 	stw	r5,8(r3)
   429ac:	30c00215 	stw	r3,8(r6)
   429b0:	28c00315 	stw	r3,12(r5)
   429b4:	003fcd06 	br	428ec <_free_r+0xe8>
   429b8:	40004d1e 	bne	r8,zero,42af0 <_free_r+0x2ec>
   429bc:	31000317 	ldw	r4,12(r6)
   429c0:	31800217 	ldw	r6,8(r6)
   429c4:	288b883a 	add	r5,r5,r2
   429c8:	28800054 	ori	r2,r5,1
   429cc:	31000315 	stw	r4,12(r6)
   429d0:	21800215 	stw	r6,8(r4)
   429d4:	18800115 	stw	r2,4(r3)
   429d8:	1947883a 	add	r3,r3,r5
   429dc:	19400015 	stw	r5,0(r3)
   429e0:	003fc206 	br	428ec <_free_r+0xe8>
   429e4:	39c0004c 	andi	r7,r7,1
   429e8:	114b883a 	add	r5,r2,r5
   429ec:	3800071e 	bne	r7,zero,42a0c <_free_r+0x208>
   429f0:	81fffe17 	ldw	r7,-8(r16)
   429f4:	19c7c83a 	sub	r3,r3,r7
   429f8:	18800317 	ldw	r2,12(r3)
   429fc:	19800217 	ldw	r6,8(r3)
   42a00:	29cb883a 	add	r5,r5,r7
   42a04:	30800315 	stw	r2,12(r6)
   42a08:	11800215 	stw	r6,8(r2)
   42a0c:	00800134 	movhi	r2,4
   42a10:	29800054 	ori	r6,r5,1
   42a14:	109c3517 	ldw	r2,28884(r2)
   42a18:	19800115 	stw	r6,4(r3)
   42a1c:	20c00215 	stw	r3,8(r4)
   42a20:	28bfb236 	bltu	r5,r2,428ec <_free_r+0xe8>
   42a24:	00800174 	movhi	r2,5
   42a28:	1162dd17 	ldw	r5,-29836(r2)
   42a2c:	8809883a 	mov	r4,r17
   42a30:	00426e80 	call	426e8 <_malloc_trim_r>
   42a34:	003fad06 	br	428ec <_free_r+0xe8>
   42a38:	29800568 	cmpgeui	r6,r5,21
   42a3c:	30000926 	beq	r6,zero,42a64 <_free_r+0x260>
   42a40:	29801568 	cmpgeui	r6,r5,85
   42a44:	3000191e 	bne	r6,zero,42aac <_free_r+0x2a8>
   42a48:	100ad33a 	srli	r5,r2,12
   42a4c:	29801bc4 	addi	r6,r5,111
   42a50:	300c90fa 	slli	r6,r6,3
   42a54:	29c01b84 	addi	r7,r5,110
   42a58:	003fc706 	br	42978 <_free_r+0x174>
   42a5c:	1145883a 	add	r2,r2,r5
   42a60:	003fae06 	br	4291c <_free_r+0x118>
   42a64:	29801704 	addi	r6,r5,92
   42a68:	300c90fa 	slli	r6,r6,3
   42a6c:	29c016c4 	addi	r7,r5,91
   42a70:	003fc106 	br	42978 <_free_r+0x174>
   42a74:	20c00515 	stw	r3,20(r4)
   42a78:	20c00415 	stw	r3,16(r4)
   42a7c:	19c00315 	stw	r7,12(r3)
   42a80:	19c00215 	stw	r7,8(r3)
   42a84:	1a400115 	stw	r9,4(r3)
   42a88:	40800015 	stw	r2,0(r8)
   42a8c:	003f9706 	br	428ec <_free_r+0xe8>
   42a90:	380fd0ba 	srai	r7,r7,2
   42a94:	00800044 	movi	r2,1
   42a98:	22000117 	ldw	r8,4(r4)
   42a9c:	11c4983a 	sll	r2,r2,r7
   42aa0:	1204b03a 	or	r2,r2,r8
   42aa4:	20800115 	stw	r2,4(r4)
   42aa8:	003fbe06 	br	429a4 <_free_r+0x1a0>
   42aac:	29805568 	cmpgeui	r6,r5,341
   42ab0:	3000051e 	bne	r6,zero,42ac8 <_free_r+0x2c4>
   42ab4:	100ad3fa 	srli	r5,r2,15
   42ab8:	29801e04 	addi	r6,r5,120
   42abc:	300c90fa 	slli	r6,r6,3
   42ac0:	29c01dc4 	addi	r7,r5,119
   42ac4:	003fac06 	br	42978 <_free_r+0x174>
   42ac8:	29415568 	cmpgeui	r5,r5,1365
   42acc:	2800051e 	bne	r5,zero,42ae4 <_free_r+0x2e0>
   42ad0:	100ad4ba 	srli	r5,r2,18
   42ad4:	29801f44 	addi	r6,r5,125
   42ad8:	300c90fa 	slli	r6,r6,3
   42adc:	29c01f04 	addi	r7,r5,124
   42ae0:	003fa506 	br	42978 <_free_r+0x174>
   42ae4:	0180fe04 	movi	r6,1016
   42ae8:	01c01f84 	movi	r7,126
   42aec:	003fa206 	br	42978 <_free_r+0x174>
   42af0:	11000054 	ori	r4,r2,1
   42af4:	19000115 	stw	r4,4(r3)
   42af8:	30800015 	stw	r2,0(r6)
   42afc:	003f7b06 	br	428ec <_free_r+0xe8>

00042b00 <_lseek_r>:
   42b00:	2807883a 	mov	r3,r5
   42b04:	defffe04 	addi	sp,sp,-8
   42b08:	dc000015 	stw	r16,0(sp)
   42b0c:	300b883a 	mov	r5,r6
   42b10:	00800174 	movhi	r2,5
   42b14:	380d883a 	mov	r6,r7
   42b18:	2021883a 	mov	r16,r4
   42b1c:	1809883a 	mov	r4,r3
   42b20:	dfc00115 	stw	ra,4(sp)
   42b24:	1022de15 	stw	zero,-29832(r2)
   42b28:	00434a00 	call	434a0 <lseek>
   42b2c:	10ffffd8 	cmpnei	r3,r2,-1
   42b30:	18000426 	beq	r3,zero,42b44 <_lseek_r+0x44>
   42b34:	dfc00117 	ldw	ra,4(sp)
   42b38:	dc000017 	ldw	r16,0(sp)
   42b3c:	dec00204 	addi	sp,sp,8
   42b40:	f800283a 	ret
   42b44:	00c00174 	movhi	r3,5
   42b48:	18e2de17 	ldw	r3,-29832(r3)
   42b4c:	183ff926 	beq	r3,zero,42b34 <_lseek_r+0x34>
   42b50:	80c00015 	stw	r3,0(r16)
   42b54:	dfc00117 	ldw	ra,4(sp)
   42b58:	dc000017 	ldw	r16,0(sp)
   42b5c:	dec00204 	addi	sp,sp,8
   42b60:	f800283a 	ret

00042b64 <__smakebuf_r>:
   42b64:	2880030b 	ldhu	r2,12(r5)
   42b68:	deffe804 	addi	sp,sp,-96
   42b6c:	dc001215 	stw	r16,72(sp)
   42b70:	dfc01715 	stw	ra,92(sp)
   42b74:	dd001615 	stw	r20,88(sp)
   42b78:	dcc01515 	stw	r19,84(sp)
   42b7c:	dc801415 	stw	r18,80(sp)
   42b80:	dc401315 	stw	r17,76(sp)
   42b84:	10c0008c 	andi	r3,r2,2
   42b88:	2821883a 	mov	r16,r5
   42b8c:	18000d26 	beq	r3,zero,42bc4 <__smakebuf_r+0x60>
   42b90:	288010c4 	addi	r2,r5,67
   42b94:	28800015 	stw	r2,0(r5)
   42b98:	28800415 	stw	r2,16(r5)
   42b9c:	00800044 	movi	r2,1
   42ba0:	28800515 	stw	r2,20(r5)
   42ba4:	dfc01717 	ldw	ra,92(sp)
   42ba8:	dd001617 	ldw	r20,88(sp)
   42bac:	dcc01517 	ldw	r19,84(sp)
   42bb0:	dc801417 	ldw	r18,80(sp)
   42bb4:	dc401317 	ldw	r17,76(sp)
   42bb8:	dc001217 	ldw	r16,72(sp)
   42bbc:	dec01804 	addi	sp,sp,96
   42bc0:	f800283a 	ret
   42bc4:	2940038f 	ldh	r5,14(r5)
   42bc8:	2023883a 	mov	r17,r4
   42bcc:	28002816 	blt	r5,zero,42c70 <__smakebuf_r+0x10c>
   42bd0:	d80d883a 	mov	r6,sp
   42bd4:	0042e080 	call	42e08 <_fstat_r>
   42bd8:	10002416 	blt	r2,zero,42c6c <__smakebuf_r+0x108>
   42bdc:	d8800117 	ldw	r2,4(sp)
   42be0:	10bc000c 	andi	r2,r2,61440
   42be4:	10880018 	cmpnei	r2,r2,8192
   42be8:	1000461e 	bne	r2,zero,42d04 <__smakebuf_r+0x1a0>
   42bec:	8140038f 	ldh	r5,14(r16)
   42bf0:	8809883a 	mov	r4,r17
   42bf4:	0042e680 	call	42e68 <_isatty_r>
   42bf8:	10003e26 	beq	r2,zero,42cf4 <__smakebuf_r+0x190>
   42bfc:	8080030b 	ldhu	r2,12(r16)
   42c00:	80c010c4 	addi	r3,r16,67
   42c04:	80c00015 	stw	r3,0(r16)
   42c08:	10800054 	ori	r2,r2,1
   42c0c:	8080030d 	sth	r2,12(r16)
   42c10:	00800044 	movi	r2,1
   42c14:	80c00415 	stw	r3,16(r16)
   42c18:	80800515 	stw	r2,20(r16)
   42c1c:	04c00044 	movi	r19,1
   42c20:	05010004 	movi	r20,1024
   42c24:	04820004 	movi	r18,2048
   42c28:	a00b883a 	mov	r5,r20
   42c2c:	8809883a 	mov	r4,r17
   42c30:	0040ddc0 	call	40ddc <_malloc_r>
   42c34:	10001726 	beq	r2,zero,42c94 <__smakebuf_r+0x130>
   42c38:	80c0030b 	ldhu	r3,12(r16)
   42c3c:	01000134 	movhi	r4,4
   42c40:	21011904 	addi	r4,r4,1124
   42c44:	89000f15 	stw	r4,60(r17)
   42c48:	18c02014 	ori	r3,r3,128
   42c4c:	80c0030d 	sth	r3,12(r16)
   42c50:	80800015 	stw	r2,0(r16)
   42c54:	80800415 	stw	r2,16(r16)
   42c58:	85000515 	stw	r20,20(r16)
   42c5c:	98001d1e 	bne	r19,zero,42cd4 <__smakebuf_r+0x170>
   42c60:	90e4b03a 	or	r18,r18,r3
   42c64:	8480030d 	sth	r18,12(r16)
   42c68:	003fce06 	br	42ba4 <__smakebuf_r+0x40>
   42c6c:	8080030b 	ldhu	r2,12(r16)
   42c70:	1080200c 	andi	r2,r2,128
   42c74:	0027883a 	mov	r19,zero
   42c78:	10001326 	beq	r2,zero,42cc8 <__smakebuf_r+0x164>
   42c7c:	05001004 	movi	r20,64
   42c80:	a00b883a 	mov	r5,r20
   42c84:	8809883a 	mov	r4,r17
   42c88:	0025883a 	mov	r18,zero
   42c8c:	0040ddc0 	call	40ddc <_malloc_r>
   42c90:	103fe91e 	bne	r2,zero,42c38 <__smakebuf_r+0xd4>
   42c94:	8080030b 	ldhu	r2,12(r16)
   42c98:	10c0800c 	andi	r3,r2,512
   42c9c:	183fc11e 	bne	r3,zero,42ba4 <__smakebuf_r+0x40>
   42ca0:	00ffff04 	movi	r3,-4
   42ca4:	10c4703a 	and	r2,r2,r3
   42ca8:	10800094 	ori	r2,r2,2
   42cac:	80c010c4 	addi	r3,r16,67
   42cb0:	8080030d 	sth	r2,12(r16)
   42cb4:	00800044 	movi	r2,1
   42cb8:	80c00015 	stw	r3,0(r16)
   42cbc:	80c00415 	stw	r3,16(r16)
   42cc0:	80800515 	stw	r2,20(r16)
   42cc4:	003fb706 	br	42ba4 <__smakebuf_r+0x40>
   42cc8:	05010004 	movi	r20,1024
   42ccc:	0025883a 	mov	r18,zero
   42cd0:	003fd506 	br	42c28 <__smakebuf_r+0xc4>
   42cd4:	8140038f 	ldh	r5,14(r16)
   42cd8:	8809883a 	mov	r4,r17
   42cdc:	0042e680 	call	42e68 <_isatty_r>
   42ce0:	80c0030b 	ldhu	r3,12(r16)
   42ce4:	103fde26 	beq	r2,zero,42c60 <__smakebuf_r+0xfc>
   42ce8:	18ffff0c 	andi	r3,r3,65532
   42cec:	18c00054 	ori	r3,r3,1
   42cf0:	003fdb06 	br	42c60 <__smakebuf_r+0xfc>
   42cf4:	04c00044 	movi	r19,1
   42cf8:	05010004 	movi	r20,1024
   42cfc:	04820004 	movi	r18,2048
   42d00:	003fc906 	br	42c28 <__smakebuf_r+0xc4>
   42d04:	0027883a 	mov	r19,zero
   42d08:	05010004 	movi	r20,1024
   42d0c:	04820004 	movi	r18,2048
   42d10:	003fc506 	br	42c28 <__smakebuf_r+0xc4>

00042d14 <__swhatbuf_r>:
   42d14:	deffea04 	addi	sp,sp,-88
   42d18:	dc001215 	stw	r16,72(sp)
   42d1c:	2821883a 	mov	r16,r5
   42d20:	2940038f 	ldh	r5,14(r5)
   42d24:	dc801415 	stw	r18,80(sp)
   42d28:	dc401315 	stw	r17,76(sp)
   42d2c:	dfc01515 	stw	ra,84(sp)
   42d30:	3023883a 	mov	r17,r6
   42d34:	3825883a 	mov	r18,r7
   42d38:	28001016 	blt	r5,zero,42d7c <__swhatbuf_r+0x68>
   42d3c:	d80d883a 	mov	r6,sp
   42d40:	0042e080 	call	42e08 <_fstat_r>
   42d44:	10000d16 	blt	r2,zero,42d7c <__swhatbuf_r+0x68>
   42d48:	d8c00117 	ldw	r3,4(sp)
   42d4c:	01010004 	movi	r4,1024
   42d50:	00820004 	movi	r2,2048
   42d54:	18fc000c 	andi	r3,r3,61440
   42d58:	18c80020 	cmpeqi	r3,r3,8192
   42d5c:	90c00015 	stw	r3,0(r18)
   42d60:	89000015 	stw	r4,0(r17)
   42d64:	dfc01517 	ldw	ra,84(sp)
   42d68:	dc801417 	ldw	r18,80(sp)
   42d6c:	dc401317 	ldw	r17,76(sp)
   42d70:	dc001217 	ldw	r16,72(sp)
   42d74:	dec01604 	addi	sp,sp,88
   42d78:	f800283a 	ret
   42d7c:	8080030b 	ldhu	r2,12(r16)
   42d80:	0007883a 	mov	r3,zero
   42d84:	1080200c 	andi	r2,r2,128
   42d88:	10000326 	beq	r2,zero,42d98 <__swhatbuf_r+0x84>
   42d8c:	01001004 	movi	r4,64
   42d90:	0005883a 	mov	r2,zero
   42d94:	003ff106 	br	42d5c <__swhatbuf_r+0x48>
   42d98:	01010004 	movi	r4,1024
   42d9c:	0005883a 	mov	r2,zero
   42da0:	003fee06 	br	42d5c <__swhatbuf_r+0x48>

00042da4 <_read_r>:
   42da4:	2807883a 	mov	r3,r5
   42da8:	defffe04 	addi	sp,sp,-8
   42dac:	dc000015 	stw	r16,0(sp)
   42db0:	300b883a 	mov	r5,r6
   42db4:	00800174 	movhi	r2,5
   42db8:	380d883a 	mov	r6,r7
   42dbc:	2021883a 	mov	r16,r4
   42dc0:	1809883a 	mov	r4,r3
   42dc4:	dfc00115 	stw	ra,4(sp)
   42dc8:	1022de15 	stw	zero,-29832(r2)
   42dcc:	00436740 	call	43674 <read>
   42dd0:	10ffffd8 	cmpnei	r3,r2,-1
   42dd4:	18000426 	beq	r3,zero,42de8 <_read_r+0x44>
   42dd8:	dfc00117 	ldw	ra,4(sp)
   42ddc:	dc000017 	ldw	r16,0(sp)
   42de0:	dec00204 	addi	sp,sp,8
   42de4:	f800283a 	ret
   42de8:	00c00174 	movhi	r3,5
   42dec:	18e2de17 	ldw	r3,-29832(r3)
   42df0:	183ff926 	beq	r3,zero,42dd8 <_read_r+0x34>
   42df4:	80c00015 	stw	r3,0(r16)
   42df8:	dfc00117 	ldw	ra,4(sp)
   42dfc:	dc000017 	ldw	r16,0(sp)
   42e00:	dec00204 	addi	sp,sp,8
   42e04:	f800283a 	ret

00042e08 <_fstat_r>:
   42e08:	2807883a 	mov	r3,r5
   42e0c:	defffe04 	addi	sp,sp,-8
   42e10:	dc000015 	stw	r16,0(sp)
   42e14:	00800174 	movhi	r2,5
   42e18:	300b883a 	mov	r5,r6
   42e1c:	2021883a 	mov	r16,r4
   42e20:	1809883a 	mov	r4,r3
   42e24:	dfc00115 	stw	ra,4(sp)
   42e28:	1022de15 	stw	zero,-29832(r2)
   42e2c:	00431e80 	call	431e8 <fstat>
   42e30:	10ffffd8 	cmpnei	r3,r2,-1
   42e34:	18000426 	beq	r3,zero,42e48 <_fstat_r+0x40>
   42e38:	dfc00117 	ldw	ra,4(sp)
   42e3c:	dc000017 	ldw	r16,0(sp)
   42e40:	dec00204 	addi	sp,sp,8
   42e44:	f800283a 	ret
   42e48:	00c00174 	movhi	r3,5
   42e4c:	18e2de17 	ldw	r3,-29832(r3)
   42e50:	183ff926 	beq	r3,zero,42e38 <_fstat_r+0x30>
   42e54:	80c00015 	stw	r3,0(r16)
   42e58:	dfc00117 	ldw	ra,4(sp)
   42e5c:	dc000017 	ldw	r16,0(sp)
   42e60:	dec00204 	addi	sp,sp,8
   42e64:	f800283a 	ret

00042e68 <_isatty_r>:
   42e68:	defffe04 	addi	sp,sp,-8
   42e6c:	dc000015 	stw	r16,0(sp)
   42e70:	00800174 	movhi	r2,5
   42e74:	2021883a 	mov	r16,r4
   42e78:	2809883a 	mov	r4,r5
   42e7c:	dfc00115 	stw	ra,4(sp)
   42e80:	1022de15 	stw	zero,-29832(r2)
   42e84:	00432d40 	call	432d4 <isatty>
   42e88:	10ffffd8 	cmpnei	r3,r2,-1
   42e8c:	18000426 	beq	r3,zero,42ea0 <_isatty_r+0x38>
   42e90:	dfc00117 	ldw	ra,4(sp)
   42e94:	dc000017 	ldw	r16,0(sp)
   42e98:	dec00204 	addi	sp,sp,8
   42e9c:	f800283a 	ret
   42ea0:	00c00174 	movhi	r3,5
   42ea4:	18e2de17 	ldw	r3,-29832(r3)
   42ea8:	183ff926 	beq	r3,zero,42e90 <_isatty_r+0x28>
   42eac:	80c00015 	stw	r3,0(r16)
   42eb0:	dfc00117 	ldw	ra,4(sp)
   42eb4:	dc000017 	ldw	r16,0(sp)
   42eb8:	dec00204 	addi	sp,sp,8
   42ebc:	f800283a 	ret

00042ec0 <__divsi3>:
   42ec0:	20001a16 	blt	r4,zero,42f2c <__divsi3+0x6c>
   42ec4:	000f883a 	mov	r7,zero
   42ec8:	2800020e 	bge	r5,zero,42ed4 <__divsi3+0x14>
   42ecc:	014bc83a 	sub	r5,zero,r5
   42ed0:	39c0005c 	xori	r7,r7,1
   42ed4:	200d883a 	mov	r6,r4
   42ed8:	00c00044 	movi	r3,1
   42edc:	2900092e 	bgeu	r5,r4,42f04 <__divsi3+0x44>
   42ee0:	00800804 	movi	r2,32
   42ee4:	00c00044 	movi	r3,1
   42ee8:	00000106 	br	42ef0 <__divsi3+0x30>
   42eec:	10001226 	beq	r2,zero,42f38 <__divsi3+0x78>
   42ef0:	294b883a 	add	r5,r5,r5
   42ef4:	10bfffc4 	addi	r2,r2,-1
   42ef8:	18c7883a 	add	r3,r3,r3
   42efc:	293ffb36 	bltu	r5,r4,42eec <__divsi3+0x2c>
   42f00:	18000d26 	beq	r3,zero,42f38 <__divsi3+0x78>
   42f04:	0005883a 	mov	r2,zero
   42f08:	31400236 	bltu	r6,r5,42f14 <__divsi3+0x54>
   42f0c:	314dc83a 	sub	r6,r6,r5
   42f10:	10c4b03a 	or	r2,r2,r3
   42f14:	1806d07a 	srli	r3,r3,1
   42f18:	280ad07a 	srli	r5,r5,1
   42f1c:	183ffa1e 	bne	r3,zero,42f08 <__divsi3+0x48>
   42f20:	38000126 	beq	r7,zero,42f28 <__divsi3+0x68>
   42f24:	0085c83a 	sub	r2,zero,r2
   42f28:	f800283a 	ret
   42f2c:	0109c83a 	sub	r4,zero,r4
   42f30:	01c00044 	movi	r7,1
   42f34:	003fe406 	br	42ec8 <__divsi3+0x8>
   42f38:	0005883a 	mov	r2,zero
   42f3c:	003ff806 	br	42f20 <__divsi3+0x60>

00042f40 <__modsi3>:
   42f40:	20001916 	blt	r4,zero,42fa8 <__modsi3+0x68>
   42f44:	000f883a 	mov	r7,zero
   42f48:	2005883a 	mov	r2,r4
   42f4c:	2800010e 	bge	r5,zero,42f54 <__modsi3+0x14>
   42f50:	014bc83a 	sub	r5,zero,r5
   42f54:	00c00044 	movi	r3,1
   42f58:	2900092e 	bgeu	r5,r4,42f80 <__modsi3+0x40>
   42f5c:	01800804 	movi	r6,32
   42f60:	00c00044 	movi	r3,1
   42f64:	00000106 	br	42f6c <__modsi3+0x2c>
   42f68:	30000d26 	beq	r6,zero,42fa0 <__modsi3+0x60>
   42f6c:	294b883a 	add	r5,r5,r5
   42f70:	31bfffc4 	addi	r6,r6,-1
   42f74:	18c7883a 	add	r3,r3,r3
   42f78:	293ffb36 	bltu	r5,r4,42f68 <__modsi3+0x28>
   42f7c:	18000826 	beq	r3,zero,42fa0 <__modsi3+0x60>
   42f80:	1806d07a 	srli	r3,r3,1
   42f84:	11400136 	bltu	r2,r5,42f8c <__modsi3+0x4c>
   42f88:	1145c83a 	sub	r2,r2,r5
   42f8c:	280ad07a 	srli	r5,r5,1
   42f90:	183ffb1e 	bne	r3,zero,42f80 <__modsi3+0x40>
   42f94:	38000126 	beq	r7,zero,42f9c <__modsi3+0x5c>
   42f98:	0085c83a 	sub	r2,zero,r2
   42f9c:	f800283a 	ret
   42fa0:	2005883a 	mov	r2,r4
   42fa4:	003ffb06 	br	42f94 <__modsi3+0x54>
   42fa8:	0109c83a 	sub	r4,zero,r4
   42fac:	01c00044 	movi	r7,1
   42fb0:	003fe506 	br	42f48 <__modsi3+0x8>

00042fb4 <__udivsi3>:
   42fb4:	200d883a 	mov	r6,r4
   42fb8:	2900152e 	bgeu	r5,r4,43010 <__udivsi3+0x5c>
   42fbc:	28001416 	blt	r5,zero,43010 <__udivsi3+0x5c>
   42fc0:	00800804 	movi	r2,32
   42fc4:	00c00044 	movi	r3,1
   42fc8:	00000206 	br	42fd4 <__udivsi3+0x20>
   42fcc:	10000e26 	beq	r2,zero,43008 <__udivsi3+0x54>
   42fd0:	28000516 	blt	r5,zero,42fe8 <__udivsi3+0x34>
   42fd4:	294b883a 	add	r5,r5,r5
   42fd8:	10bfffc4 	addi	r2,r2,-1
   42fdc:	18c7883a 	add	r3,r3,r3
   42fe0:	293ffa36 	bltu	r5,r4,42fcc <__udivsi3+0x18>
   42fe4:	18000826 	beq	r3,zero,43008 <__udivsi3+0x54>
   42fe8:	0005883a 	mov	r2,zero
   42fec:	31400236 	bltu	r6,r5,42ff8 <__udivsi3+0x44>
   42ff0:	314dc83a 	sub	r6,r6,r5
   42ff4:	10c4b03a 	or	r2,r2,r3
   42ff8:	1806d07a 	srli	r3,r3,1
   42ffc:	280ad07a 	srli	r5,r5,1
   43000:	183ffa1e 	bne	r3,zero,42fec <__udivsi3+0x38>
   43004:	f800283a 	ret
   43008:	0005883a 	mov	r2,zero
   4300c:	f800283a 	ret
   43010:	00c00044 	movi	r3,1
   43014:	003ff406 	br	42fe8 <__udivsi3+0x34>

00043018 <__umodsi3>:
   43018:	2005883a 	mov	r2,r4
   4301c:	2900132e 	bgeu	r5,r4,4306c <__umodsi3+0x54>
   43020:	28001216 	blt	r5,zero,4306c <__umodsi3+0x54>
   43024:	01800804 	movi	r6,32
   43028:	00c00044 	movi	r3,1
   4302c:	00000206 	br	43038 <__umodsi3+0x20>
   43030:	30000c26 	beq	r6,zero,43064 <__umodsi3+0x4c>
   43034:	28000516 	blt	r5,zero,4304c <__umodsi3+0x34>
   43038:	294b883a 	add	r5,r5,r5
   4303c:	31bfffc4 	addi	r6,r6,-1
   43040:	18c7883a 	add	r3,r3,r3
   43044:	293ffa36 	bltu	r5,r4,43030 <__umodsi3+0x18>
   43048:	18000626 	beq	r3,zero,43064 <__umodsi3+0x4c>
   4304c:	1806d07a 	srli	r3,r3,1
   43050:	11400136 	bltu	r2,r5,43058 <__umodsi3+0x40>
   43054:	1145c83a 	sub	r2,r2,r5
   43058:	280ad07a 	srli	r5,r5,1
   4305c:	183ffb1e 	bne	r3,zero,4304c <__umodsi3+0x34>
   43060:	f800283a 	ret
   43064:	2005883a 	mov	r2,r4
   43068:	f800283a 	ret
   4306c:	00c00044 	movi	r3,1
   43070:	003ff606 	br	4304c <__umodsi3+0x34>

00043074 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43074:	defffe04 	addi	sp,sp,-8
   43078:	dfc00115 	stw	ra,4(sp)
   4307c:	df000015 	stw	fp,0(sp)
   43080:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43084:	d0a00917 	ldw	r2,-32732(gp)
   43088:	10000326 	beq	r2,zero,43098 <alt_get_errno+0x24>
   4308c:	d0a00917 	ldw	r2,-32732(gp)
   43090:	103ee83a 	callr	r2
   43094:	00000106 	br	4309c <alt_get_errno+0x28>
   43098:	d0a6ac04 	addi	r2,gp,-25936
}
   4309c:	e037883a 	mov	sp,fp
   430a0:	dfc00117 	ldw	ra,4(sp)
   430a4:	df000017 	ldw	fp,0(sp)
   430a8:	dec00204 	addi	sp,sp,8
   430ac:	f800283a 	ret

000430b0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   430b0:	defffb04 	addi	sp,sp,-20
   430b4:	dfc00415 	stw	ra,16(sp)
   430b8:	df000315 	stw	fp,12(sp)
   430bc:	df000304 	addi	fp,sp,12
   430c0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   430c4:	e0bffd17 	ldw	r2,-12(fp)
   430c8:	10000616 	blt	r2,zero,430e4 <close+0x34>
   430cc:	e0bffd17 	ldw	r2,-12(fp)
   430d0:	10c00324 	muli	r3,r2,12
   430d4:	00800134 	movhi	r2,4
   430d8:	1097ba04 	addi	r2,r2,24296
   430dc:	1885883a 	add	r2,r3,r2
   430e0:	00000106 	br	430e8 <close+0x38>
   430e4:	0005883a 	mov	r2,zero
   430e8:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   430ec:	e0bfff17 	ldw	r2,-4(fp)
   430f0:	10001926 	beq	r2,zero,43158 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   430f4:	e0bfff17 	ldw	r2,-4(fp)
   430f8:	10800017 	ldw	r2,0(r2)
   430fc:	10800417 	ldw	r2,16(r2)
   43100:	10000626 	beq	r2,zero,4311c <close+0x6c>
   43104:	e0bfff17 	ldw	r2,-4(fp)
   43108:	10800017 	ldw	r2,0(r2)
   4310c:	10800417 	ldw	r2,16(r2)
   43110:	e13fff17 	ldw	r4,-4(fp)
   43114:	103ee83a 	callr	r2
   43118:	00000106 	br	43120 <close+0x70>
   4311c:	0005883a 	mov	r2,zero
   43120:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43124:	e13ffd17 	ldw	r4,-12(fp)
   43128:	00437700 	call	43770 <alt_release_fd>
    if (rval < 0)
   4312c:	e0bffe17 	ldw	r2,-8(fp)
   43130:	1000070e 	bge	r2,zero,43150 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   43134:	00430740 	call	43074 <alt_get_errno>
   43138:	1007883a 	mov	r3,r2
   4313c:	e0bffe17 	ldw	r2,-8(fp)
   43140:	0085c83a 	sub	r2,zero,r2
   43144:	18800015 	stw	r2,0(r3)
      return -1;
   43148:	00bfffc4 	movi	r2,-1
   4314c:	00000706 	br	4316c <close+0xbc>
    }
    return 0;
   43150:	0005883a 	mov	r2,zero
   43154:	00000506 	br	4316c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43158:	00430740 	call	43074 <alt_get_errno>
   4315c:	1007883a 	mov	r3,r2
   43160:	00801444 	movi	r2,81
   43164:	18800015 	stw	r2,0(r3)
    return -1;
   43168:	00bfffc4 	movi	r2,-1
  }
}
   4316c:	e037883a 	mov	sp,fp
   43170:	dfc00117 	ldw	ra,4(sp)
   43174:	df000017 	ldw	fp,0(sp)
   43178:	dec00204 	addi	sp,sp,8
   4317c:	f800283a 	ret

00043180 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   43180:	defffc04 	addi	sp,sp,-16
   43184:	df000315 	stw	fp,12(sp)
   43188:	df000304 	addi	fp,sp,12
   4318c:	e13fff15 	stw	r4,-4(fp)
   43190:	e17ffe15 	stw	r5,-8(fp)
   43194:	e1bffd15 	stw	r6,-12(fp)
  return len;
   43198:	e0bffd17 	ldw	r2,-12(fp)
}
   4319c:	e037883a 	mov	sp,fp
   431a0:	df000017 	ldw	fp,0(sp)
   431a4:	dec00104 	addi	sp,sp,4
   431a8:	f800283a 	ret

000431ac <alt_get_errno>:
{
   431ac:	defffe04 	addi	sp,sp,-8
   431b0:	dfc00115 	stw	ra,4(sp)
   431b4:	df000015 	stw	fp,0(sp)
   431b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   431bc:	d0a00917 	ldw	r2,-32732(gp)
   431c0:	10000326 	beq	r2,zero,431d0 <alt_get_errno+0x24>
   431c4:	d0a00917 	ldw	r2,-32732(gp)
   431c8:	103ee83a 	callr	r2
   431cc:	00000106 	br	431d4 <alt_get_errno+0x28>
   431d0:	d0a6ac04 	addi	r2,gp,-25936
}
   431d4:	e037883a 	mov	sp,fp
   431d8:	dfc00117 	ldw	ra,4(sp)
   431dc:	df000017 	ldw	fp,0(sp)
   431e0:	dec00204 	addi	sp,sp,8
   431e4:	f800283a 	ret

000431e8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   431e8:	defffb04 	addi	sp,sp,-20
   431ec:	dfc00415 	stw	ra,16(sp)
   431f0:	df000315 	stw	fp,12(sp)
   431f4:	df000304 	addi	fp,sp,12
   431f8:	e13ffe15 	stw	r4,-8(fp)
   431fc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43200:	e0bffe17 	ldw	r2,-8(fp)
   43204:	10000616 	blt	r2,zero,43220 <fstat+0x38>
   43208:	e0bffe17 	ldw	r2,-8(fp)
   4320c:	10c00324 	muli	r3,r2,12
   43210:	00800134 	movhi	r2,4
   43214:	1097ba04 	addi	r2,r2,24296
   43218:	1885883a 	add	r2,r3,r2
   4321c:	00000106 	br	43224 <fstat+0x3c>
   43220:	0005883a 	mov	r2,zero
   43224:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   43228:	e0bfff17 	ldw	r2,-4(fp)
   4322c:	10001026 	beq	r2,zero,43270 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   43230:	e0bfff17 	ldw	r2,-4(fp)
   43234:	10800017 	ldw	r2,0(r2)
   43238:	10800817 	ldw	r2,32(r2)
   4323c:	10000726 	beq	r2,zero,4325c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   43240:	e0bfff17 	ldw	r2,-4(fp)
   43244:	10800017 	ldw	r2,0(r2)
   43248:	10800817 	ldw	r2,32(r2)
   4324c:	e17ffd17 	ldw	r5,-12(fp)
   43250:	e13fff17 	ldw	r4,-4(fp)
   43254:	103ee83a 	callr	r2
   43258:	00000a06 	br	43284 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4325c:	e0bffd17 	ldw	r2,-12(fp)
   43260:	00c80004 	movi	r3,8192
   43264:	10c00115 	stw	r3,4(r2)
      return 0;
   43268:	0005883a 	mov	r2,zero
   4326c:	00000506 	br	43284 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43270:	00431ac0 	call	431ac <alt_get_errno>
   43274:	1007883a 	mov	r3,r2
   43278:	00801444 	movi	r2,81
   4327c:	18800015 	stw	r2,0(r3)
    return -1;
   43280:	00bfffc4 	movi	r2,-1
  }
}
   43284:	e037883a 	mov	sp,fp
   43288:	dfc00117 	ldw	ra,4(sp)
   4328c:	df000017 	ldw	fp,0(sp)
   43290:	dec00204 	addi	sp,sp,8
   43294:	f800283a 	ret

00043298 <alt_get_errno>:
{
   43298:	defffe04 	addi	sp,sp,-8
   4329c:	dfc00115 	stw	ra,4(sp)
   432a0:	df000015 	stw	fp,0(sp)
   432a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   432a8:	d0a00917 	ldw	r2,-32732(gp)
   432ac:	10000326 	beq	r2,zero,432bc <alt_get_errno+0x24>
   432b0:	d0a00917 	ldw	r2,-32732(gp)
   432b4:	103ee83a 	callr	r2
   432b8:	00000106 	br	432c0 <alt_get_errno+0x28>
   432bc:	d0a6ac04 	addi	r2,gp,-25936
}
   432c0:	e037883a 	mov	sp,fp
   432c4:	dfc00117 	ldw	ra,4(sp)
   432c8:	df000017 	ldw	fp,0(sp)
   432cc:	dec00204 	addi	sp,sp,8
   432d0:	f800283a 	ret

000432d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   432d4:	deffea04 	addi	sp,sp,-88
   432d8:	dfc01515 	stw	ra,84(sp)
   432dc:	df001415 	stw	fp,80(sp)
   432e0:	df001404 	addi	fp,sp,80
   432e4:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   432e8:	e0bfec17 	ldw	r2,-80(fp)
   432ec:	10000616 	blt	r2,zero,43308 <isatty+0x34>
   432f0:	e0bfec17 	ldw	r2,-80(fp)
   432f4:	10c00324 	muli	r3,r2,12
   432f8:	00800134 	movhi	r2,4
   432fc:	1097ba04 	addi	r2,r2,24296
   43300:	1885883a 	add	r2,r3,r2
   43304:	00000106 	br	4330c <isatty+0x38>
   43308:	0005883a 	mov	r2,zero
   4330c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   43310:	e0bfff17 	ldw	r2,-4(fp)
   43314:	10000e26 	beq	r2,zero,43350 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43318:	e0bfff17 	ldw	r2,-4(fp)
   4331c:	10800017 	ldw	r2,0(r2)
   43320:	10800817 	ldw	r2,32(r2)
   43324:	1000021e 	bne	r2,zero,43330 <isatty+0x5c>
    {
      return 1;
   43328:	00800044 	movi	r2,1
   4332c:	00000d06 	br	43364 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43330:	e0bfed04 	addi	r2,fp,-76
   43334:	100b883a 	mov	r5,r2
   43338:	e13fec17 	ldw	r4,-80(fp)
   4333c:	00431e80 	call	431e8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   43340:	e0bfee17 	ldw	r2,-72(fp)
   43344:	10880020 	cmpeqi	r2,r2,8192
   43348:	10803fcc 	andi	r2,r2,255
   4334c:	00000506 	br	43364 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43350:	00432980 	call	43298 <alt_get_errno>
   43354:	1007883a 	mov	r3,r2
   43358:	00801444 	movi	r2,81
   4335c:	18800015 	stw	r2,0(r3)
    return 0;
   43360:	0005883a 	mov	r2,zero
  }
}
   43364:	e037883a 	mov	sp,fp
   43368:	dfc00117 	ldw	ra,4(sp)
   4336c:	df000017 	ldw	fp,0(sp)
   43370:	dec00204 	addi	sp,sp,8
   43374:	f800283a 	ret

00043378 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43378:	defffc04 	addi	sp,sp,-16
   4337c:	df000315 	stw	fp,12(sp)
   43380:	df000304 	addi	fp,sp,12
   43384:	e13fff15 	stw	r4,-4(fp)
   43388:	e17ffe15 	stw	r5,-8(fp)
   4338c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   43390:	e0fffe17 	ldw	r3,-8(fp)
   43394:	e0bfff17 	ldw	r2,-4(fp)
   43398:	18800c26 	beq	r3,r2,433cc <alt_load_section+0x54>
  {
    while( to != end )
   4339c:	00000806 	br	433c0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   433a0:	e0ffff17 	ldw	r3,-4(fp)
   433a4:	18800104 	addi	r2,r3,4
   433a8:	e0bfff15 	stw	r2,-4(fp)
   433ac:	e0bffe17 	ldw	r2,-8(fp)
   433b0:	11000104 	addi	r4,r2,4
   433b4:	e13ffe15 	stw	r4,-8(fp)
   433b8:	18c00017 	ldw	r3,0(r3)
   433bc:	10c00015 	stw	r3,0(r2)
    while( to != end )
   433c0:	e0fffe17 	ldw	r3,-8(fp)
   433c4:	e0bffd17 	ldw	r2,-12(fp)
   433c8:	18bff51e 	bne	r3,r2,433a0 <alt_load_section+0x28>
    }
  }
}
   433cc:	0001883a 	nop
   433d0:	e037883a 	mov	sp,fp
   433d4:	df000017 	ldw	fp,0(sp)
   433d8:	dec00104 	addi	sp,sp,4
   433dc:	f800283a 	ret

000433e0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   433e0:	defffe04 	addi	sp,sp,-8
   433e4:	dfc00115 	stw	ra,4(sp)
   433e8:	df000015 	stw	fp,0(sp)
   433ec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   433f0:	01800134 	movhi	r6,4
   433f4:	319c4004 	addi	r6,r6,28928
   433f8:	01400134 	movhi	r5,4
   433fc:	2955a504 	addi	r5,r5,22164
   43400:	01000134 	movhi	r4,4
   43404:	211c4004 	addi	r4,r4,28928
   43408:	00433780 	call	43378 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4340c:	01800134 	movhi	r6,4
   43410:	31808e04 	addi	r6,r6,568
   43414:	01400134 	movhi	r5,4
   43418:	29400804 	addi	r5,r5,32
   4341c:	01000134 	movhi	r4,4
   43420:	21000804 	addi	r4,r4,32
   43424:	00433780 	call	43378 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43428:	01800134 	movhi	r6,4
   4342c:	3195a504 	addi	r6,r6,22164
   43430:	01400134 	movhi	r5,4
   43434:	29559404 	addi	r5,r5,22096
   43438:	01000134 	movhi	r4,4
   4343c:	21159404 	addi	r4,r4,22096
   43440:	00433780 	call	43378 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43444:	00446400 	call	44640 <alt_dcache_flush_all>
  alt_icache_flush_all();
   43448:	00448380 	call	44838 <alt_icache_flush_all>
}
   4344c:	0001883a 	nop
   43450:	e037883a 	mov	sp,fp
   43454:	dfc00117 	ldw	ra,4(sp)
   43458:	df000017 	ldw	fp,0(sp)
   4345c:	dec00204 	addi	sp,sp,8
   43460:	f800283a 	ret

00043464 <alt_get_errno>:
{
   43464:	defffe04 	addi	sp,sp,-8
   43468:	dfc00115 	stw	ra,4(sp)
   4346c:	df000015 	stw	fp,0(sp)
   43470:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43474:	d0a00917 	ldw	r2,-32732(gp)
   43478:	10000326 	beq	r2,zero,43488 <alt_get_errno+0x24>
   4347c:	d0a00917 	ldw	r2,-32732(gp)
   43480:	103ee83a 	callr	r2
   43484:	00000106 	br	4348c <alt_get_errno+0x28>
   43488:	d0a6ac04 	addi	r2,gp,-25936
}
   4348c:	e037883a 	mov	sp,fp
   43490:	dfc00117 	ldw	ra,4(sp)
   43494:	df000017 	ldw	fp,0(sp)
   43498:	dec00204 	addi	sp,sp,8
   4349c:	f800283a 	ret

000434a0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   434a0:	defff904 	addi	sp,sp,-28
   434a4:	dfc00615 	stw	ra,24(sp)
   434a8:	df000515 	stw	fp,20(sp)
   434ac:	df000504 	addi	fp,sp,20
   434b0:	e13ffd15 	stw	r4,-12(fp)
   434b4:	e17ffc15 	stw	r5,-16(fp)
   434b8:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   434bc:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   434c0:	e0bffd17 	ldw	r2,-12(fp)
   434c4:	10000616 	blt	r2,zero,434e0 <lseek+0x40>
   434c8:	e0bffd17 	ldw	r2,-12(fp)
   434cc:	10c00324 	muli	r3,r2,12
   434d0:	00800134 	movhi	r2,4
   434d4:	1097ba04 	addi	r2,r2,24296
   434d8:	1885883a 	add	r2,r3,r2
   434dc:	00000106 	br	434e4 <lseek+0x44>
   434e0:	0005883a 	mov	r2,zero
   434e4:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   434e8:	e0bffe17 	ldw	r2,-8(fp)
   434ec:	10001026 	beq	r2,zero,43530 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   434f0:	e0bffe17 	ldw	r2,-8(fp)
   434f4:	10800017 	ldw	r2,0(r2)
   434f8:	10800717 	ldw	r2,28(r2)
   434fc:	10000926 	beq	r2,zero,43524 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43500:	e0bffe17 	ldw	r2,-8(fp)
   43504:	10800017 	ldw	r2,0(r2)
   43508:	10800717 	ldw	r2,28(r2)
   4350c:	e1bffb17 	ldw	r6,-20(fp)
   43510:	e17ffc17 	ldw	r5,-16(fp)
   43514:	e13ffe17 	ldw	r4,-8(fp)
   43518:	103ee83a 	callr	r2
   4351c:	e0bfff15 	stw	r2,-4(fp)
   43520:	00000506 	br	43538 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43524:	00bfde84 	movi	r2,-134
   43528:	e0bfff15 	stw	r2,-4(fp)
   4352c:	00000206 	br	43538 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   43530:	00bfebc4 	movi	r2,-81
   43534:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   43538:	e0bfff17 	ldw	r2,-4(fp)
   4353c:	1000070e 	bge	r2,zero,4355c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   43540:	00434640 	call	43464 <alt_get_errno>
   43544:	1007883a 	mov	r3,r2
   43548:	e0bfff17 	ldw	r2,-4(fp)
   4354c:	0085c83a 	sub	r2,zero,r2
   43550:	18800015 	stw	r2,0(r3)
    rc = -1;
   43554:	00bfffc4 	movi	r2,-1
   43558:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   4355c:	e0bfff17 	ldw	r2,-4(fp)
}
   43560:	e037883a 	mov	sp,fp
   43564:	dfc00117 	ldw	ra,4(sp)
   43568:	df000017 	ldw	fp,0(sp)
   4356c:	dec00204 	addi	sp,sp,8
   43570:	f800283a 	ret

00043574 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43574:	defffd04 	addi	sp,sp,-12
   43578:	dfc00215 	stw	ra,8(sp)
   4357c:	df000115 	stw	fp,4(sp)
   43580:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43584:	0009883a 	mov	r4,zero
   43588:	00439e80 	call	439e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4358c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   43590:	0043a240 	call	43a24 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   43594:	01800134 	movhi	r6,4
   43598:	31959d04 	addi	r6,r6,22132
   4359c:	01400134 	movhi	r5,4
   435a0:	29559d04 	addi	r5,r5,22132
   435a4:	01000134 	movhi	r4,4
   435a8:	21159d04 	addi	r4,r4,22132
   435ac:	0044bb40 	call	44bb4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   435b0:	00447700 	call	44770 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   435b4:	01000134 	movhi	r4,4
   435b8:	2111f504 	addi	r4,r4,18388
   435bc:	00453a80 	call	453a8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   435c0:	d0a6ad17 	ldw	r2,-25932(gp)
   435c4:	d0e6ae17 	ldw	r3,-25928(gp)
   435c8:	d126af17 	ldw	r4,-25924(gp)
   435cc:	200d883a 	mov	r6,r4
   435d0:	180b883a 	mov	r5,r3
   435d4:	1009883a 	mov	r4,r2
   435d8:	00402840 	call	40284 <main>
   435dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   435e0:	01000044 	movi	r4,1
   435e4:	00430b00 	call	430b0 <close>
  exit (result);
   435e8:	e13fff17 	ldw	r4,-4(fp)
   435ec:	00453bc0 	call	453bc <exit>

000435f0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   435f0:	defffe04 	addi	sp,sp,-8
   435f4:	df000115 	stw	fp,4(sp)
   435f8:	df000104 	addi	fp,sp,4
   435fc:	e13fff15 	stw	r4,-4(fp)
}
   43600:	0001883a 	nop
   43604:	e037883a 	mov	sp,fp
   43608:	df000017 	ldw	fp,0(sp)
   4360c:	dec00104 	addi	sp,sp,4
   43610:	f800283a 	ret

00043614 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   43614:	defffe04 	addi	sp,sp,-8
   43618:	df000115 	stw	fp,4(sp)
   4361c:	df000104 	addi	fp,sp,4
   43620:	e13fff15 	stw	r4,-4(fp)
}
   43624:	0001883a 	nop
   43628:	e037883a 	mov	sp,fp
   4362c:	df000017 	ldw	fp,0(sp)
   43630:	dec00104 	addi	sp,sp,4
   43634:	f800283a 	ret

00043638 <alt_get_errno>:
{
   43638:	defffe04 	addi	sp,sp,-8
   4363c:	dfc00115 	stw	ra,4(sp)
   43640:	df000015 	stw	fp,0(sp)
   43644:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43648:	d0a00917 	ldw	r2,-32732(gp)
   4364c:	10000326 	beq	r2,zero,4365c <alt_get_errno+0x24>
   43650:	d0a00917 	ldw	r2,-32732(gp)
   43654:	103ee83a 	callr	r2
   43658:	00000106 	br	43660 <alt_get_errno+0x28>
   4365c:	d0a6ac04 	addi	r2,gp,-25936
}
   43660:	e037883a 	mov	sp,fp
   43664:	dfc00117 	ldw	ra,4(sp)
   43668:	df000017 	ldw	fp,0(sp)
   4366c:	dec00204 	addi	sp,sp,8
   43670:	f800283a 	ret

00043674 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   43674:	defff904 	addi	sp,sp,-28
   43678:	dfc00615 	stw	ra,24(sp)
   4367c:	df000515 	stw	fp,20(sp)
   43680:	df000504 	addi	fp,sp,20
   43684:	e13ffd15 	stw	r4,-12(fp)
   43688:	e17ffc15 	stw	r5,-16(fp)
   4368c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43690:	e0bffd17 	ldw	r2,-12(fp)
   43694:	10000616 	blt	r2,zero,436b0 <read+0x3c>
   43698:	e0bffd17 	ldw	r2,-12(fp)
   4369c:	10c00324 	muli	r3,r2,12
   436a0:	00800134 	movhi	r2,4
   436a4:	1097ba04 	addi	r2,r2,24296
   436a8:	1885883a 	add	r2,r3,r2
   436ac:	00000106 	br	436b4 <read+0x40>
   436b0:	0005883a 	mov	r2,zero
   436b4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   436b8:	e0bfff17 	ldw	r2,-4(fp)
   436bc:	10002226 	beq	r2,zero,43748 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   436c0:	e0bfff17 	ldw	r2,-4(fp)
   436c4:	10800217 	ldw	r2,8(r2)
   436c8:	108000cc 	andi	r2,r2,3
   436cc:	10800060 	cmpeqi	r2,r2,1
   436d0:	1000181e 	bne	r2,zero,43734 <read+0xc0>
        (fd->dev->read))
   436d4:	e0bfff17 	ldw	r2,-4(fp)
   436d8:	10800017 	ldw	r2,0(r2)
   436dc:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   436e0:	10001426 	beq	r2,zero,43734 <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   436e4:	e0bfff17 	ldw	r2,-4(fp)
   436e8:	10800017 	ldw	r2,0(r2)
   436ec:	10800517 	ldw	r2,20(r2)
   436f0:	e0fffb17 	ldw	r3,-20(fp)
   436f4:	180d883a 	mov	r6,r3
   436f8:	e17ffc17 	ldw	r5,-16(fp)
   436fc:	e13fff17 	ldw	r4,-4(fp)
   43700:	103ee83a 	callr	r2
   43704:	e0bffe15 	stw	r2,-8(fp)
   43708:	e0bffe17 	ldw	r2,-8(fp)
   4370c:	1000070e 	bge	r2,zero,4372c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   43710:	00436380 	call	43638 <alt_get_errno>
   43714:	1007883a 	mov	r3,r2
   43718:	e0bffe17 	ldw	r2,-8(fp)
   4371c:	0085c83a 	sub	r2,zero,r2
   43720:	18800015 	stw	r2,0(r3)
          return -1;
   43724:	00bfffc4 	movi	r2,-1
   43728:	00000c06 	br	4375c <read+0xe8>
        }
        return rval;
   4372c:	e0bffe17 	ldw	r2,-8(fp)
   43730:	00000a06 	br	4375c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43734:	00436380 	call	43638 <alt_get_errno>
   43738:	1007883a 	mov	r3,r2
   4373c:	00800344 	movi	r2,13
   43740:	18800015 	stw	r2,0(r3)
   43744:	00000406 	br	43758 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43748:	00436380 	call	43638 <alt_get_errno>
   4374c:	1007883a 	mov	r3,r2
   43750:	00801444 	movi	r2,81
   43754:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43758:	00bfffc4 	movi	r2,-1
}
   4375c:	e037883a 	mov	sp,fp
   43760:	dfc00117 	ldw	ra,4(sp)
   43764:	df000017 	ldw	fp,0(sp)
   43768:	dec00204 	addi	sp,sp,8
   4376c:	f800283a 	ret

00043770 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43770:	defffe04 	addi	sp,sp,-8
   43774:	df000115 	stw	fp,4(sp)
   43778:	df000104 	addi	fp,sp,4
   4377c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   43780:	e0bfff17 	ldw	r2,-4(fp)
   43784:	108000d0 	cmplti	r2,r2,3
   43788:	10000a1e 	bne	r2,zero,437b4 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
   4378c:	e0bfff17 	ldw	r2,-4(fp)
   43790:	10c00324 	muli	r3,r2,12
   43794:	00800134 	movhi	r2,4
   43798:	1885883a 	add	r2,r3,r2
   4379c:	1017bc15 	stw	zero,24304(r2)
    alt_fd_list[fd].dev      = 0;
   437a0:	e0bfff17 	ldw	r2,-4(fp)
   437a4:	10c00324 	muli	r3,r2,12
   437a8:	00800134 	movhi	r2,4
   437ac:	1885883a 	add	r2,r3,r2
   437b0:	1017ba15 	stw	zero,24296(r2)
  }
}
   437b4:	0001883a 	nop
   437b8:	e037883a 	mov	sp,fp
   437bc:	df000017 	ldw	fp,0(sp)
   437c0:	dec00104 	addi	sp,sp,4
   437c4:	f800283a 	ret

000437c8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   437c8:	defff904 	addi	sp,sp,-28
   437cc:	df000615 	stw	fp,24(sp)
   437d0:	df000604 	addi	fp,sp,24
   437d4:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   437d8:	0005303a 	rdctl	r2,status
   437dc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   437e0:	e0fffd17 	ldw	r3,-12(fp)
   437e4:	00bfff84 	movi	r2,-2
   437e8:	1884703a 	and	r2,r3,r2
   437ec:	1001703a 	wrctl	status,r2
  return context;
   437f0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   437f4:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   437f8:	d0a00a17 	ldw	r2,-32728(gp)
   437fc:	10c000c4 	addi	r3,r2,3
   43800:	00bfff04 	movi	r2,-4
   43804:	1884703a 	and	r2,r3,r2
   43808:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4380c:	d0e00a17 	ldw	r3,-32728(gp)
   43810:	e0bffa17 	ldw	r2,-24(fp)
   43814:	1887883a 	add	r3,r3,r2
   43818:	008001f4 	movhi	r2,7
   4381c:	10880004 	addi	r2,r2,8192
   43820:	10c0072e 	bgeu	r2,r3,43840 <sbrk+0x78>
   43824:	e0bfff17 	ldw	r2,-4(fp)
   43828:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   4382c:	e0bffc17 	ldw	r2,-16(fp)
   43830:	1001703a 	wrctl	status,r2
}
   43834:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   43838:	00bfffc4 	movi	r2,-1
   4383c:	00000c06 	br	43870 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   43840:	d0a00a17 	ldw	r2,-32728(gp)
   43844:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   43848:	d0e00a17 	ldw	r3,-32728(gp)
   4384c:	e0bffa17 	ldw	r2,-24(fp)
   43850:	1885883a 	add	r2,r3,r2
   43854:	d0a00a15 	stw	r2,-32728(gp)
   43858:	e0bfff17 	ldw	r2,-4(fp)
   4385c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   43860:	e0bffb17 	ldw	r2,-20(fp)
   43864:	1001703a 	wrctl	status,r2
}
   43868:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4386c:	e0bffe17 	ldw	r2,-8(fp)
} 
   43870:	e037883a 	mov	sp,fp
   43874:	df000017 	ldw	fp,0(sp)
   43878:	dec00104 	addi	sp,sp,4
   4387c:	f800283a 	ret

00043880 <alt_get_errno>:
{
   43880:	defffe04 	addi	sp,sp,-8
   43884:	dfc00115 	stw	ra,4(sp)
   43888:	df000015 	stw	fp,0(sp)
   4388c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43890:	d0a00917 	ldw	r2,-32732(gp)
   43894:	10000326 	beq	r2,zero,438a4 <alt_get_errno+0x24>
   43898:	d0a00917 	ldw	r2,-32732(gp)
   4389c:	103ee83a 	callr	r2
   438a0:	00000106 	br	438a8 <alt_get_errno+0x28>
   438a4:	d0a6ac04 	addi	r2,gp,-25936
}
   438a8:	e037883a 	mov	sp,fp
   438ac:	dfc00117 	ldw	ra,4(sp)
   438b0:	df000017 	ldw	fp,0(sp)
   438b4:	dec00204 	addi	sp,sp,8
   438b8:	f800283a 	ret

000438bc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   438bc:	defff904 	addi	sp,sp,-28
   438c0:	dfc00615 	stw	ra,24(sp)
   438c4:	df000515 	stw	fp,20(sp)
   438c8:	df000504 	addi	fp,sp,20
   438cc:	e13ffd15 	stw	r4,-12(fp)
   438d0:	e17ffc15 	stw	r5,-16(fp)
   438d4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   438d8:	e0bffd17 	ldw	r2,-12(fp)
   438dc:	10000616 	blt	r2,zero,438f8 <write+0x3c>
   438e0:	e0bffd17 	ldw	r2,-12(fp)
   438e4:	10c00324 	muli	r3,r2,12
   438e8:	00800134 	movhi	r2,4
   438ec:	1097ba04 	addi	r2,r2,24296
   438f0:	1885883a 	add	r2,r3,r2
   438f4:	00000106 	br	438fc <write+0x40>
   438f8:	0005883a 	mov	r2,zero
   438fc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   43900:	e0bfff17 	ldw	r2,-4(fp)
   43904:	10002126 	beq	r2,zero,4398c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43908:	e0bfff17 	ldw	r2,-4(fp)
   4390c:	10800217 	ldw	r2,8(r2)
   43910:	108000cc 	andi	r2,r2,3
   43914:	10001826 	beq	r2,zero,43978 <write+0xbc>
   43918:	e0bfff17 	ldw	r2,-4(fp)
   4391c:	10800017 	ldw	r2,0(r2)
   43920:	10800617 	ldw	r2,24(r2)
   43924:	10001426 	beq	r2,zero,43978 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43928:	e0bfff17 	ldw	r2,-4(fp)
   4392c:	10800017 	ldw	r2,0(r2)
   43930:	10800617 	ldw	r2,24(r2)
   43934:	e0fffb17 	ldw	r3,-20(fp)
   43938:	180d883a 	mov	r6,r3
   4393c:	e17ffc17 	ldw	r5,-16(fp)
   43940:	e13fff17 	ldw	r4,-4(fp)
   43944:	103ee83a 	callr	r2
   43948:	e0bffe15 	stw	r2,-8(fp)
   4394c:	e0bffe17 	ldw	r2,-8(fp)
   43950:	1000070e 	bge	r2,zero,43970 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   43954:	00438800 	call	43880 <alt_get_errno>
   43958:	1007883a 	mov	r3,r2
   4395c:	e0bffe17 	ldw	r2,-8(fp)
   43960:	0085c83a 	sub	r2,zero,r2
   43964:	18800015 	stw	r2,0(r3)
        return -1;
   43968:	00bfffc4 	movi	r2,-1
   4396c:	00000c06 	br	439a0 <write+0xe4>
      }
      return rval;
   43970:	e0bffe17 	ldw	r2,-8(fp)
   43974:	00000a06 	br	439a0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43978:	00438800 	call	43880 <alt_get_errno>
   4397c:	1007883a 	mov	r3,r2
   43980:	00800344 	movi	r2,13
   43984:	18800015 	stw	r2,0(r3)
   43988:	00000406 	br	4399c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4398c:	00438800 	call	43880 <alt_get_errno>
   43990:	1007883a 	mov	r3,r2
   43994:	00801444 	movi	r2,81
   43998:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4399c:	00bfffc4 	movi	r2,-1
}
   439a0:	e037883a 	mov	sp,fp
   439a4:	dfc00117 	ldw	ra,4(sp)
   439a8:	df000017 	ldw	fp,0(sp)
   439ac:	dec00204 	addi	sp,sp,8
   439b0:	f800283a 	ret

000439b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   439b4:	defffd04 	addi	sp,sp,-12
   439b8:	dfc00215 	stw	ra,8(sp)
   439bc:	df000115 	stw	fp,4(sp)
   439c0:	df000104 	addi	fp,sp,4
   439c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   439c8:	d1600604 	addi	r5,gp,-32744
   439cc:	e13fff17 	ldw	r4,-4(fp)
   439d0:	00446c80 	call	446c8 <alt_dev_llist_insert>
}
   439d4:	e037883a 	mov	sp,fp
   439d8:	dfc00117 	ldw	ra,4(sp)
   439dc:	df000017 	ldw	fp,0(sp)
   439e0:	dec00204 	addi	sp,sp,8
   439e4:	f800283a 	ret

000439e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   439e8:	defffd04 	addi	sp,sp,-12
   439ec:	dfc00215 	stw	ra,8(sp)
   439f0:	df000115 	stw	fp,4(sp)
   439f4:	df000104 	addi	fp,sp,4
   439f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_LAB6, cpu_lab6);
   439fc:	00450480 	call	45048 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43a00:	00800044 	movi	r2,1
   43a04:	1001703a 	wrctl	status,r2
}
   43a08:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   43a0c:	0001883a 	nop
   43a10:	e037883a 	mov	sp,fp
   43a14:	dfc00117 	ldw	ra,4(sp)
   43a18:	df000017 	ldw	fp,0(sp)
   43a1c:	dec00204 	addi	sp,sp,8
   43a20:	f800283a 	ret

00043a24 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43a24:	defffe04 	addi	sp,sp,-8
   43a28:	dfc00115 	stw	ra,4(sp)
   43a2c:	df000015 	stw	fp,0(sp)
   43a30:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   43a34:	000d883a 	mov	r6,zero
   43a38:	000b883a 	mov	r5,zero
   43a3c:	01000134 	movhi	r4,4
   43a40:	21182404 	addi	r4,r4,24720
   43a44:	0043bd00 	call	43bd0 <altera_avalon_jtag_uart_init>
   43a48:	01000134 	movhi	r4,4
   43a4c:	21181a04 	addi	r4,r4,24680
   43a50:	00439b40 	call	439b4 <alt_dev_reg>
}
   43a54:	0001883a 	nop
   43a58:	e037883a 	mov	sp,fp
   43a5c:	dfc00117 	ldw	ra,4(sp)
   43a60:	df000017 	ldw	fp,0(sp)
   43a64:	dec00204 	addi	sp,sp,8
   43a68:	f800283a 	ret

00043a6c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43a6c:	defffa04 	addi	sp,sp,-24
   43a70:	dfc00515 	stw	ra,20(sp)
   43a74:	df000415 	stw	fp,16(sp)
   43a78:	df000404 	addi	fp,sp,16
   43a7c:	e13ffe15 	stw	r4,-8(fp)
   43a80:	e17ffd15 	stw	r5,-12(fp)
   43a84:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43a88:	e0bffe17 	ldw	r2,-8(fp)
   43a8c:	10800017 	ldw	r2,0(r2)
   43a90:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43a94:	e0bfff17 	ldw	r2,-4(fp)
   43a98:	10c00a04 	addi	r3,r2,40
   43a9c:	e0bffe17 	ldw	r2,-8(fp)
   43aa0:	10800217 	ldw	r2,8(r2)
   43aa4:	100f883a 	mov	r7,r2
   43aa8:	e1bffc17 	ldw	r6,-16(fp)
   43aac:	e17ffd17 	ldw	r5,-12(fp)
   43ab0:	1809883a 	mov	r4,r3
   43ab4:	00440980 	call	44098 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   43ab8:	e037883a 	mov	sp,fp
   43abc:	dfc00117 	ldw	ra,4(sp)
   43ac0:	df000017 	ldw	fp,0(sp)
   43ac4:	dec00204 	addi	sp,sp,8
   43ac8:	f800283a 	ret

00043acc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43acc:	defffa04 	addi	sp,sp,-24
   43ad0:	dfc00515 	stw	ra,20(sp)
   43ad4:	df000415 	stw	fp,16(sp)
   43ad8:	df000404 	addi	fp,sp,16
   43adc:	e13ffe15 	stw	r4,-8(fp)
   43ae0:	e17ffd15 	stw	r5,-12(fp)
   43ae4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43ae8:	e0bffe17 	ldw	r2,-8(fp)
   43aec:	10800017 	ldw	r2,0(r2)
   43af0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43af4:	e0bfff17 	ldw	r2,-4(fp)
   43af8:	10c00a04 	addi	r3,r2,40
   43afc:	e0bffe17 	ldw	r2,-8(fp)
   43b00:	10800217 	ldw	r2,8(r2)
   43b04:	100f883a 	mov	r7,r2
   43b08:	e1bffc17 	ldw	r6,-16(fp)
   43b0c:	e17ffd17 	ldw	r5,-12(fp)
   43b10:	1809883a 	mov	r4,r3
   43b14:	00442b80 	call	442b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43b18:	e037883a 	mov	sp,fp
   43b1c:	dfc00117 	ldw	ra,4(sp)
   43b20:	df000017 	ldw	fp,0(sp)
   43b24:	dec00204 	addi	sp,sp,8
   43b28:	f800283a 	ret

00043b2c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   43b2c:	defffc04 	addi	sp,sp,-16
   43b30:	dfc00315 	stw	ra,12(sp)
   43b34:	df000215 	stw	fp,8(sp)
   43b38:	df000204 	addi	fp,sp,8
   43b3c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43b40:	e0bffe17 	ldw	r2,-8(fp)
   43b44:	10800017 	ldw	r2,0(r2)
   43b48:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   43b4c:	e0bfff17 	ldw	r2,-4(fp)
   43b50:	10c00a04 	addi	r3,r2,40
   43b54:	e0bffe17 	ldw	r2,-8(fp)
   43b58:	10800217 	ldw	r2,8(r2)
   43b5c:	100b883a 	mov	r5,r2
   43b60:	1809883a 	mov	r4,r3
   43b64:	0043f3c0 	call	43f3c <altera_avalon_jtag_uart_close>
}
   43b68:	e037883a 	mov	sp,fp
   43b6c:	dfc00117 	ldw	ra,4(sp)
   43b70:	df000017 	ldw	fp,0(sp)
   43b74:	dec00204 	addi	sp,sp,8
   43b78:	f800283a 	ret

00043b7c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   43b7c:	defffa04 	addi	sp,sp,-24
   43b80:	dfc00515 	stw	ra,20(sp)
   43b84:	df000415 	stw	fp,16(sp)
   43b88:	df000404 	addi	fp,sp,16
   43b8c:	e13ffe15 	stw	r4,-8(fp)
   43b90:	e17ffd15 	stw	r5,-12(fp)
   43b94:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   43b98:	e0bffe17 	ldw	r2,-8(fp)
   43b9c:	10800017 	ldw	r2,0(r2)
   43ba0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   43ba4:	e0bfff17 	ldw	r2,-4(fp)
   43ba8:	10800a04 	addi	r2,r2,40
   43bac:	e1bffc17 	ldw	r6,-16(fp)
   43bb0:	e17ffd17 	ldw	r5,-12(fp)
   43bb4:	1009883a 	mov	r4,r2
   43bb8:	0043fa40 	call	43fa4 <altera_avalon_jtag_uart_ioctl>
}
   43bbc:	e037883a 	mov	sp,fp
   43bc0:	dfc00117 	ldw	ra,4(sp)
   43bc4:	df000017 	ldw	fp,0(sp)
   43bc8:	dec00204 	addi	sp,sp,8
   43bcc:	f800283a 	ret

00043bd0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   43bd0:	defffa04 	addi	sp,sp,-24
   43bd4:	dfc00515 	stw	ra,20(sp)
   43bd8:	df000415 	stw	fp,16(sp)
   43bdc:	df000404 	addi	fp,sp,16
   43be0:	e13fff15 	stw	r4,-4(fp)
   43be4:	e17ffe15 	stw	r5,-8(fp)
   43be8:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43bec:	e0bfff17 	ldw	r2,-4(fp)
   43bf0:	00c00044 	movi	r3,1
   43bf4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   43bf8:	e0bfff17 	ldw	r2,-4(fp)
   43bfc:	10800017 	ldw	r2,0(r2)
   43c00:	10800104 	addi	r2,r2,4
   43c04:	1007883a 	mov	r3,r2
   43c08:	e0bfff17 	ldw	r2,-4(fp)
   43c0c:	10800817 	ldw	r2,32(r2)
   43c10:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   43c14:	e0bffe17 	ldw	r2,-8(fp)
   43c18:	e0fffd17 	ldw	r3,-12(fp)
   43c1c:	d8000015 	stw	zero,0(sp)
   43c20:	e1ffff17 	ldw	r7,-4(fp)
   43c24:	01800134 	movhi	r6,4
   43c28:	318f2404 	addi	r6,r6,15504
   43c2c:	180b883a 	mov	r5,r3
   43c30:	1009883a 	mov	r4,r2
   43c34:	004486c0 	call	4486c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   43c38:	e0bfff17 	ldw	r2,-4(fp)
   43c3c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   43c40:	e0bfff17 	ldw	r2,-4(fp)
   43c44:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   43c48:	d0e6b117 	ldw	r3,-25916(gp)
   43c4c:	e1ffff17 	ldw	r7,-4(fp)
   43c50:	01800134 	movhi	r6,4
   43c54:	318fa704 	addi	r6,r6,16028
   43c58:	180b883a 	mov	r5,r3
   43c5c:	1009883a 	mov	r4,r2
   43c60:	00444e00 	call	444e0 <alt_alarm_start>
   43c64:	1000040e 	bge	r2,zero,43c78 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   43c68:	e0ffff17 	ldw	r3,-4(fp)
   43c6c:	00a00034 	movhi	r2,32768
   43c70:	10bfffc4 	addi	r2,r2,-1
   43c74:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   43c78:	0001883a 	nop
   43c7c:	e037883a 	mov	sp,fp
   43c80:	dfc00117 	ldw	ra,4(sp)
   43c84:	df000017 	ldw	fp,0(sp)
   43c88:	dec00204 	addi	sp,sp,8
   43c8c:	f800283a 	ret

00043c90 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   43c90:	defff804 	addi	sp,sp,-32
   43c94:	df000715 	stw	fp,28(sp)
   43c98:	df000704 	addi	fp,sp,28
   43c9c:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   43ca0:	e0bff917 	ldw	r2,-28(fp)
   43ca4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   43ca8:	e0bffd17 	ldw	r2,-12(fp)
   43cac:	10800017 	ldw	r2,0(r2)
   43cb0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43cb4:	e0bffc17 	ldw	r2,-16(fp)
   43cb8:	10800104 	addi	r2,r2,4
   43cbc:	10800037 	ldwio	r2,0(r2)
   43cc0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   43cc4:	e0bffb17 	ldw	r2,-20(fp)
   43cc8:	1080c00c 	andi	r2,r2,768
   43ccc:	10006d26 	beq	r2,zero,43e84 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   43cd0:	e0bffb17 	ldw	r2,-20(fp)
   43cd4:	1080400c 	andi	r2,r2,256
   43cd8:	10003526 	beq	r2,zero,43db0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   43cdc:	00800074 	movhi	r2,1
   43ce0:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43ce4:	e0bffd17 	ldw	r2,-12(fp)
   43ce8:	10800a17 	ldw	r2,40(r2)
   43cec:	10800044 	addi	r2,r2,1
   43cf0:	1081ffcc 	andi	r2,r2,2047
   43cf4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   43cf8:	e0bffd17 	ldw	r2,-12(fp)
   43cfc:	10800b17 	ldw	r2,44(r2)
   43d00:	e0fffa17 	ldw	r3,-24(fp)
   43d04:	18801526 	beq	r3,r2,43d5c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43d08:	e0bffc17 	ldw	r2,-16(fp)
   43d0c:	10800037 	ldwio	r2,0(r2)
   43d10:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   43d14:	e0bfff17 	ldw	r2,-4(fp)
   43d18:	10a0000c 	andi	r2,r2,32768
   43d1c:	10001126 	beq	r2,zero,43d64 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43d20:	e0bffd17 	ldw	r2,-12(fp)
   43d24:	10800a17 	ldw	r2,40(r2)
   43d28:	e0ffff17 	ldw	r3,-4(fp)
   43d2c:	1809883a 	mov	r4,r3
   43d30:	e0fffd17 	ldw	r3,-12(fp)
   43d34:	1885883a 	add	r2,r3,r2
   43d38:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43d3c:	e0bffd17 	ldw	r2,-12(fp)
   43d40:	10800a17 	ldw	r2,40(r2)
   43d44:	10800044 	addi	r2,r2,1
   43d48:	10c1ffcc 	andi	r3,r2,2047
   43d4c:	e0bffd17 	ldw	r2,-12(fp)
   43d50:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   43d54:	0001883a 	nop
      {
   43d58:	003fe206 	br	43ce4 <altera_avalon_jtag_uart_irq+0x54>
          break;
   43d5c:	0001883a 	nop
   43d60:	00000106 	br	43d68 <altera_avalon_jtag_uart_irq+0xd8>
          break;
   43d64:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   43d68:	e0bfff17 	ldw	r2,-4(fp)
   43d6c:	10bfffec 	andhi	r2,r2,65535
   43d70:	10000f26 	beq	r2,zero,43db0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   43d74:	e0bffd17 	ldw	r2,-12(fp)
   43d78:	10c00817 	ldw	r3,32(r2)
   43d7c:	00bfff84 	movi	r2,-2
   43d80:	1886703a 	and	r3,r3,r2
   43d84:	e0bffd17 	ldw	r2,-12(fp)
   43d88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   43d8c:	e0bffc17 	ldw	r2,-16(fp)
   43d90:	10800104 	addi	r2,r2,4
   43d94:	1007883a 	mov	r3,r2
   43d98:	e0bffd17 	ldw	r2,-12(fp)
   43d9c:	10800817 	ldw	r2,32(r2)
   43da0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43da4:	e0bffc17 	ldw	r2,-16(fp)
   43da8:	10800104 	addi	r2,r2,4
   43dac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   43db0:	e0bffb17 	ldw	r2,-20(fp)
   43db4:	1080800c 	andi	r2,r2,512
   43db8:	103fbe26 	beq	r2,zero,43cb4 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   43dbc:	e0bffb17 	ldw	r2,-20(fp)
   43dc0:	1004d43a 	srli	r2,r2,16
   43dc4:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   43dc8:	00001406 	br	43e1c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   43dcc:	e0bffc17 	ldw	r2,-16(fp)
   43dd0:	e0fffd17 	ldw	r3,-12(fp)
   43dd4:	18c00d17 	ldw	r3,52(r3)
   43dd8:	e13ffd17 	ldw	r4,-12(fp)
   43ddc:	20c7883a 	add	r3,r4,r3
   43de0:	18c20e03 	ldbu	r3,2104(r3)
   43de4:	18c03fcc 	andi	r3,r3,255
   43de8:	18c0201c 	xori	r3,r3,128
   43dec:	18ffe004 	addi	r3,r3,-128
   43df0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   43df4:	e0bffd17 	ldw	r2,-12(fp)
   43df8:	10800d17 	ldw	r2,52(r2)
   43dfc:	10800044 	addi	r2,r2,1
   43e00:	10c1ffcc 	andi	r3,r2,2047
   43e04:	e0bffd17 	ldw	r2,-12(fp)
   43e08:	10c00d15 	stw	r3,52(r2)
   43e0c:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   43e10:	e0bffe17 	ldw	r2,-8(fp)
   43e14:	10bfffc4 	addi	r2,r2,-1
   43e18:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   43e1c:	e0bffe17 	ldw	r2,-8(fp)
   43e20:	10000526 	beq	r2,zero,43e38 <altera_avalon_jtag_uart_irq+0x1a8>
   43e24:	e0bffd17 	ldw	r2,-12(fp)
   43e28:	10c00d17 	ldw	r3,52(r2)
   43e2c:	e0bffd17 	ldw	r2,-12(fp)
   43e30:	10800c17 	ldw	r2,48(r2)
   43e34:	18bfe51e 	bne	r3,r2,43dcc <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
   43e38:	e0bffe17 	ldw	r2,-8(fp)
   43e3c:	103f9d26 	beq	r2,zero,43cb4 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   43e40:	e0bffd17 	ldw	r2,-12(fp)
   43e44:	10c00817 	ldw	r3,32(r2)
   43e48:	00bfff44 	movi	r2,-3
   43e4c:	1886703a 	and	r3,r3,r2
   43e50:	e0bffd17 	ldw	r2,-12(fp)
   43e54:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   43e58:	e0bffd17 	ldw	r2,-12(fp)
   43e5c:	10800017 	ldw	r2,0(r2)
   43e60:	10800104 	addi	r2,r2,4
   43e64:	1007883a 	mov	r3,r2
   43e68:	e0bffd17 	ldw	r2,-12(fp)
   43e6c:	10800817 	ldw	r2,32(r2)
   43e70:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   43e74:	e0bffc17 	ldw	r2,-16(fp)
   43e78:	10800104 	addi	r2,r2,4
   43e7c:	10800037 	ldwio	r2,0(r2)
  {
   43e80:	003f8c06 	br	43cb4 <altera_avalon_jtag_uart_irq+0x24>
      break;
   43e84:	0001883a 	nop
      }
    }
  }
}
   43e88:	0001883a 	nop
   43e8c:	e037883a 	mov	sp,fp
   43e90:	df000017 	ldw	fp,0(sp)
   43e94:	dec00104 	addi	sp,sp,4
   43e98:	f800283a 	ret

00043e9c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   43e9c:	defffc04 	addi	sp,sp,-16
   43ea0:	df000315 	stw	fp,12(sp)
   43ea4:	df000304 	addi	fp,sp,12
   43ea8:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   43eac:	e0bffd17 	ldw	r2,-12(fp)
   43eb0:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   43eb4:	e0bfff17 	ldw	r2,-4(fp)
   43eb8:	10800017 	ldw	r2,0(r2)
   43ebc:	10800104 	addi	r2,r2,4
   43ec0:	10800037 	ldwio	r2,0(r2)
   43ec4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   43ec8:	e0bffe17 	ldw	r2,-8(fp)
   43ecc:	1081000c 	andi	r2,r2,1024
   43ed0:	10000b26 	beq	r2,zero,43f00 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   43ed4:	e0bfff17 	ldw	r2,-4(fp)
   43ed8:	10800017 	ldw	r2,0(r2)
   43edc:	10800104 	addi	r2,r2,4
   43ee0:	1007883a 	mov	r3,r2
   43ee4:	e0bfff17 	ldw	r2,-4(fp)
   43ee8:	10800817 	ldw	r2,32(r2)
   43eec:	10810014 	ori	r2,r2,1024
   43ef0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   43ef4:	e0bfff17 	ldw	r2,-4(fp)
   43ef8:	10000915 	stw	zero,36(r2)
   43efc:	00000a06 	br	43f28 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   43f00:	e0bfff17 	ldw	r2,-4(fp)
   43f04:	10c00917 	ldw	r3,36(r2)
   43f08:	00a00034 	movhi	r2,32768
   43f0c:	10bfff04 	addi	r2,r2,-4
   43f10:	10c00536 	bltu	r2,r3,43f28 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   43f14:	e0bfff17 	ldw	r2,-4(fp)
   43f18:	10800917 	ldw	r2,36(r2)
   43f1c:	10c00044 	addi	r3,r2,1
   43f20:	e0bfff17 	ldw	r2,-4(fp)
   43f24:	10c00915 	stw	r3,36(r2)
   43f28:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   43f2c:	e037883a 	mov	sp,fp
   43f30:	df000017 	ldw	fp,0(sp)
   43f34:	dec00104 	addi	sp,sp,4
   43f38:	f800283a 	ret

00043f3c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   43f3c:	defffd04 	addi	sp,sp,-12
   43f40:	df000215 	stw	fp,8(sp)
   43f44:	df000204 	addi	fp,sp,8
   43f48:	e13fff15 	stw	r4,-4(fp)
   43f4c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   43f50:	00000506 	br	43f68 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   43f54:	e0bffe17 	ldw	r2,-8(fp)
   43f58:	1090000c 	andi	r2,r2,16384
   43f5c:	10000226 	beq	r2,zero,43f68 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   43f60:	00bffd44 	movi	r2,-11
   43f64:	00000b06 	br	43f94 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   43f68:	e0bfff17 	ldw	r2,-4(fp)
   43f6c:	10c00d17 	ldw	r3,52(r2)
   43f70:	e0bfff17 	ldw	r2,-4(fp)
   43f74:	10800c17 	ldw	r2,48(r2)
   43f78:	18800526 	beq	r3,r2,43f90 <altera_avalon_jtag_uart_close+0x54>
   43f7c:	e0bfff17 	ldw	r2,-4(fp)
   43f80:	10c00917 	ldw	r3,36(r2)
   43f84:	e0bfff17 	ldw	r2,-4(fp)
   43f88:	10800117 	ldw	r2,4(r2)
   43f8c:	18bff136 	bltu	r3,r2,43f54 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   43f90:	0005883a 	mov	r2,zero
}
   43f94:	e037883a 	mov	sp,fp
   43f98:	df000017 	ldw	fp,0(sp)
   43f9c:	dec00104 	addi	sp,sp,4
   43fa0:	f800283a 	ret

00043fa4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   43fa4:	defffa04 	addi	sp,sp,-24
   43fa8:	df000515 	stw	fp,20(sp)
   43fac:	df000504 	addi	fp,sp,20
   43fb0:	e13ffd15 	stw	r4,-12(fp)
   43fb4:	e17ffc15 	stw	r5,-16(fp)
   43fb8:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   43fbc:	00bff9c4 	movi	r2,-25
   43fc0:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   43fc4:	e0bffc17 	ldw	r2,-16(fp)
   43fc8:	109a8060 	cmpeqi	r2,r2,27137
   43fcc:	1000041e 	bne	r2,zero,43fe0 <altera_avalon_jtag_uart_ioctl+0x3c>
   43fd0:	e0bffc17 	ldw	r2,-16(fp)
   43fd4:	109a80a0 	cmpeqi	r2,r2,27138
   43fd8:	1000181e 	bne	r2,zero,4403c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   43fdc:	00002906 	br	44084 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   43fe0:	e0bffd17 	ldw	r2,-12(fp)
   43fe4:	10c00117 	ldw	r3,4(r2)
   43fe8:	00a00034 	movhi	r2,32768
   43fec:	10bfffc4 	addi	r2,r2,-1
   43ff0:	18802126 	beq	r3,r2,44078 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   43ff4:	e0bffb17 	ldw	r2,-20(fp)
   43ff8:	10800017 	ldw	r2,0(r2)
   43ffc:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   44000:	e0bffe17 	ldw	r2,-8(fp)
   44004:	10800090 	cmplti	r2,r2,2
   44008:	1000061e 	bne	r2,zero,44024 <altera_avalon_jtag_uart_ioctl+0x80>
   4400c:	e0fffe17 	ldw	r3,-8(fp)
   44010:	00a00034 	movhi	r2,32768
   44014:	10bfffc4 	addi	r2,r2,-1
   44018:	18800226 	beq	r3,r2,44024 <altera_avalon_jtag_uart_ioctl+0x80>
   4401c:	e0bffe17 	ldw	r2,-8(fp)
   44020:	00000206 	br	4402c <altera_avalon_jtag_uart_ioctl+0x88>
   44024:	00a00034 	movhi	r2,32768
   44028:	10bfff84 	addi	r2,r2,-2
   4402c:	e0fffd17 	ldw	r3,-12(fp)
   44030:	18800115 	stw	r2,4(r3)
      rc = 0;
   44034:	e03fff15 	stw	zero,-4(fp)
    break;
   44038:	00000f06 	br	44078 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   4403c:	e0bffd17 	ldw	r2,-12(fp)
   44040:	10c00117 	ldw	r3,4(r2)
   44044:	00a00034 	movhi	r2,32768
   44048:	10bfffc4 	addi	r2,r2,-1
   4404c:	18800c26 	beq	r3,r2,44080 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   44050:	e0bffd17 	ldw	r2,-12(fp)
   44054:	10c00917 	ldw	r3,36(r2)
   44058:	e0bffd17 	ldw	r2,-12(fp)
   4405c:	10800117 	ldw	r2,4(r2)
   44060:	1885803a 	cmpltu	r2,r3,r2
   44064:	10c03fcc 	andi	r3,r2,255
   44068:	e0bffb17 	ldw	r2,-20(fp)
   4406c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   44070:	e03fff15 	stw	zero,-4(fp)
    break;
   44074:	00000206 	br	44080 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   44078:	0001883a 	nop
   4407c:	00000106 	br	44084 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   44080:	0001883a 	nop
  }

  return rc;
   44084:	e0bfff17 	ldw	r2,-4(fp)
}
   44088:	e037883a 	mov	sp,fp
   4408c:	df000017 	ldw	fp,0(sp)
   44090:	dec00104 	addi	sp,sp,4
   44094:	f800283a 	ret

00044098 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   44098:	defff304 	addi	sp,sp,-52
   4409c:	dfc00c15 	stw	ra,48(sp)
   440a0:	df000b15 	stw	fp,44(sp)
   440a4:	df000b04 	addi	fp,sp,44
   440a8:	e13ff815 	stw	r4,-32(fp)
   440ac:	e17ff715 	stw	r5,-36(fp)
   440b0:	e1bff615 	stw	r6,-40(fp)
   440b4:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   440b8:	e0bff717 	ldw	r2,-36(fp)
   440bc:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   440c0:	00004706 	br	441e0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   440c4:	e0bff817 	ldw	r2,-32(fp)
   440c8:	10800a17 	ldw	r2,40(r2)
   440cc:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   440d0:	e0bff817 	ldw	r2,-32(fp)
   440d4:	10800b17 	ldw	r2,44(r2)
   440d8:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   440dc:	e0fffd17 	ldw	r3,-12(fp)
   440e0:	e0bffc17 	ldw	r2,-16(fp)
   440e4:	18800536 	bltu	r3,r2,440fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   440e8:	e0fffd17 	ldw	r3,-12(fp)
   440ec:	e0bffc17 	ldw	r2,-16(fp)
   440f0:	1885c83a 	sub	r2,r3,r2
   440f4:	e0bffe15 	stw	r2,-8(fp)
   440f8:	00000406 	br	4410c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   440fc:	00c20004 	movi	r3,2048
   44100:	e0bffc17 	ldw	r2,-16(fp)
   44104:	1885c83a 	sub	r2,r3,r2
   44108:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   4410c:	e0bffe17 	ldw	r2,-8(fp)
   44110:	10001e26 	beq	r2,zero,4418c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   44114:	e0fff617 	ldw	r3,-40(fp)
   44118:	e0bffe17 	ldw	r2,-8(fp)
   4411c:	1880022e 	bgeu	r3,r2,44128 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   44120:	e0bff617 	ldw	r2,-40(fp)
   44124:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   44128:	e0bff817 	ldw	r2,-32(fp)
   4412c:	10c00e04 	addi	r3,r2,56
   44130:	e0bffc17 	ldw	r2,-16(fp)
   44134:	1885883a 	add	r2,r3,r2
   44138:	e1bffe17 	ldw	r6,-8(fp)
   4413c:	100b883a 	mov	r5,r2
   44140:	e13fff17 	ldw	r4,-4(fp)
   44144:	004168c0 	call	4168c <memcpy>
      ptr   += n;
   44148:	e0ffff17 	ldw	r3,-4(fp)
   4414c:	e0bffe17 	ldw	r2,-8(fp)
   44150:	1885883a 	add	r2,r3,r2
   44154:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   44158:	e0fff617 	ldw	r3,-40(fp)
   4415c:	e0bffe17 	ldw	r2,-8(fp)
   44160:	1885c83a 	sub	r2,r3,r2
   44164:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   44168:	e0fffc17 	ldw	r3,-16(fp)
   4416c:	e0bffe17 	ldw	r2,-8(fp)
   44170:	1885883a 	add	r2,r3,r2
   44174:	10c1ffcc 	andi	r3,r2,2047
   44178:	e0bff817 	ldw	r2,-32(fp)
   4417c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   44180:	e0bff617 	ldw	r2,-40(fp)
   44184:	00bfcf16 	blt	zero,r2,440c4 <altera_avalon_jtag_uart_read+0x2c>
   44188:	00000106 	br	44190 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   4418c:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   44190:	e0ffff17 	ldw	r3,-4(fp)
   44194:	e0bff717 	ldw	r2,-36(fp)
   44198:	1880141e 	bne	r3,r2,441ec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4419c:	e0bff517 	ldw	r2,-44(fp)
   441a0:	1090000c 	andi	r2,r2,16384
   441a4:	1000131e 	bne	r2,zero,441f4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   441a8:	0001883a 	nop
   441ac:	e0bff817 	ldw	r2,-32(fp)
   441b0:	10800a17 	ldw	r2,40(r2)
   441b4:	e0fffd17 	ldw	r3,-12(fp)
   441b8:	1880051e 	bne	r3,r2,441d0 <altera_avalon_jtag_uart_read+0x138>
   441bc:	e0bff817 	ldw	r2,-32(fp)
   441c0:	10c00917 	ldw	r3,36(r2)
   441c4:	e0bff817 	ldw	r2,-32(fp)
   441c8:	10800117 	ldw	r2,4(r2)
   441cc:	18bff736 	bltu	r3,r2,441ac <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   441d0:	e0bff817 	ldw	r2,-32(fp)
   441d4:	10800a17 	ldw	r2,40(r2)
   441d8:	e0fffd17 	ldw	r3,-12(fp)
   441dc:	18800726 	beq	r3,r2,441fc <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   441e0:	e0bff617 	ldw	r2,-40(fp)
   441e4:	00bfb716 	blt	zero,r2,440c4 <altera_avalon_jtag_uart_read+0x2c>
   441e8:	00000506 	br	44200 <altera_avalon_jtag_uart_read+0x168>
      break;
   441ec:	0001883a 	nop
   441f0:	00000306 	br	44200 <altera_avalon_jtag_uart_read+0x168>
      break;
   441f4:	0001883a 	nop
   441f8:	00000106 	br	44200 <altera_avalon_jtag_uart_read+0x168>
      break;
   441fc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   44200:	e0ffff17 	ldw	r3,-4(fp)
   44204:	e0bff717 	ldw	r2,-36(fp)
   44208:	18801926 	beq	r3,r2,44270 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   4420c:	0005303a 	rdctl	r2,status
   44210:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44214:	e0fff917 	ldw	r3,-28(fp)
   44218:	00bfff84 	movi	r2,-2
   4421c:	1884703a 	and	r2,r3,r2
   44220:	1001703a 	wrctl	status,r2
  return context;
   44224:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   44228:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4422c:	e0bff817 	ldw	r2,-32(fp)
   44230:	10800817 	ldw	r2,32(r2)
   44234:	10c00054 	ori	r3,r2,1
   44238:	e0bff817 	ldw	r2,-32(fp)
   4423c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44240:	e0bff817 	ldw	r2,-32(fp)
   44244:	10800017 	ldw	r2,0(r2)
   44248:	10800104 	addi	r2,r2,4
   4424c:	1007883a 	mov	r3,r2
   44250:	e0bff817 	ldw	r2,-32(fp)
   44254:	10800817 	ldw	r2,32(r2)
   44258:	18800035 	stwio	r2,0(r3)
   4425c:	e0bffb17 	ldw	r2,-20(fp)
   44260:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   44264:	e0bffa17 	ldw	r2,-24(fp)
   44268:	1001703a 	wrctl	status,r2
}
   4426c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   44270:	e0ffff17 	ldw	r3,-4(fp)
   44274:	e0bff717 	ldw	r2,-36(fp)
   44278:	18800426 	beq	r3,r2,4428c <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   4427c:	e0ffff17 	ldw	r3,-4(fp)
   44280:	e0bff717 	ldw	r2,-36(fp)
   44284:	1885c83a 	sub	r2,r3,r2
   44288:	00000606 	br	442a4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   4428c:	e0bff517 	ldw	r2,-44(fp)
   44290:	1090000c 	andi	r2,r2,16384
   44294:	10000226 	beq	r2,zero,442a0 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   44298:	00bffd44 	movi	r2,-11
   4429c:	00000106 	br	442a4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   442a0:	00bffec4 	movi	r2,-5
}
   442a4:	e037883a 	mov	sp,fp
   442a8:	dfc00117 	ldw	ra,4(sp)
   442ac:	df000017 	ldw	fp,0(sp)
   442b0:	dec00204 	addi	sp,sp,8
   442b4:	f800283a 	ret

000442b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   442b8:	defff304 	addi	sp,sp,-52
   442bc:	dfc00c15 	stw	ra,48(sp)
   442c0:	df000b15 	stw	fp,44(sp)
   442c4:	df000b04 	addi	fp,sp,44
   442c8:	e13ff815 	stw	r4,-32(fp)
   442cc:	e17ff715 	stw	r5,-36(fp)
   442d0:	e1bff615 	stw	r6,-40(fp)
   442d4:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   442d8:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   442dc:	e0bff717 	ldw	r2,-36(fp)
   442e0:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   442e4:	00003706 	br	443c4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   442e8:	e0bff817 	ldw	r2,-32(fp)
   442ec:	10800c17 	ldw	r2,48(r2)
   442f0:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   442f4:	e0bff817 	ldw	r2,-32(fp)
   442f8:	10800d17 	ldw	r2,52(r2)
   442fc:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   44300:	e0fffc17 	ldw	r3,-16(fp)
   44304:	e0bfff17 	ldw	r2,-4(fp)
   44308:	1880062e 	bgeu	r3,r2,44324 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4430c:	e0ffff17 	ldw	r3,-4(fp)
   44310:	e0bffc17 	ldw	r2,-16(fp)
   44314:	1885c83a 	sub	r2,r3,r2
   44318:	10bfffc4 	addi	r2,r2,-1
   4431c:	e0bffe15 	stw	r2,-8(fp)
   44320:	00000b06 	br	44350 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   44324:	e0bfff17 	ldw	r2,-4(fp)
   44328:	10000526 	beq	r2,zero,44340 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4432c:	00c20004 	movi	r3,2048
   44330:	e0bffc17 	ldw	r2,-16(fp)
   44334:	1885c83a 	sub	r2,r3,r2
   44338:	e0bffe15 	stw	r2,-8(fp)
   4433c:	00000406 	br	44350 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   44340:	00c1ffc4 	movi	r3,2047
   44344:	e0bffc17 	ldw	r2,-16(fp)
   44348:	1885c83a 	sub	r2,r3,r2
   4434c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   44350:	e0bffe17 	ldw	r2,-8(fp)
   44354:	10001e26 	beq	r2,zero,443d0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   44358:	e0fff617 	ldw	r3,-40(fp)
   4435c:	e0bffe17 	ldw	r2,-8(fp)
   44360:	1880022e 	bgeu	r3,r2,4436c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   44364:	e0bff617 	ldw	r2,-40(fp)
   44368:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4436c:	e0bff817 	ldw	r2,-32(fp)
   44370:	10c20e04 	addi	r3,r2,2104
   44374:	e0bffc17 	ldw	r2,-16(fp)
   44378:	1885883a 	add	r2,r3,r2
   4437c:	e1bffe17 	ldw	r6,-8(fp)
   44380:	e17ff717 	ldw	r5,-36(fp)
   44384:	1009883a 	mov	r4,r2
   44388:	004168c0 	call	4168c <memcpy>
      ptr   += n;
   4438c:	e0fff717 	ldw	r3,-36(fp)
   44390:	e0bffe17 	ldw	r2,-8(fp)
   44394:	1885883a 	add	r2,r3,r2
   44398:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   4439c:	e0fff617 	ldw	r3,-40(fp)
   443a0:	e0bffe17 	ldw	r2,-8(fp)
   443a4:	1885c83a 	sub	r2,r3,r2
   443a8:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   443ac:	e0fffc17 	ldw	r3,-16(fp)
   443b0:	e0bffe17 	ldw	r2,-8(fp)
   443b4:	1885883a 	add	r2,r3,r2
   443b8:	10c1ffcc 	andi	r3,r2,2047
   443bc:	e0bff817 	ldw	r2,-32(fp)
   443c0:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   443c4:	e0bff617 	ldw	r2,-40(fp)
   443c8:	00bfc716 	blt	zero,r2,442e8 <altera_avalon_jtag_uart_write+0x30>
   443cc:	00000106 	br	443d4 <altera_avalon_jtag_uart_write+0x11c>
        break;
   443d0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   443d4:	0005303a 	rdctl	r2,status
   443d8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   443dc:	e0fff917 	ldw	r3,-28(fp)
   443e0:	00bfff84 	movi	r2,-2
   443e4:	1884703a 	and	r2,r3,r2
   443e8:	1001703a 	wrctl	status,r2
  return context;
   443ec:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   443f0:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   443f4:	e0bff817 	ldw	r2,-32(fp)
   443f8:	10800817 	ldw	r2,32(r2)
   443fc:	10c00094 	ori	r3,r2,2
   44400:	e0bff817 	ldw	r2,-32(fp)
   44404:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   44408:	e0bff817 	ldw	r2,-32(fp)
   4440c:	10800017 	ldw	r2,0(r2)
   44410:	10800104 	addi	r2,r2,4
   44414:	1007883a 	mov	r3,r2
   44418:	e0bff817 	ldw	r2,-32(fp)
   4441c:	10800817 	ldw	r2,32(r2)
   44420:	18800035 	stwio	r2,0(r3)
   44424:	e0bffb17 	ldw	r2,-20(fp)
   44428:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   4442c:	e0bffa17 	ldw	r2,-24(fp)
   44430:	1001703a 	wrctl	status,r2
}
   44434:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   44438:	e0bff617 	ldw	r2,-40(fp)
   4443c:	0080100e 	bge	zero,r2,44480 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   44440:	e0bff517 	ldw	r2,-44(fp)
   44444:	1090000c 	andi	r2,r2,16384
   44448:	1000101e 	bne	r2,zero,4448c <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4444c:	0001883a 	nop
   44450:	e0bff817 	ldw	r2,-32(fp)
   44454:	10800d17 	ldw	r2,52(r2)
   44458:	e0ffff17 	ldw	r3,-4(fp)
   4445c:	1880051e 	bne	r3,r2,44474 <altera_avalon_jtag_uart_write+0x1bc>
   44460:	e0bff817 	ldw	r2,-32(fp)
   44464:	10c00917 	ldw	r3,36(r2)
   44468:	e0bff817 	ldw	r2,-32(fp)
   4446c:	10800117 	ldw	r2,4(r2)
   44470:	18bff736 	bltu	r3,r2,44450 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   44474:	e0bff817 	ldw	r2,-32(fp)
   44478:	10800917 	ldw	r2,36(r2)
   4447c:	1000051e 	bne	r2,zero,44494 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   44480:	e0bff617 	ldw	r2,-40(fp)
   44484:	00bfcf16 	blt	zero,r2,443c4 <altera_avalon_jtag_uart_write+0x10c>
   44488:	00000306 	br	44498 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   4448c:	0001883a 	nop
   44490:	00000106 	br	44498 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   44494:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   44498:	e0fff717 	ldw	r3,-36(fp)
   4449c:	e0bffd17 	ldw	r2,-12(fp)
   444a0:	18800426 	beq	r3,r2,444b4 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   444a4:	e0fff717 	ldw	r3,-36(fp)
   444a8:	e0bffd17 	ldw	r2,-12(fp)
   444ac:	1885c83a 	sub	r2,r3,r2
   444b0:	00000606 	br	444cc <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   444b4:	e0bff517 	ldw	r2,-44(fp)
   444b8:	1090000c 	andi	r2,r2,16384
   444bc:	10000226 	beq	r2,zero,444c8 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   444c0:	00bffd44 	movi	r2,-11
   444c4:	00000106 	br	444cc <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   444c8:	00bffec4 	movi	r2,-5
}
   444cc:	e037883a 	mov	sp,fp
   444d0:	dfc00117 	ldw	ra,4(sp)
   444d4:	df000017 	ldw	fp,0(sp)
   444d8:	dec00204 	addi	sp,sp,8
   444dc:	f800283a 	ret

000444e0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   444e0:	defff404 	addi	sp,sp,-48
   444e4:	df000b15 	stw	fp,44(sp)
   444e8:	df000b04 	addi	fp,sp,44
   444ec:	e13ff815 	stw	r4,-32(fp)
   444f0:	e17ff715 	stw	r5,-36(fp)
   444f4:	e1bff615 	stw	r6,-40(fp)
   444f8:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   444fc:	e03ffe15 	stw	zero,-8(fp)
   44500:	e03fff15 	stw	zero,-4(fp)
   44504:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
   44508:	10004826 	beq	r2,zero,4462c <alt_alarm_start+0x14c>
  {
    if (alarm)
   4450c:	e0bff817 	ldw	r2,-32(fp)
   44510:	10004426 	beq	r2,zero,44624 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   44514:	e0bff817 	ldw	r2,-32(fp)
   44518:	e0fff617 	ldw	r3,-40(fp)
   4451c:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   44520:	e0bff817 	ldw	r2,-32(fp)
   44524:	e0fff517 	ldw	r3,-44(fp)
   44528:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   4452c:	0005303a 	rdctl	r2,status
   44530:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44534:	e0fff917 	ldw	r3,-28(fp)
   44538:	00bfff84 	movi	r2,-2
   4453c:	1884703a 	and	r2,r3,r2
   44540:	1001703a 	wrctl	status,r2
  return context;
   44544:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   44548:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4454c:	d0a6b217 	ldw	r2,-25912(gp)
   44550:	d0e6b317 	ldw	r3,-25908(gp)
      
      current_nticks = alt_nticks();
   44554:	e0bffe15 	stw	r2,-8(fp)
   44558:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   4455c:	e0bff717 	ldw	r2,-36(fp)
   44560:	1011883a 	mov	r8,r2
   44564:	0013883a 	mov	r9,zero
   44568:	e13ffe17 	ldw	r4,-8(fp)
   4456c:	e17fff17 	ldw	r5,-4(fp)
   44570:	4105883a 	add	r2,r8,r4
   44574:	120d803a 	cmpltu	r6,r2,r8
   44578:	4947883a 	add	r3,r9,r5
   4457c:	30c9883a 	add	r4,r6,r3
   44580:	2007883a 	mov	r3,r4
   44584:	1009883a 	mov	r4,r2
   44588:	180b883a 	mov	r5,r3
   4458c:	01800044 	movi	r6,1
   44590:	000f883a 	mov	r7,zero
   44594:	2185883a 	add	r2,r4,r6
   44598:	1111803a 	cmpltu	r8,r2,r4
   4459c:	29c7883a 	add	r3,r5,r7
   445a0:	40c9883a 	add	r4,r8,r3
   445a4:	2007883a 	mov	r3,r4
   445a8:	1009883a 	mov	r4,r2
   445ac:	180b883a 	mov	r5,r3
   445b0:	e0bff817 	ldw	r2,-32(fp)
   445b4:	11000215 	stw	r4,8(r2)
   445b8:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   445bc:	e0bff817 	ldw	r2,-32(fp)
   445c0:	d0e00c04 	addi	r3,gp,-32720
   445c4:	e0fffb15 	stw	r3,-20(fp)
   445c8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   445cc:	e0bffa17 	ldw	r2,-24(fp)
   445d0:	e0fffb17 	ldw	r3,-20(fp)
   445d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   445d8:	e0bffb17 	ldw	r2,-20(fp)
   445dc:	10c00017 	ldw	r3,0(r2)
   445e0:	e0bffa17 	ldw	r2,-24(fp)
   445e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   445e8:	e0bffb17 	ldw	r2,-20(fp)
   445ec:	10800017 	ldw	r2,0(r2)
   445f0:	e0fffa17 	ldw	r3,-24(fp)
   445f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   445f8:	e0bffb17 	ldw	r2,-20(fp)
   445fc:	e0fffa17 	ldw	r3,-24(fp)
   44600:	10c00015 	stw	r3,0(r2)
}
   44604:	0001883a 	nop
   44608:	e0bffd17 	ldw	r2,-12(fp)
   4460c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   44610:	e0bffc17 	ldw	r2,-16(fp)
   44614:	1001703a 	wrctl	status,r2
}
   44618:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   4461c:	0005883a 	mov	r2,zero
   44620:	00000306 	br	44630 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   44624:	00bffa84 	movi	r2,-22
   44628:	00000106 	br	44630 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   4462c:	00bfde84 	movi	r2,-134
  }
}
   44630:	e037883a 	mov	sp,fp
   44634:	df000017 	ldw	fp,0(sp)
   44638:	dec00104 	addi	sp,sp,4
   4463c:	f800283a 	ret

00044640 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   44640:	defffe04 	addi	sp,sp,-8
   44644:	df000115 	stw	fp,4(sp)
   44648:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4464c:	e03fff15 	stw	zero,-4(fp)
   44650:	00000506 	br	44668 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   44654:	e0bfff17 	ldw	r2,-4(fp)
   44658:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4465c:	e0bfff17 	ldw	r2,-4(fp)
   44660:	10800804 	addi	r2,r2,32
   44664:	e0bfff15 	stw	r2,-4(fp)
   44668:	e0bfff17 	ldw	r2,-4(fp)
   4466c:	10820030 	cmpltui	r2,r2,2048
   44670:	103ff81e 	bne	r2,zero,44654 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   44674:	0001883a 	nop
   44678:	0001883a 	nop
   4467c:	e037883a 	mov	sp,fp
   44680:	df000017 	ldw	fp,0(sp)
   44684:	dec00104 	addi	sp,sp,4
   44688:	f800283a 	ret

0004468c <alt_get_errno>:
{
   4468c:	defffe04 	addi	sp,sp,-8
   44690:	dfc00115 	stw	ra,4(sp)
   44694:	df000015 	stw	fp,0(sp)
   44698:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4469c:	d0a00917 	ldw	r2,-32732(gp)
   446a0:	10000326 	beq	r2,zero,446b0 <alt_get_errno+0x24>
   446a4:	d0a00917 	ldw	r2,-32732(gp)
   446a8:	103ee83a 	callr	r2
   446ac:	00000106 	br	446b4 <alt_get_errno+0x28>
   446b0:	d0a6ac04 	addi	r2,gp,-25936
}
   446b4:	e037883a 	mov	sp,fp
   446b8:	dfc00117 	ldw	ra,4(sp)
   446bc:	df000017 	ldw	fp,0(sp)
   446c0:	dec00204 	addi	sp,sp,8
   446c4:	f800283a 	ret

000446c8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   446c8:	defffa04 	addi	sp,sp,-24
   446cc:	dfc00515 	stw	ra,20(sp)
   446d0:	df000415 	stw	fp,16(sp)
   446d4:	df000404 	addi	fp,sp,16
   446d8:	e13ffd15 	stw	r4,-12(fp)
   446dc:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   446e0:	e0bffd17 	ldw	r2,-12(fp)
   446e4:	10000326 	beq	r2,zero,446f4 <alt_dev_llist_insert+0x2c>
   446e8:	e0bffd17 	ldw	r2,-12(fp)
   446ec:	10800217 	ldw	r2,8(r2)
   446f0:	1000061e 	bne	r2,zero,4470c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   446f4:	004468c0 	call	4468c <alt_get_errno>
   446f8:	1007883a 	mov	r3,r2
   446fc:	00800584 	movi	r2,22
   44700:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44704:	00bffa84 	movi	r2,-22
   44708:	00001406 	br	4475c <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4470c:	e0bffd17 	ldw	r2,-12(fp)
   44710:	e0fffc17 	ldw	r3,-16(fp)
   44714:	e0ffff15 	stw	r3,-4(fp)
   44718:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   4471c:	e0bffe17 	ldw	r2,-8(fp)
   44720:	e0ffff17 	ldw	r3,-4(fp)
   44724:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44728:	e0bfff17 	ldw	r2,-4(fp)
   4472c:	10c00017 	ldw	r3,0(r2)
   44730:	e0bffe17 	ldw	r2,-8(fp)
   44734:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   44738:	e0bfff17 	ldw	r2,-4(fp)
   4473c:	10800017 	ldw	r2,0(r2)
   44740:	e0fffe17 	ldw	r3,-8(fp)
   44744:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44748:	e0bfff17 	ldw	r2,-4(fp)
   4474c:	e0fffe17 	ldw	r3,-8(fp)
   44750:	10c00015 	stw	r3,0(r2)
}
   44754:	0001883a 	nop

  return 0;  
   44758:	0005883a 	mov	r2,zero
}
   4475c:	e037883a 	mov	sp,fp
   44760:	dfc00117 	ldw	ra,4(sp)
   44764:	df000017 	ldw	fp,0(sp)
   44768:	dec00204 	addi	sp,sp,8
   4476c:	f800283a 	ret

00044770 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   44770:	defffd04 	addi	sp,sp,-12
   44774:	dfc00215 	stw	ra,8(sp)
   44778:	df000115 	stw	fp,4(sp)
   4477c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   44780:	00800134 	movhi	r2,4
   44784:	10959304 	addi	r2,r2,22092
   44788:	e0bfff15 	stw	r2,-4(fp)
   4478c:	00000606 	br	447a8 <_do_ctors+0x38>
        (*ctor) (); 
   44790:	e0bfff17 	ldw	r2,-4(fp)
   44794:	10800017 	ldw	r2,0(r2)
   44798:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4479c:	e0bfff17 	ldw	r2,-4(fp)
   447a0:	10bfff04 	addi	r2,r2,-4
   447a4:	e0bfff15 	stw	r2,-4(fp)
   447a8:	e0ffff17 	ldw	r3,-4(fp)
   447ac:	00800134 	movhi	r2,4
   447b0:	10959404 	addi	r2,r2,22096
   447b4:	18bff62e 	bgeu	r3,r2,44790 <_do_ctors+0x20>
}
   447b8:	0001883a 	nop
   447bc:	0001883a 	nop
   447c0:	e037883a 	mov	sp,fp
   447c4:	dfc00117 	ldw	ra,4(sp)
   447c8:	df000017 	ldw	fp,0(sp)
   447cc:	dec00204 	addi	sp,sp,8
   447d0:	f800283a 	ret

000447d4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   447d4:	defffd04 	addi	sp,sp,-12
   447d8:	dfc00215 	stw	ra,8(sp)
   447dc:	df000115 	stw	fp,4(sp)
   447e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   447e4:	00800134 	movhi	r2,4
   447e8:	10959304 	addi	r2,r2,22092
   447ec:	e0bfff15 	stw	r2,-4(fp)
   447f0:	00000606 	br	4480c <_do_dtors+0x38>
        (*dtor) (); 
   447f4:	e0bfff17 	ldw	r2,-4(fp)
   447f8:	10800017 	ldw	r2,0(r2)
   447fc:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   44800:	e0bfff17 	ldw	r2,-4(fp)
   44804:	10bfff04 	addi	r2,r2,-4
   44808:	e0bfff15 	stw	r2,-4(fp)
   4480c:	e0ffff17 	ldw	r3,-4(fp)
   44810:	00800134 	movhi	r2,4
   44814:	10959404 	addi	r2,r2,22096
   44818:	18bff62e 	bgeu	r3,r2,447f4 <_do_dtors+0x20>
}
   4481c:	0001883a 	nop
   44820:	0001883a 	nop
   44824:	e037883a 	mov	sp,fp
   44828:	dfc00117 	ldw	ra,4(sp)
   4482c:	df000017 	ldw	fp,0(sp)
   44830:	dec00204 	addi	sp,sp,8
   44834:	f800283a 	ret

00044838 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   44838:	defffe04 	addi	sp,sp,-8
   4483c:	dfc00115 	stw	ra,4(sp)
   44840:	df000015 	stw	fp,0(sp)
   44844:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   44848:	01440004 	movi	r5,4096
   4484c:	0009883a 	mov	r4,zero
   44850:	00452a40 	call	452a4 <alt_icache_flush>
#endif
}
   44854:	0001883a 	nop
   44858:	e037883a 	mov	sp,fp
   4485c:	dfc00117 	ldw	ra,4(sp)
   44860:	df000017 	ldw	fp,0(sp)
   44864:	dec00204 	addi	sp,sp,8
   44868:	f800283a 	ret

0004486c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4486c:	defff904 	addi	sp,sp,-28
   44870:	dfc00615 	stw	ra,24(sp)
   44874:	df000515 	stw	fp,20(sp)
   44878:	df000504 	addi	fp,sp,20
   4487c:	e13fff15 	stw	r4,-4(fp)
   44880:	e17ffe15 	stw	r5,-8(fp)
   44884:	e1bffd15 	stw	r6,-12(fp)
   44888:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4488c:	e0800217 	ldw	r2,8(fp)
   44890:	d8800015 	stw	r2,0(sp)
   44894:	e1fffc17 	ldw	r7,-16(fp)
   44898:	e1bffd17 	ldw	r6,-12(fp)
   4489c:	e17ffe17 	ldw	r5,-8(fp)
   448a0:	e13fff17 	ldw	r4,-4(fp)
   448a4:	0044a1c0 	call	44a1c <alt_iic_isr_register>
}  
   448a8:	e037883a 	mov	sp,fp
   448ac:	dfc00117 	ldw	ra,4(sp)
   448b0:	df000017 	ldw	fp,0(sp)
   448b4:	dec00204 	addi	sp,sp,8
   448b8:	f800283a 	ret

000448bc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   448bc:	defff904 	addi	sp,sp,-28
   448c0:	df000615 	stw	fp,24(sp)
   448c4:	df000604 	addi	fp,sp,24
   448c8:	e13ffb15 	stw	r4,-20(fp)
   448cc:	e17ffa15 	stw	r5,-24(fp)
   448d0:	e0bffa17 	ldw	r2,-24(fp)
   448d4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   448d8:	0005303a 	rdctl	r2,status
   448dc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   448e0:	e0fffe17 	ldw	r3,-8(fp)
   448e4:	00bfff84 	movi	r2,-2
   448e8:	1884703a 	and	r2,r3,r2
   448ec:	1001703a 	wrctl	status,r2
  return context;
   448f0:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   448f4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   448f8:	00c00044 	movi	r3,1
   448fc:	e0bfff17 	ldw	r2,-4(fp)
   44900:	1884983a 	sll	r2,r3,r2
   44904:	1007883a 	mov	r3,r2
   44908:	d0a6b017 	ldw	r2,-25920(gp)
   4490c:	1884b03a 	or	r2,r3,r2
   44910:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44914:	d0a6b017 	ldw	r2,-25920(gp)
   44918:	100170fa 	wrctl	ienable,r2
   4491c:	e0bffd17 	ldw	r2,-12(fp)
   44920:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   44924:	e0bffc17 	ldw	r2,-16(fp)
   44928:	1001703a 	wrctl	status,r2
}
   4492c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   44930:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   44934:	e037883a 	mov	sp,fp
   44938:	df000017 	ldw	fp,0(sp)
   4493c:	dec00104 	addi	sp,sp,4
   44940:	f800283a 	ret

00044944 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   44944:	defff904 	addi	sp,sp,-28
   44948:	df000615 	stw	fp,24(sp)
   4494c:	df000604 	addi	fp,sp,24
   44950:	e13ffb15 	stw	r4,-20(fp)
   44954:	e17ffa15 	stw	r5,-24(fp)
   44958:	e0bffa17 	ldw	r2,-24(fp)
   4495c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   44960:	0005303a 	rdctl	r2,status
   44964:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44968:	e0fffe17 	ldw	r3,-8(fp)
   4496c:	00bfff84 	movi	r2,-2
   44970:	1884703a 	and	r2,r3,r2
   44974:	1001703a 	wrctl	status,r2
  return context;
   44978:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   4497c:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   44980:	00c00044 	movi	r3,1
   44984:	e0bfff17 	ldw	r2,-4(fp)
   44988:	1884983a 	sll	r2,r3,r2
   4498c:	0084303a 	nor	r2,zero,r2
   44990:	1007883a 	mov	r3,r2
   44994:	d0a6b017 	ldw	r2,-25920(gp)
   44998:	1884703a 	and	r2,r3,r2
   4499c:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   449a0:	d0a6b017 	ldw	r2,-25920(gp)
   449a4:	100170fa 	wrctl	ienable,r2
   449a8:	e0bffd17 	ldw	r2,-12(fp)
   449ac:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   449b0:	e0bffc17 	ldw	r2,-16(fp)
   449b4:	1001703a 	wrctl	status,r2
}
   449b8:	0001883a 	nop
  return 0;
   449bc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   449c0:	e037883a 	mov	sp,fp
   449c4:	df000017 	ldw	fp,0(sp)
   449c8:	dec00104 	addi	sp,sp,4
   449cc:	f800283a 	ret

000449d0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   449d0:	defffc04 	addi	sp,sp,-16
   449d4:	df000315 	stw	fp,12(sp)
   449d8:	df000304 	addi	fp,sp,12
   449dc:	e13ffe15 	stw	r4,-8(fp)
   449e0:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   449e4:	000530fa 	rdctl	r2,ienable
   449e8:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   449ec:	00c00044 	movi	r3,1
   449f0:	e0bffd17 	ldw	r2,-12(fp)
   449f4:	1884983a 	sll	r2,r3,r2
   449f8:	1007883a 	mov	r3,r2
   449fc:	e0bfff17 	ldw	r2,-4(fp)
   44a00:	1884703a 	and	r2,r3,r2
   44a04:	1004c03a 	cmpne	r2,r2,zero
   44a08:	10803fcc 	andi	r2,r2,255
}
   44a0c:	e037883a 	mov	sp,fp
   44a10:	df000017 	ldw	fp,0(sp)
   44a14:	dec00104 	addi	sp,sp,4
   44a18:	f800283a 	ret

00044a1c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44a1c:	defff504 	addi	sp,sp,-44
   44a20:	dfc00a15 	stw	ra,40(sp)
   44a24:	df000915 	stw	fp,36(sp)
   44a28:	df000904 	addi	fp,sp,36
   44a2c:	e13ffa15 	stw	r4,-24(fp)
   44a30:	e17ff915 	stw	r5,-28(fp)
   44a34:	e1bff815 	stw	r6,-32(fp)
   44a38:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   44a3c:	00bffa84 	movi	r2,-22
   44a40:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   44a44:	e0bff917 	ldw	r2,-28(fp)
   44a48:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   44a4c:	e0bffe17 	ldw	r2,-8(fp)
   44a50:	10800808 	cmpgei	r2,r2,32
   44a54:	1000251e 	bne	r2,zero,44aec <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   44a58:	0005303a 	rdctl	r2,status
   44a5c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44a60:	e0fffc17 	ldw	r3,-16(fp)
   44a64:	00bfff84 	movi	r2,-2
   44a68:	1884703a 	and	r2,r3,r2
   44a6c:	1001703a 	wrctl	status,r2
  return context;
   44a70:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   44a74:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   44a78:	e0bffe17 	ldw	r2,-8(fp)
   44a7c:	100890fa 	slli	r4,r2,3
   44a80:	e0fff817 	ldw	r3,-32(fp)
   44a84:	00800174 	movhi	r2,5
   44a88:	2085883a 	add	r2,r4,r2
   44a8c:	10e2f115 	stw	r3,-29756(r2)
    alt_irq[id].context = isr_context;
   44a90:	e0bffe17 	ldw	r2,-8(fp)
   44a94:	100890fa 	slli	r4,r2,3
   44a98:	e0fff717 	ldw	r3,-36(fp)
   44a9c:	00800174 	movhi	r2,5
   44aa0:	2085883a 	add	r2,r4,r2
   44aa4:	10e2f215 	stw	r3,-29752(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   44aa8:	e0bff817 	ldw	r2,-32(fp)
   44aac:	10000526 	beq	r2,zero,44ac4 <alt_iic_isr_register+0xa8>
   44ab0:	e0bffe17 	ldw	r2,-8(fp)
   44ab4:	100b883a 	mov	r5,r2
   44ab8:	e13ffa17 	ldw	r4,-24(fp)
   44abc:	00448bc0 	call	448bc <alt_ic_irq_enable>
   44ac0:	00000406 	br	44ad4 <alt_iic_isr_register+0xb8>
   44ac4:	e0bffe17 	ldw	r2,-8(fp)
   44ac8:	100b883a 	mov	r5,r2
   44acc:	e13ffa17 	ldw	r4,-24(fp)
   44ad0:	00449440 	call	44944 <alt_ic_irq_disable>
   44ad4:	e0bfff15 	stw	r2,-4(fp)
   44ad8:	e0bffd17 	ldw	r2,-12(fp)
   44adc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   44ae0:	e0bffb17 	ldw	r2,-20(fp)
   44ae4:	1001703a 	wrctl	status,r2
}
   44ae8:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   44aec:	e0bfff17 	ldw	r2,-4(fp)
}
   44af0:	e037883a 	mov	sp,fp
   44af4:	dfc00117 	ldw	ra,4(sp)
   44af8:	df000017 	ldw	fp,0(sp)
   44afc:	dec00204 	addi	sp,sp,8
   44b00:	f800283a 	ret

00044b04 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   44b04:	defff904 	addi	sp,sp,-28
   44b08:	dfc00615 	stw	ra,24(sp)
   44b0c:	df000515 	stw	fp,20(sp)
   44b10:	df000504 	addi	fp,sp,20
   44b14:	e13ffe15 	stw	r4,-8(fp)
   44b18:	e17ffd15 	stw	r5,-12(fp)
   44b1c:	e1bffc15 	stw	r6,-16(fp)
   44b20:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   44b24:	e1bffb17 	ldw	r6,-20(fp)
   44b28:	e17ffc17 	ldw	r5,-16(fp)
   44b2c:	e13ffd17 	ldw	r4,-12(fp)
   44b30:	0044d240 	call	44d24 <open>
   44b34:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   44b38:	e0bfff17 	ldw	r2,-4(fp)
   44b3c:	10001716 	blt	r2,zero,44b9c <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
   44b40:	e0bfff17 	ldw	r2,-4(fp)
   44b44:	10c00324 	muli	r3,r2,12
   44b48:	00800134 	movhi	r2,4
   44b4c:	1885883a 	add	r2,r3,r2
   44b50:	10d7ba17 	ldw	r3,24296(r2)
   44b54:	e0bffe17 	ldw	r2,-8(fp)
   44b58:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   44b5c:	e0bfff17 	ldw	r2,-4(fp)
   44b60:	10c00324 	muli	r3,r2,12
   44b64:	00800134 	movhi	r2,4
   44b68:	1885883a 	add	r2,r3,r2
   44b6c:	10d7bb17 	ldw	r3,24300(r2)
   44b70:	e0bffe17 	ldw	r2,-8(fp)
   44b74:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   44b78:	e0bfff17 	ldw	r2,-4(fp)
   44b7c:	10c00324 	muli	r3,r2,12
   44b80:	00800134 	movhi	r2,4
   44b84:	1885883a 	add	r2,r3,r2
   44b88:	10d7bc17 	ldw	r3,24304(r2)
   44b8c:	e0bffe17 	ldw	r2,-8(fp)
   44b90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   44b94:	e13fff17 	ldw	r4,-4(fp)
   44b98:	00437700 	call	43770 <alt_release_fd>
  }
} 
   44b9c:	0001883a 	nop
   44ba0:	e037883a 	mov	sp,fp
   44ba4:	dfc00117 	ldw	ra,4(sp)
   44ba8:	df000017 	ldw	fp,0(sp)
   44bac:	dec00204 	addi	sp,sp,8
   44bb0:	f800283a 	ret

00044bb4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   44bb4:	defffb04 	addi	sp,sp,-20
   44bb8:	dfc00415 	stw	ra,16(sp)
   44bbc:	df000315 	stw	fp,12(sp)
   44bc0:	df000304 	addi	fp,sp,12
   44bc4:	e13fff15 	stw	r4,-4(fp)
   44bc8:	e17ffe15 	stw	r5,-8(fp)
   44bcc:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   44bd0:	01c07fc4 	movi	r7,511
   44bd4:	01800044 	movi	r6,1
   44bd8:	e17fff17 	ldw	r5,-4(fp)
   44bdc:	01000134 	movhi	r4,4
   44be0:	2117bd04 	addi	r4,r4,24308
   44be4:	0044b040 	call	44b04 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   44be8:	01c07fc4 	movi	r7,511
   44bec:	000d883a 	mov	r6,zero
   44bf0:	e17ffe17 	ldw	r5,-8(fp)
   44bf4:	01000134 	movhi	r4,4
   44bf8:	2117ba04 	addi	r4,r4,24296
   44bfc:	0044b040 	call	44b04 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   44c00:	01c07fc4 	movi	r7,511
   44c04:	01800044 	movi	r6,1
   44c08:	e17ffd17 	ldw	r5,-12(fp)
   44c0c:	01000134 	movhi	r4,4
   44c10:	2117c004 	addi	r4,r4,24320
   44c14:	0044b040 	call	44b04 <alt_open_fd>
}  
   44c18:	0001883a 	nop
   44c1c:	e037883a 	mov	sp,fp
   44c20:	dfc00117 	ldw	ra,4(sp)
   44c24:	df000017 	ldw	fp,0(sp)
   44c28:	dec00204 	addi	sp,sp,8
   44c2c:	f800283a 	ret

00044c30 <alt_get_errno>:
{
   44c30:	defffe04 	addi	sp,sp,-8
   44c34:	dfc00115 	stw	ra,4(sp)
   44c38:	df000015 	stw	fp,0(sp)
   44c3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44c40:	d0a00917 	ldw	r2,-32732(gp)
   44c44:	10000326 	beq	r2,zero,44c54 <alt_get_errno+0x24>
   44c48:	d0a00917 	ldw	r2,-32732(gp)
   44c4c:	103ee83a 	callr	r2
   44c50:	00000106 	br	44c58 <alt_get_errno+0x28>
   44c54:	d0a6ac04 	addi	r2,gp,-25936
}
   44c58:	e037883a 	mov	sp,fp
   44c5c:	dfc00117 	ldw	ra,4(sp)
   44c60:	df000017 	ldw	fp,0(sp)
   44c64:	dec00204 	addi	sp,sp,8
   44c68:	f800283a 	ret

00044c6c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   44c6c:	defffd04 	addi	sp,sp,-12
   44c70:	df000215 	stw	fp,8(sp)
   44c74:	df000204 	addi	fp,sp,8
   44c78:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   44c7c:	e0bffe17 	ldw	r2,-8(fp)
   44c80:	10800217 	ldw	r2,8(r2)
   44c84:	10d00034 	orhi	r3,r2,16384
   44c88:	e0bffe17 	ldw	r2,-8(fp)
   44c8c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44c90:	e03fff15 	stw	zero,-4(fp)
   44c94:	00001a06 	br	44d00 <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44c98:	e0bfff17 	ldw	r2,-4(fp)
   44c9c:	10c00324 	muli	r3,r2,12
   44ca0:	00800134 	movhi	r2,4
   44ca4:	1885883a 	add	r2,r3,r2
   44ca8:	10d7ba17 	ldw	r3,24296(r2)
   44cac:	e0bffe17 	ldw	r2,-8(fp)
   44cb0:	10800017 	ldw	r2,0(r2)
   44cb4:	18800f1e 	bne	r3,r2,44cf4 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44cb8:	e0bfff17 	ldw	r2,-4(fp)
   44cbc:	10c00324 	muli	r3,r2,12
   44cc0:	00800134 	movhi	r2,4
   44cc4:	1885883a 	add	r2,r3,r2
   44cc8:	1097bc17 	ldw	r2,24304(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
   44ccc:	1000090e 	bge	r2,zero,44cf4 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
   44cd0:	e0bfff17 	ldw	r2,-4(fp)
   44cd4:	10c00324 	muli	r3,r2,12
   44cd8:	00800134 	movhi	r2,4
   44cdc:	1097ba04 	addi	r2,r2,24296
   44ce0:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44ce4:	e0fffe17 	ldw	r3,-8(fp)
   44ce8:	18800226 	beq	r3,r2,44cf4 <alt_file_locked+0x88>
    {
      return -EACCES;
   44cec:	00bffcc4 	movi	r2,-13
   44cf0:	00000806 	br	44d14 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
   44cf4:	e0bfff17 	ldw	r2,-4(fp)
   44cf8:	10800044 	addi	r2,r2,1
   44cfc:	e0bfff15 	stw	r2,-4(fp)
   44d00:	d0a00817 	ldw	r2,-32736(gp)
   44d04:	1007883a 	mov	r3,r2
   44d08:	e0bfff17 	ldw	r2,-4(fp)
   44d0c:	18bfe22e 	bgeu	r3,r2,44c98 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   44d10:	0005883a 	mov	r2,zero
}
   44d14:	e037883a 	mov	sp,fp
   44d18:	df000017 	ldw	fp,0(sp)
   44d1c:	dec00104 	addi	sp,sp,4
   44d20:	f800283a 	ret

00044d24 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   44d24:	defff604 	addi	sp,sp,-40
   44d28:	dfc00915 	stw	ra,36(sp)
   44d2c:	df000815 	stw	fp,32(sp)
   44d30:	df000804 	addi	fp,sp,32
   44d34:	e13ffa15 	stw	r4,-24(fp)
   44d38:	e17ff915 	stw	r5,-28(fp)
   44d3c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   44d40:	00bfffc4 	movi	r2,-1
   44d44:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   44d48:	00bffb44 	movi	r2,-19
   44d4c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   44d50:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   44d54:	d1600604 	addi	r5,gp,-32744
   44d58:	e13ffa17 	ldw	r4,-24(fp)
   44d5c:	004506c0 	call	4506c <alt_find_dev>
   44d60:	e0bfff15 	stw	r2,-4(fp)
   44d64:	e0bfff17 	ldw	r2,-4(fp)
   44d68:	1000051e 	bne	r2,zero,44d80 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   44d6c:	e13ffa17 	ldw	r4,-24(fp)
   44d70:	00450fc0 	call	450fc <alt_find_file>
   44d74:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   44d78:	00800044 	movi	r2,1
   44d7c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   44d80:	e0bfff17 	ldw	r2,-4(fp)
   44d84:	10002926 	beq	r2,zero,44e2c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   44d88:	e13fff17 	ldw	r4,-4(fp)
   44d8c:	00452040 	call	45204 <alt_get_fd>
   44d90:	e0bffe15 	stw	r2,-8(fp)
   44d94:	e0bffe17 	ldw	r2,-8(fp)
   44d98:	1000030e 	bge	r2,zero,44da8 <open+0x84>
    {
      status = index;
   44d9c:	e0bffe17 	ldw	r2,-8(fp)
   44da0:	e0bffd15 	stw	r2,-12(fp)
   44da4:	00002306 	br	44e34 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   44da8:	e0bffe17 	ldw	r2,-8(fp)
   44dac:	10c00324 	muli	r3,r2,12
   44db0:	00800134 	movhi	r2,4
   44db4:	1097ba04 	addi	r2,r2,24296
   44db8:	1885883a 	add	r2,r3,r2
   44dbc:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   44dc0:	e0fff917 	ldw	r3,-28(fp)
   44dc4:	00900034 	movhi	r2,16384
   44dc8:	10bfffc4 	addi	r2,r2,-1
   44dcc:	1886703a 	and	r3,r3,r2
   44dd0:	e0bffb17 	ldw	r2,-20(fp)
   44dd4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   44dd8:	e0bffc17 	ldw	r2,-16(fp)
   44ddc:	1000051e 	bne	r2,zero,44df4 <open+0xd0>
   44de0:	e13ffb17 	ldw	r4,-20(fp)
   44de4:	0044c6c0 	call	44c6c <alt_file_locked>
   44de8:	e0bffd15 	stw	r2,-12(fp)
   44dec:	e0bffd17 	ldw	r2,-12(fp)
   44df0:	10001016 	blt	r2,zero,44e34 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   44df4:	e0bfff17 	ldw	r2,-4(fp)
   44df8:	10800317 	ldw	r2,12(r2)
   44dfc:	10000826 	beq	r2,zero,44e20 <open+0xfc>
   44e00:	e0bfff17 	ldw	r2,-4(fp)
   44e04:	10800317 	ldw	r2,12(r2)
   44e08:	e1fff817 	ldw	r7,-32(fp)
   44e0c:	e1bff917 	ldw	r6,-28(fp)
   44e10:	e17ffa17 	ldw	r5,-24(fp)
   44e14:	e13ffb17 	ldw	r4,-20(fp)
   44e18:	103ee83a 	callr	r2
   44e1c:	00000106 	br	44e24 <open+0x100>
   44e20:	0005883a 	mov	r2,zero
   44e24:	e0bffd15 	stw	r2,-12(fp)
   44e28:	00000206 	br	44e34 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   44e2c:	00bffb44 	movi	r2,-19
   44e30:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   44e34:	e0bffd17 	ldw	r2,-12(fp)
   44e38:	1000090e 	bge	r2,zero,44e60 <open+0x13c>
  {
    alt_release_fd (index);  
   44e3c:	e13ffe17 	ldw	r4,-8(fp)
   44e40:	00437700 	call	43770 <alt_release_fd>
    ALT_ERRNO = -status;
   44e44:	0044c300 	call	44c30 <alt_get_errno>
   44e48:	1007883a 	mov	r3,r2
   44e4c:	e0bffd17 	ldw	r2,-12(fp)
   44e50:	0085c83a 	sub	r2,zero,r2
   44e54:	18800015 	stw	r2,0(r3)
    return -1;
   44e58:	00bfffc4 	movi	r2,-1
   44e5c:	00000106 	br	44e64 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   44e60:	e0bffe17 	ldw	r2,-8(fp)
}
   44e64:	e037883a 	mov	sp,fp
   44e68:	dfc00117 	ldw	ra,4(sp)
   44e6c:	df000017 	ldw	fp,0(sp)
   44e70:	dec00204 	addi	sp,sp,8
   44e74:	f800283a 	ret

00044e78 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   44e78:	defffa04 	addi	sp,sp,-24
   44e7c:	df000515 	stw	fp,20(sp)
   44e80:	df000504 	addi	fp,sp,20
   44e84:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   44e88:	0005303a 	rdctl	r2,status
   44e8c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44e90:	e0fffc17 	ldw	r3,-16(fp)
   44e94:	00bfff84 	movi	r2,-2
   44e98:	1884703a 	and	r2,r3,r2
   44e9c:	1001703a 	wrctl	status,r2
  return context;
   44ea0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   44ea4:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   44ea8:	e0bffb17 	ldw	r2,-20(fp)
   44eac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   44eb0:	e0bffd17 	ldw	r2,-12(fp)
   44eb4:	10800017 	ldw	r2,0(r2)
   44eb8:	e0fffd17 	ldw	r3,-12(fp)
   44ebc:	18c00117 	ldw	r3,4(r3)
   44ec0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   44ec4:	e0bffd17 	ldw	r2,-12(fp)
   44ec8:	10800117 	ldw	r2,4(r2)
   44ecc:	e0fffd17 	ldw	r3,-12(fp)
   44ed0:	18c00017 	ldw	r3,0(r3)
   44ed4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   44ed8:	e0bffd17 	ldw	r2,-12(fp)
   44edc:	e0fffd17 	ldw	r3,-12(fp)
   44ee0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   44ee4:	e0bffd17 	ldw	r2,-12(fp)
   44ee8:	e0fffd17 	ldw	r3,-12(fp)
   44eec:	10c00015 	stw	r3,0(r2)
} 
   44ef0:	0001883a 	nop
   44ef4:	e0bfff17 	ldw	r2,-4(fp)
   44ef8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   44efc:	e0bffe17 	ldw	r2,-8(fp)
   44f00:	1001703a 	wrctl	status,r2
}
   44f04:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   44f08:	0001883a 	nop
   44f0c:	e037883a 	mov	sp,fp
   44f10:	df000017 	ldw	fp,0(sp)
   44f14:	dec00104 	addi	sp,sp,4
   44f18:	f800283a 	ret

00044f1c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   44f1c:	defff904 	addi	sp,sp,-28
   44f20:	dfc00615 	stw	ra,24(sp)
   44f24:	df000515 	stw	fp,20(sp)
   44f28:	dc400415 	stw	r17,16(sp)
   44f2c:	dc000315 	stw	r16,12(sp)
   44f30:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   44f34:	d0a00c17 	ldw	r2,-32720(gp)
   44f38:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   44f3c:	d126b217 	ldw	r4,-25912(gp)
   44f40:	d166b317 	ldw	r5,-25908(gp)
   44f44:	01800044 	movi	r6,1
   44f48:	000f883a 	mov	r7,zero
   44f4c:	2185883a 	add	r2,r4,r6
   44f50:	1111803a 	cmpltu	r8,r2,r4
   44f54:	29c7883a 	add	r3,r5,r7
   44f58:	40c9883a 	add	r4,r8,r3
   44f5c:	2007883a 	mov	r3,r4
   44f60:	1009883a 	mov	r4,r2
   44f64:	180b883a 	mov	r5,r3
   44f68:	d126b215 	stw	r4,-25912(gp)
   44f6c:	d166b315 	stw	r5,-25908(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   44f70:	00002906 	br	45018 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   44f74:	e0bffd17 	ldw	r2,-12(fp)
   44f78:	10800017 	ldw	r2,0(r2)
   44f7c:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   44f80:	e13ffd17 	ldw	r4,-12(fp)
   44f84:	20800217 	ldw	r2,8(r4)
   44f88:	20c00317 	ldw	r3,12(r4)
   44f8c:	d126b217 	ldw	r4,-25912(gp)
   44f90:	d166b317 	ldw	r5,-25908(gp)
   44f94:	28c01e36 	bltu	r5,r3,45010 <alt_tick+0xf4>
   44f98:	1940011e 	bne	r3,r5,44fa0 <alt_tick+0x84>
   44f9c:	20801c36 	bltu	r4,r2,45010 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   44fa0:	e0bffd17 	ldw	r2,-12(fp)
   44fa4:	10800417 	ldw	r2,16(r2)
   44fa8:	e0fffd17 	ldw	r3,-12(fp)
   44fac:	18c00517 	ldw	r3,20(r3)
   44fb0:	1809883a 	mov	r4,r3
   44fb4:	103ee83a 	callr	r2
   44fb8:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   44fbc:	e0bffb17 	ldw	r2,-20(fp)
   44fc0:	1000031e 	bne	r2,zero,44fd0 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   44fc4:	e13ffd17 	ldw	r4,-12(fp)
   44fc8:	0044e780 	call	44e78 <alt_alarm_stop>
   44fcc:	00001006 	br	45010 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   44fd0:	e0bffd17 	ldw	r2,-12(fp)
   44fd4:	11000217 	ldw	r4,8(r2)
   44fd8:	11400317 	ldw	r5,12(r2)
   44fdc:	e0bffb17 	ldw	r2,-20(fp)
   44fe0:	1021883a 	mov	r16,r2
   44fe4:	0023883a 	mov	r17,zero
   44fe8:	2405883a 	add	r2,r4,r16
   44fec:	110d803a 	cmpltu	r6,r2,r4
   44ff0:	2c47883a 	add	r3,r5,r17
   44ff4:	30c9883a 	add	r4,r6,r3
   44ff8:	2007883a 	mov	r3,r4
   44ffc:	1009883a 	mov	r4,r2
   45000:	180b883a 	mov	r5,r3
   45004:	e0bffd17 	ldw	r2,-12(fp)
   45008:	11000215 	stw	r4,8(r2)
   4500c:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   45010:	e0bffc17 	ldw	r2,-16(fp)
   45014:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   45018:	e0fffd17 	ldw	r3,-12(fp)
   4501c:	d0a00c04 	addi	r2,gp,-32720
   45020:	18bfd41e 	bne	r3,r2,44f74 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   45024:	0001883a 	nop
}
   45028:	0001883a 	nop
   4502c:	e6fffe04 	addi	sp,fp,-8
   45030:	dfc00317 	ldw	ra,12(sp)
   45034:	df000217 	ldw	fp,8(sp)
   45038:	dc400117 	ldw	r17,4(sp)
   4503c:	dc000017 	ldw	r16,0(sp)
   45040:	dec00404 	addi	sp,sp,16
   45044:	f800283a 	ret

00045048 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   45048:	deffff04 	addi	sp,sp,-4
   4504c:	df000015 	stw	fp,0(sp)
   45050:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   45054:	000170fa 	wrctl	ienable,zero
}
   45058:	0001883a 	nop
   4505c:	e037883a 	mov	sp,fp
   45060:	df000017 	ldw	fp,0(sp)
   45064:	dec00104 	addi	sp,sp,4
   45068:	f800283a 	ret

0004506c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4506c:	defffa04 	addi	sp,sp,-24
   45070:	dfc00515 	stw	ra,20(sp)
   45074:	df000415 	stw	fp,16(sp)
   45078:	df000404 	addi	fp,sp,16
   4507c:	e13ffd15 	stw	r4,-12(fp)
   45080:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   45084:	e0bffc17 	ldw	r2,-16(fp)
   45088:	10800017 	ldw	r2,0(r2)
   4508c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   45090:	e13ffd17 	ldw	r4,-12(fp)
   45094:	00403c40 	call	403c4 <strlen>
   45098:	10800044 	addi	r2,r2,1
   4509c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   450a0:	00000d06 	br	450d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   450a4:	e0bfff17 	ldw	r2,-4(fp)
   450a8:	10800217 	ldw	r2,8(r2)
   450ac:	e0fffe17 	ldw	r3,-8(fp)
   450b0:	180d883a 	mov	r6,r3
   450b4:	e17ffd17 	ldw	r5,-12(fp)
   450b8:	1009883a 	mov	r4,r2
   450bc:	00453f00 	call	453f0 <memcmp>
   450c0:	1000021e 	bne	r2,zero,450cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   450c4:	e0bfff17 	ldw	r2,-4(fp)
   450c8:	00000706 	br	450e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   450cc:	e0bfff17 	ldw	r2,-4(fp)
   450d0:	10800017 	ldw	r2,0(r2)
   450d4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   450d8:	e0ffff17 	ldw	r3,-4(fp)
   450dc:	e0bffc17 	ldw	r2,-16(fp)
   450e0:	18bff01e 	bne	r3,r2,450a4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   450e4:	0005883a 	mov	r2,zero
}
   450e8:	e037883a 	mov	sp,fp
   450ec:	dfc00117 	ldw	ra,4(sp)
   450f0:	df000017 	ldw	fp,0(sp)
   450f4:	dec00204 	addi	sp,sp,8
   450f8:	f800283a 	ret

000450fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   450fc:	defffb04 	addi	sp,sp,-20
   45100:	dfc00415 	stw	ra,16(sp)
   45104:	df000315 	stw	fp,12(sp)
   45108:	df000304 	addi	fp,sp,12
   4510c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   45110:	d0a00417 	ldw	r2,-32752(gp)
   45114:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45118:	00003106 	br	451e0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   4511c:	e0bfff17 	ldw	r2,-4(fp)
   45120:	10800217 	ldw	r2,8(r2)
   45124:	1009883a 	mov	r4,r2
   45128:	00403c40 	call	403c4 <strlen>
   4512c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   45130:	e0bfff17 	ldw	r2,-4(fp)
   45134:	10c00217 	ldw	r3,8(r2)
   45138:	e0bffe17 	ldw	r2,-8(fp)
   4513c:	10bfffc4 	addi	r2,r2,-1
   45140:	1885883a 	add	r2,r3,r2
   45144:	10800003 	ldbu	r2,0(r2)
   45148:	10803fcc 	andi	r2,r2,255
   4514c:	1080201c 	xori	r2,r2,128
   45150:	10bfe004 	addi	r2,r2,-128
   45154:	10800bd8 	cmpnei	r2,r2,47
   45158:	1000031e 	bne	r2,zero,45168 <alt_find_file+0x6c>
    {
      len -= 1;
   4515c:	e0bffe17 	ldw	r2,-8(fp)
   45160:	10bfffc4 	addi	r2,r2,-1
   45164:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45168:	e0bffe17 	ldw	r2,-8(fp)
   4516c:	e0fffd17 	ldw	r3,-12(fp)
   45170:	1885883a 	add	r2,r3,r2
   45174:	10800003 	ldbu	r2,0(r2)
   45178:	10803fcc 	andi	r2,r2,255
   4517c:	1080201c 	xori	r2,r2,128
   45180:	10bfe004 	addi	r2,r2,-128
   45184:	10800be0 	cmpeqi	r2,r2,47
   45188:	1000081e 	bne	r2,zero,451ac <alt_find_file+0xb0>
   4518c:	e0bffe17 	ldw	r2,-8(fp)
   45190:	e0fffd17 	ldw	r3,-12(fp)
   45194:	1885883a 	add	r2,r3,r2
   45198:	10800003 	ldbu	r2,0(r2)
   4519c:	10803fcc 	andi	r2,r2,255
   451a0:	1080201c 	xori	r2,r2,128
   451a4:	10bfe004 	addi	r2,r2,-128
   451a8:	10000a1e 	bne	r2,zero,451d4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   451ac:	e0bfff17 	ldw	r2,-4(fp)
   451b0:	10800217 	ldw	r2,8(r2)
   451b4:	e0fffe17 	ldw	r3,-8(fp)
   451b8:	180d883a 	mov	r6,r3
   451bc:	e17ffd17 	ldw	r5,-12(fp)
   451c0:	1009883a 	mov	r4,r2
   451c4:	00453f00 	call	453f0 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   451c8:	1000021e 	bne	r2,zero,451d4 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   451cc:	e0bfff17 	ldw	r2,-4(fp)
   451d0:	00000706 	br	451f0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   451d4:	e0bfff17 	ldw	r2,-4(fp)
   451d8:	10800017 	ldw	r2,0(r2)
   451dc:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   451e0:	e0ffff17 	ldw	r3,-4(fp)
   451e4:	d0a00404 	addi	r2,gp,-32752
   451e8:	18bfcc1e 	bne	r3,r2,4511c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   451ec:	0005883a 	mov	r2,zero
}
   451f0:	e037883a 	mov	sp,fp
   451f4:	dfc00117 	ldw	ra,4(sp)
   451f8:	df000017 	ldw	fp,0(sp)
   451fc:	dec00204 	addi	sp,sp,8
   45200:	f800283a 	ret

00045204 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   45204:	defffc04 	addi	sp,sp,-16
   45208:	df000315 	stw	fp,12(sp)
   4520c:	df000304 	addi	fp,sp,12
   45210:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   45214:	00bffa04 	movi	r2,-24
   45218:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4521c:	e03fff15 	stw	zero,-4(fp)
   45220:	00001706 	br	45280 <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
   45224:	e0bfff17 	ldw	r2,-4(fp)
   45228:	10c00324 	muli	r3,r2,12
   4522c:	00800134 	movhi	r2,4
   45230:	1885883a 	add	r2,r3,r2
   45234:	1097ba17 	ldw	r2,24296(r2)
   45238:	10000e1e 	bne	r2,zero,45274 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
   4523c:	e0bfff17 	ldw	r2,-4(fp)
   45240:	11000324 	muli	r4,r2,12
   45244:	e0fffd17 	ldw	r3,-12(fp)
   45248:	00800134 	movhi	r2,4
   4524c:	2085883a 	add	r2,r4,r2
   45250:	10d7ba15 	stw	r3,24296(r2)
      if (i > alt_max_fd)
   45254:	d0e00817 	ldw	r3,-32736(gp)
   45258:	e0bfff17 	ldw	r2,-4(fp)
   4525c:	1880020e 	bge	r3,r2,45268 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
   45260:	e0bfff17 	ldw	r2,-4(fp)
   45264:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   45268:	e0bfff17 	ldw	r2,-4(fp)
   4526c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   45270:	00000706 	br	45290 <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
   45274:	e0bfff17 	ldw	r2,-4(fp)
   45278:	10800044 	addi	r2,r2,1
   4527c:	e0bfff15 	stw	r2,-4(fp)
   45280:	e0bfff17 	ldw	r2,-4(fp)
   45284:	10800810 	cmplti	r2,r2,32
   45288:	103fe61e 	bne	r2,zero,45224 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   4528c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   45290:	e0bffe17 	ldw	r2,-8(fp)
}
   45294:	e037883a 	mov	sp,fp
   45298:	df000017 	ldw	fp,0(sp)
   4529c:	dec00104 	addi	sp,sp,4
   452a0:	f800283a 	ret

000452a4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   452a4:	defffb04 	addi	sp,sp,-20
   452a8:	df000415 	stw	fp,16(sp)
   452ac:	df000404 	addi	fp,sp,16
   452b0:	e13ffd15 	stw	r4,-12(fp)
   452b4:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   452b8:	e0bffc17 	ldw	r2,-16(fp)
   452bc:	10840070 	cmpltui	r2,r2,4097
   452c0:	1000021e 	bne	r2,zero,452cc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   452c4:	00840004 	movi	r2,4096
   452c8:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
   452cc:	e0fffd17 	ldw	r3,-12(fp)
   452d0:	e0bffc17 	ldw	r2,-16(fp)
   452d4:	1885883a 	add	r2,r3,r2
   452d8:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   452dc:	e0bffd17 	ldw	r2,-12(fp)
   452e0:	e0bfff15 	stw	r2,-4(fp)
   452e4:	00000506 	br	452fc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   452e8:	e0bfff17 	ldw	r2,-4(fp)
   452ec:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   452f0:	e0bfff17 	ldw	r2,-4(fp)
   452f4:	10800804 	addi	r2,r2,32
   452f8:	e0bfff15 	stw	r2,-4(fp)
   452fc:	e0ffff17 	ldw	r3,-4(fp)
   45300:	e0bffe17 	ldw	r2,-8(fp)
   45304:	18bff836 	bltu	r3,r2,452e8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   45308:	e0bffd17 	ldw	r2,-12(fp)
   4530c:	108007cc 	andi	r2,r2,31
   45310:	10000226 	beq	r2,zero,4531c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   45314:	e0bfff17 	ldw	r2,-4(fp)
   45318:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4531c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   45320:	0001883a 	nop
   45324:	e037883a 	mov	sp,fp
   45328:	df000017 	ldw	fp,0(sp)
   4532c:	dec00104 	addi	sp,sp,4
   45330:	f800283a 	ret

00045334 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   45334:	defffe04 	addi	sp,sp,-8
   45338:	df000115 	stw	fp,4(sp)
   4533c:	df000104 	addi	fp,sp,4
   45340:	e13fff15 	stw	r4,-4(fp)
   45344:	e0bfff17 	ldw	r2,-4(fp)
   45348:	10bffe84 	addi	r2,r2,-6
   4534c:	10c00428 	cmpgeui	r3,r2,16
   45350:	18c03fcc 	andi	r3,r3,255
   45354:	18000f1e 	bne	r3,zero,45394 <alt_exception_cause_generated_bad_addr+0x60>
   45358:	00c00044 	movi	r3,1
   4535c:	1884983a 	sll	r2,r3,r2
   45360:	10e2c8cc 	andi	r3,r2,35619
   45364:	1806c03a 	cmpne	r3,r3,zero
   45368:	18c03fcc 	andi	r3,r3,255
   4536c:	1800051e 	bne	r3,zero,45384 <alt_exception_cause_generated_bad_addr+0x50>
   45370:	1084100c 	andi	r2,r2,4160
   45374:	1004c03a 	cmpne	r2,r2,zero
   45378:	10803fcc 	andi	r2,r2,255
   4537c:	1000031e 	bne	r2,zero,4538c <alt_exception_cause_generated_bad_addr+0x58>
   45380:	00000406 	br	45394 <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   45384:	00800044 	movi	r2,1
   45388:	00000306 	br	45398 <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   4538c:	0005883a 	mov	r2,zero
   45390:	00000106 	br	45398 <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
   45394:	0005883a 	mov	r2,zero
  }
}
   45398:	e037883a 	mov	sp,fp
   4539c:	df000017 	ldw	fp,0(sp)
   453a0:	dec00104 	addi	sp,sp,4
   453a4:	f800283a 	ret

000453a8 <atexit>:
   453a8:	200b883a 	mov	r5,r4
   453ac:	000f883a 	mov	r7,zero
   453b0:	000d883a 	mov	r6,zero
   453b4:	0009883a 	mov	r4,zero
   453b8:	00454681 	jmpi	45468 <__register_exitproc>

000453bc <exit>:
   453bc:	defffe04 	addi	sp,sp,-8
   453c0:	000b883a 	mov	r5,zero
   453c4:	dc000015 	stw	r16,0(sp)
   453c8:	dfc00115 	stw	ra,4(sp)
   453cc:	2021883a 	mov	r16,r4
   453d0:	00454f80 	call	454f8 <__call_exitprocs>
   453d4:	00800134 	movhi	r2,4
   453d8:	111c3217 	ldw	r4,28872(r2)
   453dc:	20800f17 	ldw	r2,60(r4)
   453e0:	10000126 	beq	r2,zero,453e8 <exit+0x2c>
   453e4:	103ee83a 	callr	r2
   453e8:	8009883a 	mov	r4,r16
   453ec:	00456180 	call	45618 <_exit>

000453f0 <memcmp>:
   453f0:	30800130 	cmpltui	r2,r6,4
   453f4:	10000b1e 	bne	r2,zero,45424 <memcmp+0x34>
   453f8:	2144b03a 	or	r2,r4,r5
   453fc:	108000cc 	andi	r2,r2,3
   45400:	1000171e 	bne	r2,zero,45460 <memcmp+0x70>
   45404:	20c00017 	ldw	r3,0(r4)
   45408:	28800017 	ldw	r2,0(r5)
   4540c:	1880141e 	bne	r3,r2,45460 <memcmp+0x70>
   45410:	31bfff04 	addi	r6,r6,-4
   45414:	30800128 	cmpgeui	r2,r6,4
   45418:	21000104 	addi	r4,r4,4
   4541c:	29400104 	addi	r5,r5,4
   45420:	103ff81e 	bne	r2,zero,45404 <memcmp+0x14>
   45424:	30bfffc4 	addi	r2,r6,-1
   45428:	30000b26 	beq	r6,zero,45458 <memcmp+0x68>
   4542c:	11800044 	addi	r6,r2,1
   45430:	218d883a 	add	r6,r4,r6
   45434:	00000106 	br	4543c <memcmp+0x4c>
   45438:	21800726 	beq	r4,r6,45458 <memcmp+0x68>
   4543c:	20800003 	ldbu	r2,0(r4)
   45440:	28c00003 	ldbu	r3,0(r5)
   45444:	21000044 	addi	r4,r4,1
   45448:	29400044 	addi	r5,r5,1
   4544c:	10fffa26 	beq	r2,r3,45438 <memcmp+0x48>
   45450:	10c5c83a 	sub	r2,r2,r3
   45454:	f800283a 	ret
   45458:	0005883a 	mov	r2,zero
   4545c:	f800283a 	ret
   45460:	30bfffc4 	addi	r2,r6,-1
   45464:	003ff106 	br	4542c <memcmp+0x3c>

00045468 <__register_exitproc>:
   45468:	00800134 	movhi	r2,4
   4546c:	10dc3217 	ldw	r3,28872(r2)
   45470:	18805217 	ldw	r2,328(r3)
   45474:	10001726 	beq	r2,zero,454d4 <__register_exitproc+0x6c>
   45478:	10c00117 	ldw	r3,4(r2)
   4547c:	1a000808 	cmpgei	r8,r3,32
   45480:	40001b1e 	bne	r8,zero,454f0 <__register_exitproc+0x88>
   45484:	20000b26 	beq	r4,zero,454b4 <__register_exitproc+0x4c>
   45488:	181090ba 	slli	r8,r3,2
   4548c:	02400044 	movi	r9,1
   45490:	48d2983a 	sll	r9,r9,r3
   45494:	1211883a 	add	r8,r2,r8
   45498:	41802215 	stw	r6,136(r8)
   4549c:	11806217 	ldw	r6,392(r2)
   454a0:	21000098 	cmpnei	r4,r4,2
   454a4:	324cb03a 	or	r6,r6,r9
   454a8:	11806215 	stw	r6,392(r2)
   454ac:	41c04215 	stw	r7,264(r8)
   454b0:	20000b26 	beq	r4,zero,454e0 <__register_exitproc+0x78>
   454b4:	19000084 	addi	r4,r3,2
   454b8:	200890ba 	slli	r4,r4,2
   454bc:	18c00044 	addi	r3,r3,1
   454c0:	10c00115 	stw	r3,4(r2)
   454c4:	1105883a 	add	r2,r2,r4
   454c8:	11400015 	stw	r5,0(r2)
   454cc:	0005883a 	mov	r2,zero
   454d0:	f800283a 	ret
   454d4:	18805304 	addi	r2,r3,332
   454d8:	18805215 	stw	r2,328(r3)
   454dc:	003fe606 	br	45478 <__register_exitproc+0x10>
   454e0:	11006317 	ldw	r4,396(r2)
   454e4:	2248b03a 	or	r4,r4,r9
   454e8:	11006315 	stw	r4,396(r2)
   454ec:	003ff106 	br	454b4 <__register_exitproc+0x4c>
   454f0:	00bfffc4 	movi	r2,-1
   454f4:	f800283a 	ret

000454f8 <__call_exitprocs>:
   454f8:	defff704 	addi	sp,sp,-36
   454fc:	00800134 	movhi	r2,4
   45500:	dcc00315 	stw	r19,12(sp)
   45504:	14dc3217 	ldw	r19,28872(r2)
   45508:	dc800215 	stw	r18,8(sp)
   4550c:	dfc00815 	stw	ra,32(sp)
   45510:	9c805217 	ldw	r18,328(r19)
   45514:	ddc00715 	stw	r23,28(sp)
   45518:	dd800615 	stw	r22,24(sp)
   4551c:	dd400515 	stw	r21,20(sp)
   45520:	dd000415 	stw	r20,16(sp)
   45524:	dc400115 	stw	r17,4(sp)
   45528:	dc000015 	stw	r16,0(sp)
   4552c:	90001026 	beq	r18,zero,45570 <__call_exitprocs+0x78>
   45530:	202b883a 	mov	r21,r4
   45534:	282d883a 	mov	r22,r5
   45538:	05000044 	movi	r20,1
   4553c:	94000117 	ldw	r16,4(r18)
   45540:	847fffc4 	addi	r17,r16,-1
   45544:	88000a16 	blt	r17,zero,45570 <__call_exitprocs+0x78>
   45548:	84000044 	addi	r16,r16,1
   4554c:	802090ba 	slli	r16,r16,2
   45550:	9421883a 	add	r16,r18,r16
   45554:	b0001126 	beq	r22,zero,4559c <__call_exitprocs+0xa4>
   45558:	80804017 	ldw	r2,256(r16)
   4555c:	15800f26 	beq	r2,r22,4559c <__call_exitprocs+0xa4>
   45560:	8c7fffc4 	addi	r17,r17,-1
   45564:	88bfffd8 	cmpnei	r2,r17,-1
   45568:	843fff04 	addi	r16,r16,-4
   4556c:	103ff91e 	bne	r2,zero,45554 <__call_exitprocs+0x5c>
   45570:	dfc00817 	ldw	ra,32(sp)
   45574:	ddc00717 	ldw	r23,28(sp)
   45578:	dd800617 	ldw	r22,24(sp)
   4557c:	dd400517 	ldw	r21,20(sp)
   45580:	dd000417 	ldw	r20,16(sp)
   45584:	dcc00317 	ldw	r19,12(sp)
   45588:	dc800217 	ldw	r18,8(sp)
   4558c:	dc400117 	ldw	r17,4(sp)
   45590:	dc000017 	ldw	r16,0(sp)
   45594:	dec00904 	addi	sp,sp,36
   45598:	f800283a 	ret
   4559c:	90800117 	ldw	r2,4(r18)
   455a0:	81800017 	ldw	r6,0(r16)
   455a4:	10bfffc4 	addi	r2,r2,-1
   455a8:	14401726 	beq	r2,r17,45608 <__call_exitprocs+0x110>
   455ac:	80000015 	stw	zero,0(r16)
   455b0:	303feb26 	beq	r6,zero,45560 <__call_exitprocs+0x68>
   455b4:	a446983a 	sll	r3,r20,r17
   455b8:	90806217 	ldw	r2,392(r18)
   455bc:	95c00117 	ldw	r23,4(r18)
   455c0:	1884703a 	and	r2,r3,r2
   455c4:	1000081e 	bne	r2,zero,455e8 <__call_exitprocs+0xf0>
   455c8:	303ee83a 	callr	r6
   455cc:	90c00117 	ldw	r3,4(r18)
   455d0:	98805217 	ldw	r2,328(r19)
   455d4:	1dc0011e 	bne	r3,r23,455dc <__call_exitprocs+0xe4>
   455d8:	14bfe126 	beq	r2,r18,45560 <__call_exitprocs+0x68>
   455dc:	103fe426 	beq	r2,zero,45570 <__call_exitprocs+0x78>
   455e0:	1025883a 	mov	r18,r2
   455e4:	003fd506 	br	4553c <__call_exitprocs+0x44>
   455e8:	90806317 	ldw	r2,396(r18)
   455ec:	81002017 	ldw	r4,128(r16)
   455f0:	1886703a 	and	r3,r3,r2
   455f4:	1800061e 	bne	r3,zero,45610 <__call_exitprocs+0x118>
   455f8:	200b883a 	mov	r5,r4
   455fc:	a809883a 	mov	r4,r21
   45600:	303ee83a 	callr	r6
   45604:	003ff106 	br	455cc <__call_exitprocs+0xd4>
   45608:	94400115 	stw	r17,4(r18)
   4560c:	003fe806 	br	455b0 <__call_exitprocs+0xb8>
   45610:	303ee83a 	callr	r6
   45614:	003fed06 	br	455cc <__call_exitprocs+0xd4>

00045618 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   45618:	defffd04 	addi	sp,sp,-12
   4561c:	df000215 	stw	fp,8(sp)
   45620:	df000204 	addi	fp,sp,8
   45624:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   45628:	0001883a 	nop
   4562c:	e0bffe17 	ldw	r2,-8(fp)
   45630:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   45634:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45638:	10000226 	beq	r2,zero,45644 <_exit+0x2c>
    ALT_SIM_FAIL();
   4563c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   45640:	00000106 	br	45648 <_exit+0x30>
    ALT_SIM_PASS();
   45644:	002af0b0 	cmpltui	zero,zero,43970
}
   45648:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4564c:	003fff06 	br	4564c <_exit+0x34>
